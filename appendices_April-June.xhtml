<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
    <link href="style.css" rel="stylesheet" type="text/css"/>
    <title>Appendices</title>
</head>

<body>

<!--<h1>Appendices April-June</h1>-->

<h2 id="toc_69">2019-04-01-0942_filtering_occurrences.R</h2>

<pre>wd &lt;- "C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2019-03-12_QIIME2_import"
setwd(wd)

load("2019-03-28-1529_workspace.RData")

require(ape)

t1 &lt;- read.tree("2019-03-28-1337_tree/2cuGLW7IFoX1xcwCVBkclA_newick.txt")

## Selecting just these taxa (the animals) for the next iteration of the tree, etc.
tl &lt;- t1$tip.label

require(Biostrings)

sl &lt;- substr(names(fas3), 1, 32) %in% substr(tl, 1, 32)
fas4 &lt;- fas3[sl]

fas4 &lt;- fas3[sl]
writeXStringSet(fas4, "2019-04-01-0959_rep_seqs.fas")


## Now on Yeti.
module load python/anaconda3

source activate qiime2-2019.1

cd /home/mattbowser/2017_STDP

qiime tools import \
  --input-path 2019-04-01-0959_rep_seqs.fas \
  --output-path 2019-04-01-0959_rep_seqs.qza \
  --type 'FeatureData[Sequence]'
 
qiime phylogeny align-to-tree-mafft-fasttree \
 --i-sequences 2019-04-01-0959_rep_seqs.qza \
 --output-dir 2019-04-01-1005_tree

Viewed using https://itol.embl.de

There are a couple of really long branches.
 
f8dbf6ac451a88ed7d1f7e65253c2611 NA
NCBI Blastn results: Archaea.
I removed that from the FASTA file.

0095910f21e01478940f4d7d885c0eca NA
Closest matches are ITS2 sequences from nematodes.  Dropping this one, too.

qiime tools import \
  --input-path 2019-04-01-1049_rep_seqs.fas \
  --output-path 2019-04-01-1049_rep_seqs.qza \
  --type 'FeatureData[Sequence]'
 
qiime phylogeny align-to-tree-mafft-fasttree \
 --i-sequences 2019-04-01-1049_rep_seqs.qza \
 --output-dir 2019-04-01-1054_tree 
 
## Oh, I forgot to filter out sequences with no observations after LULU filtering.
fas5 &lt;- readDNAStringSet("2019-04-01-1049_rep_seqs.fas")

ct5$nreads &lt;- apply(ct5[,2:31], 1, sum)

ct6 &lt;- ct5[ct5$nreads &gt; 0,]
dim(ct6)
[1] 196  48

sl &lt;- substr(names(fas5), 1, 32) %in% ct6$otu_id
fas6 &lt;- fas5[sl]

writeXStringSet(fas6, "2019-04-01-1104_rep_seqs.fas")

## On Yeti:
qiime tools import \
  --input-path 2019-04-01-1104_rep_seqs.fas \
  --output-path 2019-04-01-1104_rep_seqs.qza \
  --type 'FeatureData[Sequence]'
 
qiime phylogeny align-to-tree-mafft-fasttree \
 --i-sequences 2019-04-01-1104_rep_seqs.qza \
 --output-dir 2019-04-01-1106_tree 
 
Tree is at 
https://itol.embl.de/tree/1641591522350991554145671

## Back in R.
## Doing some saving.
write.csv(ct6, "2019-04-01-1123_otu_table.csv", row.names=FALSE)

sl &lt;- ct6$otu_id %in% substr(names(fas6), 1, 32) 
ct7 &lt;- ct6[sl,]
write.csv(ct7, "2019-04-01-1136_otu_table.csv", row.names=FALSE)

save.image("2019-04-01-1255_workspace.RData")

q()</pre>

<h2 id="toc_70">2019-04-05-0958_comparison.R</h2>

<pre>wd &lt;- "C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2019-04-01_comparison"
setwd(wd)

mdm &lt;- read.csv("C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2018-03-06_comparison/2018-03-07-1249_morph_occurrences_molten.csv", stringsAsFactors=FALSE)

ct6 &lt;- read.csv("C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2019-03-12_QIIME2_import/2019-04-01-1136_otu_table.csv", stringsAsFactors=FALSE)

## Going to reshape these data so that they can be compared.
library(reshape2)

## Making column names and label values conform.
names(ct6)[2:31] &lt;- gsub("_", "-", names(ct6)[2:31])
names(ct6)[40:46] &lt;- c("phylum_name",
 "class_name",
 "order_name",
 "family_name",
 "genus_name",
 "species_name",
 "accepted_id"
 )

## Removing those leading characters and underscores from taxonomy. 
rmld &lt;- function(x) {
 width &lt;- nchar(x)
 x &lt;- substr(x, 4, width)
 x
 }
ct6[39:45] &lt;- apply(ct6[39:45], c(1,2), rmld)

## Filling in accepted ids where missing even though we have data.
slm &lt;- is.na(ct6$accepted_id) | ct6$accepted_id==""
ct6[slm,]

sl &lt;- !is.na(ct6$genus_name)  &amp; slm
sl &lt;- sl &amp; !(ct6$genus_name=="")
ct6$accepted_id[sl] &lt;- ct6$genus_name[sl]

slm &lt;- is.na(ct6$accepted_id) | ct6$accepted_id==""
sl &lt;- !is.na(ct6$family_name)  &amp; slm
sl &lt;- sl &amp; !(ct6$family_name=="")
ct6$accepted_id[sl] &lt;- ct6$family_name[sl]

slm &lt;- is.na(ct6$accepted_id) | ct6$accepted_id==""
sl &lt;- !is.na(ct6$order_name)  &amp; slm
sl &lt;- sl &amp; !(ct6$order_name=="")
ct6$accepted_id[sl] &lt;- ct6$order_name[sl]

slm &lt;- is.na(ct6$accepted_id) | ct6$accepted_id==""
sl &lt;- !is.na(ct6$class_name)  &amp; slm
sl &lt;- sl &amp; !(ct6$class_name=="")
ct6$accepted_id[sl] &lt;- ct6$class_name[sl]

slm &lt;- is.na(ct6$accepted_id) | ct6$accepted_id==""
sl &lt;- !is.na(ct6$phylum_name)  &amp; slm
sl &lt;- sl &amp; !(ct6$phylum_name=="")
ct6$accepted_id[sl] &lt;- ct6$phylum_name[sl]

## Sorting.
od &lt;- order(ct6$phylum_name,
 ct6$class_name,
 ct6$order_name,
 ct6$family_name,
 ct6$genus_name,
 ct6$accepted_id,
 ct6$bin,
 ct6$otu_id
 )
ct6 &lt;- ct6[od,]

## Going to manually edit this some.
write.csv(ct6, "2019-04-05-1043_otu_table.csv", row.names=FALSE)</pre>

<h2 id="toc_71">2019-04-08-1440_comparison.R</h2>

<pre>wd &lt;- "C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2019-04-01_comparison"
setwd(wd)

mdm &lt;- read.csv("C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2018-03-06_comparison/2018-03-07-1249_morph_occurrences_molten.csv", stringsAsFactors=FALSE)

ct8 &lt;- read.csv("2019-04-07-2302_otu_table.csv", stringsAsFactors=FALSE)

library(reshape2)

## I actually want to look at read length versus how good the identifications were to help decide on parameters for filtering by read length.

ct8$read_length &lt;- nchar(ct8$seq)

ct8 &lt;- ct8[order(-ct8$read_length),]

summary(ct8$read_length)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  234.0   311.0   313.0   307.8   313.0   317.0 

jpeg("2019-04-08-1449_hist_read_lengths.jpg")
hist(ct8$read_length,
 main="Histogram of read lengths",
 xlab="Read length"
 )
dev.off()

as.data.frame(ct8[,c("read_length", "accepted_id")])
    read_length                 accepted_id
89          317               Curculionidae
106         316                 Philodinida
1           313       Trypodendron lineatum
3           313              Idolus debilis
4           313                    Pissodes
5           313       Trypodendron lineatum
6           313               Curculionidae
7           313        Plectrura spinicauda
8           313          Epiphanis cornutus
9           313     Dendroctonus rufipennis
10          313            Tipula platymera
12          313    Liotrichus sagitticollis
13          313            Acmaeops proteus
14          313            Dolurgus pumilus
15          313     Dendroctonus rufipennis
16          313     Dendroctonus rufipennis
17          313          Pseudips concinnus
18          313              Phaonia luteva
19          313     Tetropium cinnamopterum
20          313     Dendroctonus rufipennis
23          313        Hylurgops rugipennis
24          313          Prionocera turcica
25          313                Dendroctonus
27          313      Neospondylis upiformis
28          313       Trypodendron lineatum
29          313     Pseudanostirus hoppingi
30          313     Dendroctonus rufipennis
32          313       Gymnophora subarcuata
33          313          Dryocoetes affaber
35          313        Cryphalus ruficollis
36          313     Dendroctonus rufipennis
39          313     Dendroctonus rufipennis
40          313     Dendroctonus rufipennis
42          313       Phymatodes dimidiatus
43          313                 Hymenoptera
44          313        Hylurgops rugipennis
45          313       Phymatodes dimidiatus
48          313          Dryocoetes affaber
49          313       Trypodendron lineatum
51          313                 Polygraphus
52          313     Serropalpus substriatus
55          313                Dendroctonus
60          313         Xylophagus fulgidus
61          313     Phymatodes maculicollis
62          313     Dendroctonus rufipennis
63          313                Dendroctonus
64          313          Entomobrya nivalis
65          313        Hylurgops rugipennis
66          313       Trypodendron lineatum
67          313        Hydrophoria lancifer
69          313                Dendroctonus
70          313      Polygraphus rufipennis
72          313           Coenosia conforma
74          313    Liotrichus sagitticollis
76          313       Trypodendron lineatum
77          313         Spilogona sororcula
79          313              Idolus debilis
81          313                 Allocladius
82          313                     Insecta
84          313        Hylurgops rugipennis
85          313     Dendroctonus rufipennis
86          313     Dendroctonus rufipennis
87          313        Plectrura spinicauda
88          313                     Exechia
91          313        Clubiona kulczynskii
93          313     Microbregma emarginatum
98          313      Dryocoetes autographus
99          313              Phaonia errans
100         313      Polygraphus rufipennis
102         313                Homo sapiens
104         313            Dolurgus pumilus
107         313     Dendroctonus rufipennis
109         313          Tibellus maritimus
114         313               Curculionidae
115         313                     Cepheus
116         313          Placusa incompleta
118         313 Elasmostethus interstinctus
119         313            Acmaeops proteus
120         313        Thanasimus undatulus
121         313                Dendroctonus
122         313        Hylurgops rugipennis
123         313         Synneuron decipiens
125         313                  Coleoptera
126         313     Dendroctonus rufipennis
129         313     Xylotrechus longitarsis
131         313  Sciaridae sp. BOLD:AAP9896
133         313               Chrysophyceae
134         313     Dendroctonus rufipennis
135         313                Melandryidae
136         313         Spilogona sororcula
137         313                       Phora
2           312            Acmaeops proteus
11          312        Hemicoelus carinatus
34          312                Homo sapiens
57          312     Xylotrechus longitarsis
83          312       Xylotrechus undulatus
94          312    Liotrichus sagitticollis
108         312       Orthotomicus caelatus
140         312            Acmaeops proteus
31          311            Acmaeops proteus
41          311          Dryocoetes affaber
56          311                    Pissodes
68          311       Phymatodes dimidiatus
75          311      Neospondylis upiformis
80          311         Xylophagus fulgidus
92          311                    Pissodes
103         311          Dryocoetes affaber
112         311        Cryphalus ruficollis
130         311          Dryocoetes affaber
21          310             Bursaphelenchus
26          310                 Chromadorea
37          310             Bursaphelenchus
47          310                  Tylenchida
54          310                  Tylenchida
59          310        Hylurgops rugipennis
95          310                  Tylenchida
97          310                  Rhabditida
110         310                  Tylenchida
111         310             Sphaerulariidae
127         310                  Tylenchida
128         310                  Rhabditida
138         310                 Chromadorea
139         310                 Chromadorea
71          308                 Chromadorea
105         308                    Pissodes
90          307                     Insecta
73          305              Idolus debilis
113         292                    Pissodes
38          290               Curculionidae
50          290               Curculionidae
53          287               Curculionidae
101         279       Trypodendron lineatum
117         279       Trypodendron lineatum
58          277                     Insecta
124         241                Dendroctonus
22          240        Hylurgops rugipennis
132         240                   Hylurgops
46          239                   Hylurgops
96          239                   Hylurgops
78          234               Curculionidae

## What identification do we loose if we drop everything but the nominal read length of 313?

sl313 &lt;- ct8$read_length == 313

ids_all &lt;- levels(as.factor(ct8$accepted_id))
ids_313 &lt;- levels(as.factor(ct8$accepted_id[sl313]))

diffs &lt;- setdiff(ids_all, ids_313)
diffs
 [1] "Bursaphelenchus"      
 [2] "Chromadorea"          
 [3] "Hemicoelus carinatus" 
 [4] "Hylurgops"            
 [5] "Orthotomicus caelatus"
 [6] "Philodinida"          
 [7] "Rhabditida"           
 [8] "Sphaerulariidae"      
 [9] "Tylenchida"           
[10] "Xylotrechus undulatus"

## What lengths were these?
as.data.frame(ct8[,c("read_length", "accepted_id")])[ct8$accepted_id %in% diffs,]
    read_length           accepted_id
106         316           Philodinida
11          312  Hemicoelus carinatus
83          312 Xylotrechus undulatus
108         312 Orthotomicus caelatus
21          310       Bursaphelenchus
26          310           Chromadorea
37          310       Bursaphelenchus
47          310            Tylenchida
54          310            Tylenchida
95          310            Tylenchida
97          310            Rhabditida
110         310            Tylenchida
111         310       Sphaerulariidae
127         310            Tylenchida
128         310            Rhabditida
138         310           Chromadorea
139         310           Chromadorea
71          308           Chromadorea
132         240             Hylurgops
46          239             Hylurgops
96          239             Hylurgops

## So filtering out everything shorter than 310 and everything longer than 313 would only cut out the single rotifer.  I think this would be good.

sl &lt;- (ct8$read_length &gt; 309) &amp; (ct8$read_length &lt; 314)
ct9 &lt;- ct8[sl,]

dim(ct9)
[1] 121  50


## We still need to cut out anything other than arthropods and nematodes.
sl &lt;- ct9$phylum_name %in% c("Arthropoda", "Nematoda")
## Just looking at these...
ct9$accepted_id[!sl]
[1] "Homo sapiens"  "Chrysophyceae" "Homo sapiens"
ct9 &lt;- ct9[sl,]
dim(ct9)
[1] 118  50

## Ok, now for a fasta file for these.
library(Biostrings)
fas1 &lt;- DNAStringSet(ct9$seq)
## Making a few versions here.
names(fas1) &lt;- ct9$otu_id
writeXStringSet(fas1, "2019-04-08-1611_sequences.fas")
names(fas1) &lt;- ct9$accepted_id
writeXStringSet(fas1, "2019-04-08-1611_sequences_ids.fas")
names(fas1) &lt;- paste(ct9$otu_id, ct9$accepted_id)
writeXStringSet(fas1, "2019-04-08-1611_sequences_otu_ids_ids.fas")

## Now for a molten version of the dataset.
## First saving.
write.csv(ct9, "2019-04-08-1618_otu_table.csv", row.names=FALSE)

mdm$phylum_name &lt;- "Arthropoda"
mdm &lt;- mdm[,c(1,9,2:8)]

cols_to_retain &lt;- c(names(ct9)[2:31], "otu_id", "seq", names(ct9)[40:44], "accepted_id", "bin")

ct10 &lt;- ct9[,cols_to_retain]

ct11 &lt;- melt(ct10, id.vars=cols_to_retain[31:39])
ct11$sample_id &lt;- ct11$variable
ct11$sample_id &lt;- gsub("\\.", "-", ct11$sample_id)
ct11$variable &lt;- "read_count"

ct11 &lt;- ct11[ct11$value &gt; 0,]
dim(ct11)
[1] 181  12

d2 &lt;- merge(mdm, ct11, all=TRUE)

nrow(mdm) + nrow(ct11) == nrow(d2)
[1] TRUE

dim(d2)
[1] 275  12

## Saving this.
write.csv(d2, "2019-04-08-1644_occurrence_data.csv", row.names=FALSE)</pre>

<h2 id="toc_72">2019-04-10-1353_comparison.R</h2>

<pre>wd &lt;- "C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2019-04-01_comparison"
setwd(wd)

d2 &lt;- read.csv("2019-04-08-1644_occurrence_data.csv", stringsAsFactors=FALSE)

levels(as.factor(d2$sample_id))

library(xlsx)

s1 &lt;- read.xlsx("C:/Users/mattbowser/Documents/2017_STDP_NGS/data/morphological_identifications_v2019-04-10-1413.xlsx", sheetIndex=1) 

dl &lt;- s1[,c(1:4,8)]
names(dl) &lt;- c("end_date", "locality", "lure", "sample_id", "category")

d3 &lt;- merge(d2, dl, all.x=TRUE)

d3 &lt;- d3[,c(1, 14:16, 13, 11, 10, 2:7, 12, 8:9)]

library(reshape2)

sampd &lt;- unique(d3[,c("sample_id", "category")])
sampd

         sample_id          category
1    EAFB07JUN17-E Main Study Design
11  EAFB07JUN17-EA Main Study Design
28  EAFB07JUN17-IT Main Study Design
35   EAFB22MAY17-E Main Study Design
37  EAFB22MAY17-EA Main Study Design
52   EAFB30JUN17-E Main Study Design
68  EAFB30JUN17-EA Main Study Design
86  EAFB30JUN17-IT Main Study Design
97   JBER06JUN17-E Main Study Design
99  JBER06JUN17-EA Main Study Design
107 JBER06JUN17-IT Main Study Design
115 JBER10MAY17-R1             Extra
133 JBER10MAY17-R2             Extra
143 JBER11JUL17-IT Main Study Design
155  JBER20JUN17-E Main Study Design
159 JBER20JUN17-EA Main Study Design
173  JBER20JUN17-R             Extra
192  JBER24MAY17-E Main Study Design
194 JBER24MAY17-EA Main Study Design
205 JBER24MAY17-IT Main Study Design
210  JNUF02JUN17-E Main Study Design
215 JNUF02JUN17-EA Main Study Design
222  JNUF06JUL17-E Main Study Design
225 JNUF06JUL17-EA Main Study Design
227  JNUF11AUG17-E Main Study Design
229 JNUF20JUL17-EA Main Study Design
239  JNUF20JUN17-E Main Study Design
244  JNUF20JUN17-R             Extra
265  JNUF26MAY17-E Main Study Design
271 JNUF26MAY17-EA Main Study Design

aggregate(sampd$sample_id, by=list(sampd$category), FUN=length)
            Group.1  x
1             Extra  4
2 Main Study Design 26
## So 26 main study and 4 extra samples.

## What would be the best ways to summarize all these data?
d4all &lt;- acast(d3, phylum_name + class_name + order_name + family_name + genus_name + accepted_id ~ sample_id, fun.aggregat=sum, na.rm=TRUE)

## I see I need to update an identification to be consistent.
sl &lt;- d3$family_name == "Anobiidae"
d3$family_name[sl] &lt;- "Ptinidae"

d4all &lt;- acast(d3, phylum_name + class_name + order_name + family_name + accepted_id ~ sample_id ~ variable, fun.aggregate=sum, na.rm=TRUE)
dim(d4all)
[1] 84 30  2

## Saving here.
save.image("2019-04-10-1504_workspace.RData")

to10 &lt;- function(x)
 {
 if (x &gt; 0) {1}
 else {0}
 }

d5 &lt;- d4all
d5[,,] &lt;- apply(X=d4all, MARGIN=c(1,2,3), FUN=to10)

## Now trying to visualize.
 
image(d5[,,1])
image(d5[,,2])

## Now trying to recode observations.
d6 &lt;- d5
d6[,,2] &lt;- d6[,,2]*2

d7 &lt;- apply(X=d6, MARGIN=c(1,2), FUN=sum)
nr &lt;- nrow(d7)
nc &lt;- ncol(d7)
d7 &lt;- d7[nr:1,]
idlab &lt;- rownames(d7)
slab &lt;- colnames(d7)
d7 &lt;- t(d7)

idlab &lt;- gsub("_", " ", idlab)
idlab &lt;- gsub("  ", " ", idlab)

clr &lt;- c("white", "blue", "red", "purple")

png(file="2019-04-10-1548_occurrence_plot.png",
 width=950,
 height=1400
 )
par(mar=c(1,1,10,30))
image(d7,
 col=clr,
 xaxt="n",
 yaxt="n"
 )
grid(nc, nr)
box()
axis(side=4,
 labels=idlab,
 at=(0:(nr-1))/(nr-1),
 las=2
 )
axis(side=3,
 labels=slab,
 at=(0:(nc-1))/(nc-1), 
 las=2
 ) 
dev.off()

## Saving here.
save.image("2019-04-10-1604_workspace.RData")</pre>

<h2 id="toc_73">2019-04-11-0800_comparison.R</h2>

<pre>wd &lt;- "C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2019-04-01_comparison"
setwd(wd)

## I edited identifications, so I am repeating some previous processing.

mdm &lt;- read.csv("C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2018-03-06_comparison/2018-03-07-1249_morph_occurrences_molten.csv", stringsAsFactors=FALSE)

ct8 &lt;- read.csv("2019-04-11-0923_otu_table.csv", stringsAsFactors=FALSE)

library(reshape2)

ct8$read_length &lt;- nchar(ct8$seq)

ct8 &lt;- ct8[order(-ct8$read_length),]

sl313 &lt;- ct8$read_length == 313

ids_all &lt;- levels(as.factor(ct8$accepted_id))
ids_313 &lt;- levels(as.factor(ct8$accepted_id[sl313]))

diffs &lt;- setdiff(ids_all, ids_313)

sl &lt;- (ct8$read_length &gt; 309) &amp; (ct8$read_length &lt; 314)
ct9 &lt;- ct8[sl,]

## We still need to cut out anything other than arthropods and nematodes.
sl &lt;- ct9$phylum_name %in% c("Arthropoda", "Nematoda")

ct9 &lt;- ct9[sl,]

## Ok, now for a fasta file for these.
library(Biostrings)
fas1 &lt;- DNAStringSet(ct9$seq)
## Making a few versions here.
names(fas1) &lt;- ct9$otu_id
writeXStringSet(fas1, "2019-04-11-0931_sequences.fas")
names(fas1) &lt;- ct9$accepted_id
writeXStringSet(fas1, "2019-04-11-0931_sequences_ids.fas")
names(fas1) &lt;- paste(ct9$otu_id, ct9$accepted_id)
writeXStringSet(fas1, "2019-04-11-0931_sequences_otu_ids_ids.fas")

## Now for a molten version of the dataset.
## First saving.
write.csv(ct9, "2019-04-11-0932_otu_table.csv", row.names=FALSE)

mdm$phylum_name &lt;- "Arthropoda"
mdm &lt;- mdm[,c(1,9,2:8)]

cols_to_retain &lt;- c(names(ct9)[2:31], "otu_id", "seq", names(ct9)[40:44], "accepted_id", "bin")

ct10 &lt;- ct9[,cols_to_retain]

ct11 &lt;- melt(ct10, id.vars=cols_to_retain[31:39])
ct11$sample_id &lt;- ct11$variable
ct11$sample_id &lt;- gsub("\\.", "-", ct11$sample_id)
ct11$variable &lt;- "read_count"

ct11 &lt;- ct11[ct11$value &gt; 0,]
dim(ct11)
[1] 181  12

d2 &lt;- merge(mdm, ct11, all=TRUE)

nrow(mdm) + nrow(ct11) == nrow(d2)
[1] TRUE

dim(d2)
[1] 275  12

## Saving this.
write.csv(d2, "2019-04-11-0932_occurrence_data.csv", row.names=FALSE)

## Edited one morph identification, changing Anobiidae to Ptinidae: Anobiinae to be consistent.

d2 &lt;- read.csv("2019-04-11-0934_occurrence_data.csv", stringsAsFactors=FALSE)

library(xlsx)

s1 &lt;- read.xlsx("C:/Users/mattbowser/Documents/2017_STDP_NGS/data/morphological_identifications_v2019-04-10-1413.xlsx", sheetIndex=1) 

dl &lt;- s1[,c(1:4,8)]
names(dl) &lt;- c("end_date", "locality", "lure", "sample_id", "category")

d3 &lt;- merge(d2, dl, all.x=TRUE)

d3 &lt;- d3[,c(1, 14:16, 13, 11, 10, 2:7, 12, 8:9)]

library(reshape2)

sampd &lt;- unique(d3[,c("sample_id", "category")])

## Doing some reformatting so that names are not so repetitive.
sl &lt;- d3$class_name == d3$accepted_id
d3$accepted_id[sl] &lt;- ""
sl &lt;- d3$order_name == d3$accepted_id
d3$accepted_id[sl] &lt;- ""
sl &lt;- d3$family_name == d3$accepted_id
d3$accepted_id[sl] &lt;- ""

d4all &lt;- acast(d3, phylum_name + class_name + order_name + family_name + accepted_id ~ sample_id ~ variable, fun.aggregate=sum, na.rm=TRUE)
dim(d4all)

to10 &lt;- function(x)
 {
 if (x &gt; 0) {1}
 else {0}
 }

d5 &lt;- d4all
d5[,,] &lt;- apply(X=d4all, MARGIN=c(1,2,3), FUN=to10)

## Now trying to recode observations.
d6 &lt;- d5
d6[,,2] &lt;- d6[,,2]*2

d7 &lt;- apply(X=d6, MARGIN=c(1,2), FUN=sum)
nr &lt;- nrow(d7)
nc &lt;- ncol(d7)
d7 &lt;- d7[nr:1,]
idlab &lt;- rownames(d7)
slab &lt;- colnames(d7)
d7 &lt;- t(d7)

idlab &lt;- gsub("_", " ", idlab)
idlab &lt;- gsub("  ", " ", idlab)

clr &lt;- c("white", "blue", "red", "purple")

png(file="2019-04-11-0958_occurrence_plot.png",
 width=1050,
 height=1400
 )
par(mar=c(1,1,10,40))
image(d7,
 col=clr,
 xaxt="n",
 yaxt="n"
 )
grid(nc, nr)
box()
axis(side=4,
 labels=idlab,
 at=(0:(nr-1))/(nr-1),
 las=2
 )
axis(side=3,
 labels=slab,
 at=(0:(nc-1))/(nc-1), 
 las=2
 ) 
dev.off()

## Saving here.
save.image("2019-04-11-0958_workspace.RData")

## Now I want to summarize identifications.
## How many species identifications by both methods?
ids &lt;- dimnames(d4all)[[1]]
ids &lt;- as.data.frame(ids)
ids$sp &lt;- grepl(" ", ids$ids)
dim(ids)
[1] 85  2  ## 85 identifications total.
## How many of these were species resolution?
sum(ids$sp)
[1] 52  ## 52 species or BIN resolution ids.

## How many ids from each method?
smr &lt;- apply(d4all, c(1,3), sum)
smr[] &lt;- smr &gt; 0
apply(smr, 2, sum)
morph_count  read_count 
         30          59 ## Totals for each method.

## How many of these were species?
apply((smr &amp; ids$sp), 2, sum)
morph_count  read_count 
          7          46
		  
## Want to break things down by orders.
levels(as.factor(d3$order_name))
 [1] ""                 "Araneae"         
 [3] "Coleoptera"       "Diptera"         
 [5] "Entomobryomorpha" "Hemiptera"       
 [7] "Hymenoptera"      "Rhabditida"      
 [9] "Sarcoptiformes"   "Tylenchida" 

smr2 &lt;- colsplit(rownames(smr), "_", names=c("phylum_name", "class_name", "order_name", "family_name", "accepted_id"))

smr2 &lt;- cbind(smr2, smr)

aggregate(smr2$morph_count, by=list(smr2$phylum_name), sum)
     Group.1  x
1 Arthropoda 30
2   Nematoda  0

aggregate(smr2$morph_count, by=list(smr2$order_name), sum)
            Group.1  x
1                    0
2           Araneae  0
3        Coleoptera 29
4           Diptera  0
5  Entomobryomorpha  0
6         Hemiptera  1
7       Hymenoptera  0
8        Rhabditida  0
9    Sarcoptiformes  0
10       Tylenchida  0

aggregate(smr2$morph_count, by=list(smr2$family_name, smr2$order_name), sum)
            Group.1          Group.2  x
1                                     0
2       Clubionidae          Araneae  0
3     Philodromidae          Araneae  0
4                         Coleoptera  0
5         Anobiidae       Coleoptera  1
6      Cerambycidae       Coleoptera 10
7          Cleridae       Coleoptera  1
8     Curculionidae       Coleoptera 13
9        Elateridae       Coleoptera  1
10       Eucnemidae       Coleoptera  0
11     Melandryidae       Coleoptera  1
12         Ptinidae       Coleoptera  1
13    Staphylinidae       Coleoptera  0
14       Zopheridae       Coleoptera  1
15     Anthomyiidae          Diptera  0
16 Canthyloscelidae          Diptera  0
17     Chironomidae          Diptera  0
18         Muscidae          Diptera  0
19   Mycetophilidae          Diptera  0
20         Phoridae          Diptera  0
21        Sciaridae          Diptera  0
22        Tipulidae          Diptera  0
23     Xylophagidae          Diptera  0
24    Entomobryidae Entomobryomorpha  0
25 Acanthosomatidae        Hemiptera  0
26     Pentatomidae        Hemiptera  1
27    Ichneumonidae      Hymenoptera  0
28                        Rhabditida  0
29  Compactozetidae   Sarcoptiformes  0
30                        Tylenchida  0
31 Aphelenchoididae       Tylenchida  0
32  Sphaerulariidae       Tylenchida  0

aggregate(smr2$read_count, by=list(smr2$phylum_name), sum)
     Group.1  x
1 Arthropoda 54
2   Nematoda  5

aggregate(smr2$read_count, by=list(smr2$class_name, smr2$phylum_name), sum)
      Group.1    Group.2  x
1   Arachnida Arthropoda  3
2  Collembola Arthropoda  1
3     Insecta Arthropoda 50
4 Chromadorea   Nematoda  4
5 Secernentea   Nematoda  1

aggregate(smr2$read_count, by=list(smr2$order_name, smr2$class_name, smr2$phylum_name), sum)
            Group.1     Group.2    Group.3  x
1           Araneae   Arachnida Arthropoda  2
2    Sarcoptiformes   Arachnida Arthropoda  1
3  Entomobryomorpha  Collembola Arthropoda  1
4                       Insecta Arthropoda  1
5        Coleoptera     Insecta Arthropoda 33
6           Diptera     Insecta Arthropoda 14
7         Hemiptera     Insecta Arthropoda  1
8       Hymenoptera     Insecta Arthropoda  1
9                   Chromadorea   Nematoda  1
10       Rhabditida Chromadorea   Nematoda  1
11       Tylenchida Chromadorea   Nematoda  2
12       Tylenchida Secernentea   Nematoda  1

aggregate(smr2$read_count, by=list(smr2$family_name, smr2$order_name, smr2$class_name, smr2$phylum_name), sum)
            Group.1          Group.2     Group.3    Group.4  x
1       Clubionidae          Araneae   Arachnida Arthropoda  1
2     Philodromidae          Araneae   Arachnida Arthropoda  1
3   Compactozetidae   Sarcoptiformes   Arachnida Arthropoda  1
4     Entomobryidae Entomobryomorpha  Collembola Arthropoda  1
5                                        Insecta Arthropoda  1
6                         Coleoptera     Insecta Arthropoda  1
7         Anobiidae       Coleoptera     Insecta Arthropoda  0
8      Cerambycidae       Coleoptera     Insecta Arthropoda  8
9          Cleridae       Coleoptera     Insecta Arthropoda  1
10    Curculionidae       Coleoptera     Insecta Arthropoda 14
11       Elateridae       Coleoptera     Insecta Arthropoda  3
12       Eucnemidae       Coleoptera     Insecta Arthropoda  1
13     Melandryidae       Coleoptera     Insecta Arthropoda  2
14         Ptinidae       Coleoptera     Insecta Arthropoda  2
15    Staphylinidae       Coleoptera     Insecta Arthropoda  1
16       Zopheridae       Coleoptera     Insecta Arthropoda  0
17     Anthomyiidae          Diptera     Insecta Arthropoda  1
18 Canthyloscelidae          Diptera     Insecta Arthropoda  1
19     Chironomidae          Diptera     Insecta Arthropoda  1
20         Muscidae          Diptera     Insecta Arthropoda  4
21   Mycetophilidae          Diptera     Insecta Arthropoda  1
22         Phoridae          Diptera     Insecta Arthropoda  2
23        Sciaridae          Diptera     Insecta Arthropoda  1
24        Tipulidae          Diptera     Insecta Arthropoda  2
25     Xylophagidae          Diptera     Insecta Arthropoda  1
26 Acanthosomatidae        Hemiptera     Insecta Arthropoda  1
27     Pentatomidae        Hemiptera     Insecta Arthropoda  0
28    Ichneumonidae      Hymenoptera     Insecta Arthropoda  1
29                                   Chromadorea   Nematoda  1
30                        Rhabditida Chromadorea   Nematoda  1
31                        Tylenchida Chromadorea   Nematoda  1
32  Sphaerulariidae       Tylenchida Chromadorea   Nematoda  1
33 Aphelenchoididae       Tylenchida Secernentea   Nematoda  1

## species ids?
aggregate(smr2$morph_count &amp; ids$sp, by=list(smr2$phylum_name), sum)
     Group.1 x
1 Arthropoda 7
2   Nematoda 0

aggregate(smr2$morph_count &amp; ids$sp, by=list(smr2$order_name), sum)
            Group.1 x
1                   0
2           Araneae 0
3        Coleoptera 6
4           Diptera 0
5  Entomobryomorpha 0
6         Hemiptera 1
7       Hymenoptera 0
8        Rhabditida 0
9    Sarcoptiformes 0
10       Tylenchida 0

aggregate(smr2$morph_count &amp; ids$sp, by=list(smr2$family_name, smr2$order_name), sum)
            Group.1          Group.2 x
1                                    0
2       Clubionidae          Araneae 0
3     Philodromidae          Araneae 0
4                         Coleoptera 0
5         Anobiidae       Coleoptera 0
6      Cerambycidae       Coleoptera 4
7          Cleridae       Coleoptera 0
8     Curculionidae       Coleoptera 2
9        Elateridae       Coleoptera 0
10       Eucnemidae       Coleoptera 0
11     Melandryidae       Coleoptera 0
12         Ptinidae       Coleoptera 0
13    Staphylinidae       Coleoptera 0
14       Zopheridae       Coleoptera 0
15     Anthomyiidae          Diptera 0
16 Canthyloscelidae          Diptera 0
17     Chironomidae          Diptera 0
18         Muscidae          Diptera 0
19   Mycetophilidae          Diptera 0
20         Phoridae          Diptera 0
21        Sciaridae          Diptera 0
22        Tipulidae          Diptera 0
23     Xylophagidae          Diptera 0
24    Entomobryidae Entomobryomorpha 0
25 Acanthosomatidae        Hemiptera 0
26     Pentatomidae        Hemiptera 1
27    Ichneumonidae      Hymenoptera 0
28                        Rhabditida 0
29  Compactozetidae   Sarcoptiformes 0
30                        Tylenchida 0
31 Aphelenchoididae       Tylenchida 0
32  Sphaerulariidae       Tylenchida 0

aggregate(smr2$read_count &amp; ids$sp, by=list(smr2$phylum_name), sum)
     Group.1  x
1 Arthropoda 46
2   Nematoda  0

aggregate(smr2$read_count &amp; ids$sp, by=list(smr2$class_name, smr2$phylum_name), sum)
      Group.1    Group.2  x
1   Arachnida Arthropoda  2
2  Collembola Arthropoda  1
3     Insecta Arthropoda 43
4 Chromadorea   Nematoda  0
5 Secernentea   Nematoda  0

aggregate(smr2$read_count &amp; ids$sp, by=list(smr2$order_name, smr2$class_name, smr2$phylum_name), sum)
            Group.1     Group.2    Group.3  x
1           Araneae   Arachnida Arthropoda  2
2    Sarcoptiformes   Arachnida Arthropoda  0
3  Entomobryomorpha  Collembola Arthropoda  1
4                       Insecta Arthropoda  0
5        Coleoptera     Insecta Arthropoda 27
6           Diptera     Insecta Arthropoda 14
7         Hemiptera     Insecta Arthropoda  1
8       Hymenoptera     Insecta Arthropoda  1
9                   Chromadorea   Nematoda  0
10       Rhabditida Chromadorea   Nematoda  0
11       Tylenchida Chromadorea   Nematoda  0
12       Tylenchida Secernentea   Nematoda  0

aggregate(smr2$read_count &amp; ids$sp, by=list(smr2$family_name, smr2$order_name, smr2$class_name, smr2$phylum_name), sum)
            Group.1          Group.2     Group.3    Group.4  x
1       Clubionidae          Araneae   Arachnida Arthropoda  1
2     Philodromidae          Araneae   Arachnida Arthropoda  1
3   Compactozetidae   Sarcoptiformes   Arachnida Arthropoda  0
4     Entomobryidae Entomobryomorpha  Collembola Arthropoda  1
5                                        Insecta Arthropoda  0
6                         Coleoptera     Insecta Arthropoda  0
7         Anobiidae       Coleoptera     Insecta Arthropoda  0
8      Cerambycidae       Coleoptera     Insecta Arthropoda  8
9          Cleridae       Coleoptera     Insecta Arthropoda  1
10    Curculionidae       Coleoptera     Insecta Arthropoda 10
11       Elateridae       Coleoptera     Insecta Arthropoda  3
12       Eucnemidae       Coleoptera     Insecta Arthropoda  1
13     Melandryidae       Coleoptera     Insecta Arthropoda  1
14         Ptinidae       Coleoptera     Insecta Arthropoda  2
15    Staphylinidae       Coleoptera     Insecta Arthropoda  1
16       Zopheridae       Coleoptera     Insecta Arthropoda  0
17     Anthomyiidae          Diptera     Insecta Arthropoda  1
18 Canthyloscelidae          Diptera     Insecta Arthropoda  1
19     Chironomidae          Diptera     Insecta Arthropoda  1
20         Muscidae          Diptera     Insecta Arthropoda  4
21   Mycetophilidae          Diptera     Insecta Arthropoda  1
22         Phoridae          Diptera     Insecta Arthropoda  2
23        Sciaridae          Diptera     Insecta Arthropoda  1
24        Tipulidae          Diptera     Insecta Arthropoda  2
25     Xylophagidae          Diptera     Insecta Arthropoda  1
26 Acanthosomatidae        Hemiptera     Insecta Arthropoda  1
27     Pentatomidae        Hemiptera     Insecta Arthropoda  0
28    Ichneumonidae      Hymenoptera     Insecta Arthropoda  1
29                                   Chromadorea   Nematoda  0
30                        Rhabditida Chromadorea   Nematoda  0
31                        Tylenchida Chromadorea   Nematoda  0
32  Sphaerulariidae       Tylenchida Chromadorea   Nematoda  0
33 Aphelenchoididae       Tylenchida Secernentea   Nematoda  0

## Saving recent table to include in the paper.
write.csv(smr2, "2019-08-11-1056_taxa_table.csv", row.names=FALSE)

## Saving here.
save.image("2019-04-11-1056_workspace.RData")</pre>

<h2 id="toc_74">2019-04-12-1313_tree.txt</h2>

<pre>## On Yeti:
module load python/anaconda3

source activate qiime2-2019.1

cd /home/mattbowser/2017_STDP

qiime tools import \
  --input-path 2019-04-12-1327_sequences_otu_ids_ids.fas \
  --output-path 2019-04-12-1327_sequences_otu_ids_ids.qza \
  --type 'FeatureData[Sequence]'
 
qiime phylogeny align-to-tree-mafft-fasttree \
 --i-sequences 2019-04-12-1327_sequences_otu_ids_ids.qza \
 --output-dir 2019-04-12-1328_tree</pre>

<h2 id="toc_75">2019-05-15-1104_SRA_data.csv</h2>

<pre>## Assembling data needed for GenBanks SRA submission.
dd &lt;- "C:/Users/mattbowser/Documents/2017_STDP_NGS/data/RTL_data/Graham_5376Raw01192018"
wd &lt;- "C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2019-05-15_publishing_sample_data"

fn &lt;- dir(dd)

fn &lt;- fn[!grepl("fastq.gz", fn)]
fn

r1 &lt;- fn[grepl("_R1.fastq", fn)]
r2 &lt;- fn[grepl("_R2.fastq", fn)]

setwd(wd)
sd &lt;- read.delim("2019-05-15-0935_SRA_metadata_acc.txt")

at &lt;- read.delim("attributes.tsv")

fdf &lt;- as.data.frame(cbind(r1, r2))

fdf$sample_name &lt;- gsub("-mlCOIintF-HCO2198R_R1.fastq", "", substr(fdf$r1, 6, 100))

sd2 &lt;- merge(at, fdf, all.y=TRUE)
## Some of these sample identifiers did not line up.
sd2$sample_name[is.na(sd2$accession)]
[1] JBER10MAY17-R2 JBER10MAY17-R1 JBER20JUN17-R  JNUF20JUN17-R 
## These were in the FASTQ file names but not the Arctos records...

sd2 &lt;- merge(at, fdf, all.x=TRUE)
sd2$sample_name[is.na(sd2$r1)]
[1] JBER03AUG17-IT  JBER10MAY17-E   JBER10MAY17-EA  JBER18JUL17-DSA JBER20JUN17-IT  JBER30AUG17-E   JNUF20JUN17-SBB

## I infer now from the forest service mophological data that the names of some samples were apparently modified partway through, after data entry into Arctos but before submission to RTL genomics.

## Here they are in csv format.
arctos_original_identifier,RTL_identifier
JBER10MAY17-E,JBER10MAY17-R1
JBER10MAY17-EA,JBER10MAY17-R2
JNUF20JUN17-SBB,JNUF20JUN17-R
JBER20JUN17-IT,JBER20JUN17-R
## Saved as csv...

aid &lt;- read.csv("2019-05-15-1008_additional_identifiers.csv")

names(aid) &lt;- c("existing_other_id_number", "new_other_id_number")
aid$guid_prefix &lt;- "UAMObs:Ento"
aid$existing_other_id_type &lt;- "original identifier"
aid$new_other_id_type &lt;- "secondary identifier"

write.csv(aid, "2019-05-15-1020_additional_identifiers.csv", row.names=FALSE)
## Uploaded those to Arctos.

## Now to reconcile these for the GenBank SRA submission.
names(aid)[1] &lt;- "sample_name"
at2 &lt;- merge(at, aid[,1:2], all.x=TRUE)
at2$sample_name &lt;- as.character(at2$sample_name)
at2$new_other_id_number &lt;- as.character(at2$new_other_id_number)
at2$sample_name[!is.na(at2$new_other_id_number)] &lt;- at2$new_other_id_number[!is.na(at2$new_other_id_number)]

sd3 &lt;- merge(at2, fdf, all.y=TRUE)

## Saving this.
write.csv(sd3, "2019-05-15-1104_SRA_data.csv", row.names=FALSE)</pre>

<h2 id="toc_76">2019-05-16-0956_Arctos_data_prep.R</h2>

<pre>## Assembling data needed for GenBanks SRA submission.
wd &lt;- "C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2019-05-15_publishing_sample_data"
setwd(wd)

ad1 &lt;- read.csv("ArctosData_7E55570C51.csv", stringsAsFactors=FALSE)
od1 &lt;- read.csv("2019-04-11-0934_occurrence_data.csv", stringsAsFactors=FALSE)

dim(ad1)
[1]  33 223
dim(od1)
[1] 275  12

## Removing added species that were not originally in the samples.
asp &lt;- c("Ips typographus", "Tetropium fuscum", "Halyomorpha halys")
sl &lt;- od1$accepted_id %in% asp
od1 &lt;- od1[!sl,]
dim(od1)
[1] 272  12

## Need to split secondary identifiers.
spl &lt;- strsplit(ad1$OTHERCATALOGNUMBERS, "; ")

ad1$OTHER_ID_NUM_1 &lt;- sapply(spl, "[", 1)
ad1$OTHER_ID_NUM_1 &lt;- gsub("NCBI Biosample=", "", ad1$OTHER_ID_NUM_1)
ad1$OTHER_ID_NUM_1

ad1$OTHER_ID_NUM_2 &lt;- sapply(spl, "[", 2)
ad1$OTHER_ID_NUM_2 &lt;- gsub("original identifier=", "", ad1$OTHER_ID_NUM_2)
ad1$OTHER_ID_NUM_2

ad1$OTHER_ID_NUM_3 &lt;- sapply(spl, "[", 3)
ad1$OTHER_ID_NUM_3 &lt;- gsub("secondary identifier=", "", ad1$OTHER_ID_NUM_3)
ad1$OTHER_ID_NUM_3

## Now making a field for joining the data.
ad1$sample_id &lt;- ad1$OTHER_ID_NUM_2
ad1$sample_id[!is.na(ad1$OTHER_ID_NUM_3)] &lt;- ad1$OTHER_ID_NUM_3[!is.na(ad1$OTHER_ID_NUM_3)]

d2 &lt;- merge(ad1, od1)
dim(d2)
[1] 275 238

## Ok, now making a dataframe to upload to Arctos, starting with only the molecular ids.
ml &lt;- d3$NATURE_OF_ID=="molecular data"
COLLECTION_OBJECT_ID &lt;- 1:dim(d2)[1]
d3 &lt;- as.data.frame(COLLECTION_OBJECT_ID)
d3$ENTEREDBY &lt;- "mbowser"
d3$ACCN &lt;- "UAM-2019.01-FHP-EDRR-STDP-Ento"
d3$TAXON_NAME &lt;- d2$accepted_id
d3$NATURE_OF_ID &lt;- NA
d3$NATURE_OF_ID[d2$variable=="read_count"] &lt;- "molecular data"
d3$NATURE_OF_ID[d2$variable=="morph_count"] &lt;- "expert"
d3$ID_MADE_BY_AGENT &lt;- "unknown"
d3$ID_MADE_BY_AGENT[ml] &lt;- "Matt Bowser"
d3$MADE_DATE &lt;- "2017"
d3$MADE_DATE[ml] &lt;- "2019-04-11"
d3$PART_NAME_1 &lt;- "whole organism"
d3$PART_NAME_1[ml] &lt;- "media"
d3$PART_CONDITION_1 &lt;- "homogenized and presumed to have been discarded"
d3$PART_CONDITION_1[ml] &lt;- "good"
d3$PART_LOT_COUNT_1 &lt;- d2$value
d3$PART_LOT_COUNT_1[ml] &lt;- 1
d3$PART_DISPOSITION_1 &lt;- "used up"
d3$PART_DISPOSITION_1[ml] &lt;- "not applicable"
d3$PART_REMARK_1 &lt;- ""
## I want to include the actual sequences as FASTA. I need to add spaces to have this fit nicely.
width &lt;- 32 ## Same with as otu_id
nblocks &lt;- ceiling(max(nchar(d2$seq), na.rm=TRUE)/width)
d2$seqsp[ml] &lt;- substr(d2$seq[ml], 1, width)
for (this_block in 2:nblocks)
 {
 to_add &lt;- substr(d2$seq[ml], width*this_block - (width-1), width*this_block)
 d2$seqsp[ml] &lt;- paste(d2$seqsp[ml], to_add, sep=" ") 
 } 
d3$PART_REMARK_1[ml] &lt;- paste("OTU ID: ", d2$otu_id[ml], ", read count: ", d2$value[ml], ", sequence: ", d2$seqsp[ml], sep="") 
d3$COLLECTING_EVENT_ID &lt;- d2$COLLECTING_EVENT_ID
## Saving image.
save.image("2019-05-16-1118_workspace.RData")
## Saving one row to try it in the bulkloader.
write.csv(d3[1,], "2019-05-16-1119_blukload_row_001.csv", row.names=FALSE)

## I realized that I need to reformat some of those identifications.
idsp &lt;- strsplit(d2$accepted_id, " sp\\. ")
aid &lt;- sapply(idsp, "[", 1)
aid2 &lt;- sapply(idsp, "[", 2)
sl &lt;- !is.na(aid2)
aid[sl] &lt;- paste(aid[sl], " {", d2$accepted_id[sl], "}", sep="")
d3$TAXON_NAME &lt;- aid

save.image("2019-05-16-1201_workspace.RData")
## I still need to add other identifiers.
## On second thought these would work better as relationships after they are created.
#d3$OTHER_ID_NUM_1 &lt;- d2$OTHER_ID_NUM_1
#d3$OTHER_ID_NUM_2 &lt;- d2$OTHER_ID_NUM_2
#d3$OTHER_ID_NUM_3 &lt;- d2$OTHER_ID_NUM_3
#d3$OTHER_ID_NUM_TYPE_1 &lt;- "NCBI Biosample"
#d3$OTHER_ID_NUM_TYPE_1 &lt;- "original identifier"
#d3$OTHER_ID_NUM_TYPE_1 &lt;- "secondary identifier"

## Saving one row to try it in the bulkloader.
write.csv(d3[1,], "2019-05-16-1212_blukload_row_001.csv", row.names=FALSE)
## Tried loading, got lots of errors:
; guid_prefix is invalid; EVENT_ASSIGNED_BY_AGENT [  ] matches 0 agents; EVENT_ASSIGNED_DATE is invalid; SPECIMEN_EVENT_TYPE is invalid; PART_NAME_1 is invalid; ACCN is invalid

## Fixing these.
d3$GUID_PREFIX &lt;- "UAMObs:Ento"
d3$EVENT_ASSIGNED_BY_AGENT &lt;- "Matt Bowser"
d3$EVENT_ASSIGNED_DATE &lt;- "2019-05-16"
d3$SPECIMEN_EVENT_TYPE &lt;- "collection"
save.image("2019-05-16-1243_workspace.RData")

## Saving one row to try it in the bulkloader.
write.csv(d3[1,], "2019-05-16-1246_blukload_row_001.csv", row.names=FALSE)

## That seemed to work.
write.csv(d3[2:3,], "2019-05-16-1256_blukload_rows_002-003.csv", row.names=FALSE)

## That seemed to work, also.
write.csv(d3[4:7,], "2019-05-16-1259_blukload_rows_004-007.csv", row.names=FALSE)

write.csv(d3[8:20,], "2019-05-17-0734_blukload_rows_008-020.csv", row.names=FALSE)
## One of those will not load...
; TAXON_NAME (Ips pertabatus) not found
## Yes, that should be Ips perturbatus.
d3$TAXON_NAME[d3$TAXON_NAME=="Ips pertabatus"] &lt;- "Ips perturbatus"

write.csv(d3[8:20,], "2019-05-17-0737_blukload_rows_008-020.csv", row.names=FALSE)

write.csv(d3[21:50,], "2019-05-17-0740_blukload_rows_021-050.csv", row.names=FALSE)

write.csv(d3[51:100,], "2019-05-17-0748_blukload_rows_051-100.csv", row.names=FALSE)

write.csv(d3[101:200,], "2019-05-17-0750_blukload_rows_101-200.csv", row.names=FALSE)
Got errors:
; TAXON_NAME (Ichneumonie) not found
; TAXON_NAME (Phaonia luteva) not found
; TAXON_NAME (Phaonia luteva) not found

## One fix...
d3$TAXON_NAME &lt;- gsub("Ichneumonie", "Ichneumoninae", d3$TAXON_NAME)

## I added Phaonia luteva (Walker, 1849) to Arctos' taxonomy.  See https://doi.org/10.1186/1472-6785-12-24
write.csv(d3[101:200,], "2019-05-17-0750_blukload_rows_101-200.csv", row.names=FALSE)

write.csv(d3[201:272,], "2019-05-17-0831_blukload_rows_201-272.csv", row.names=FALSE)</pre>

<h2 id="toc_77">2019-05-21-1129_sample_frame.R</h2>

<pre>wd &lt;- "D:/projects/LTEMP/2019_sample_frame"
setwd(wd)

nlcd &lt;- read.csv("NLCD_2011_table.csv", stringsAsFactors=FALSE)

d1 &lt;- read.csv("LTEMP_site_table_2019-05-21-1126.csv", stringsAsFactors=FALSE)

## Changing some column names...
names(d1)[24] &lt;- "OBrien_LC_code"
names(d1)[25] &lt;- "OBrien_LC_class"
names(d1)[30] &lt;- "NLCD_2011_LC_code"

## Dropping some extraneous columns...
d1 &lt;- d1[,c(4:25, 30)]
head(d1)

## Join nlcd land cover types to existing site data.
nd &lt;- nlcd[,c("Value", "Land_Cover")]
names(nd) &lt;- c("NLCD_2011_LC_code", "NLCD_2011_LC_class")

d2 &lt;- merge(d1, nd)
d2 &lt;- d2[,c(2:23, 1, 24)]

## Now make some aggregates for deciding how to bin classes.
agao &lt;- aggregate(d2$access, by=list(d2$OBrien_LC_class), sum)
agro &lt;- aggregate(d2$rad_564, by=list(d2$OBrien_LC_class), sum)
aggo &lt;- aggregate(d2$grab_bag_2, by=list(d2$OBrien_LC_class), sum)

names(agao) &lt;- c("OBrien_LC_class", "access")
agao$rad_564 &lt;- agro$x
agao$grab_bag_2 &lt;- aggo$x

write.csv(agao, "2019-05-21-1353_OBrien_breakdown.csv", row.names=FALSE)

agao &lt;- aggregate(d2$access, by=list(d2$NLCD_2011_LC_class), sum)
agro &lt;- aggregate(d2$rad_564, by=list(d2$NLCD_2011_LC_class), sum)
aggo &lt;- aggregate(d2$grab_bag_2, by=list(d2$NLCD_2011_LC_class), sum)

names(agao) &lt;- c("NLCD_2011_LC_class", "access")
agao$rad_564 &lt;- agro$x
agao$grab_bag_2 &lt;- aggo$x

write.csv(agao, "2019-05-21-1356_NLCD_breakdown.csv", row.names=FALSE)

## which are the sites that were in the Stream O'Brien class?
d2$site[d2$OBrien_LC_class=="Stream"]
[1] 5577 5560
## Are these terrestrial, i.e. streamside?
5577 is an occasionally or seasonally flooded river braid, land when we visited it in 2004.
5560 is tundra and scree.  Calling these something like barren...

## What about the Wetland - shrub class?  Should these be lumped with wetlands or shrubs?
d2$site[d2$OBrien_LC_class=="Wetland - shrub"]
[1] 3105 3083 3139 3271 3097 3149 3257
3105 is a young, seral black spruce forest.
3083 is a wetland with lots of Betula nana.
3139 is a wetland.
3271 is a wetland.
3097 is an Alnus incana wetland.
3149 is a wetland.
3257 is a wetland. Going with wetland.

## Now what about NLCD Grassland/Herbaceous class?
d2$site[d2$NLCD_2011_LC_class=="Grassland/Herbaceous"]
[1] 3289 3231 3325 3215
3289 is black spruce. Nevermind. 3289 WAS black spruce in 2004.  It burned in the Fox Creek Fire, so herbaceous is likely correct.
3231 was spruce forest in 2006, right on the edge of the burn.  I think this is a resolution issue with the NLCD data.  That is ok.
3325 was burned in the Fox Creek Fire.
3215 was also burned in 2005.  So all of these are in or beside recent burns.

## I reclassified these in Excel to smaller numbers of class types.
obrc &lt;- read.csv("2019-05-21-1420_OBrien_breakdown_reclassed.csv", stringsAsFactors=FALSE)
nlrc &lt;- read.csv("2019-05-21-1430_NLCD_breakdown_reclassed.csv", stringsAsFactors=FALSE)

d3 &lt;- merge(d2, obrc)
d4 &lt;- merge(d3, nlrc)
d4 &lt;- d4[,c(3:23,2,25,24,1,26)]

## Saving this.
write.csv(d4, "LTEMP_site_table_2019-05-21-1454.csv", row.names=FALSE)

## Now new aggregates.
agao &lt;- aggregate(d4$access, by=list(d4$OBrien_LC_reclass), sum)
agro &lt;- aggregate(d4$rad_564, by=list(d4$OBrien_LC_reclass), sum)
aggo &lt;- aggregate(d4$grab_bag_2, by=list(d4$OBrien_LC_reclass), sum)
names(agao) &lt;- c("OBrien_LC_reclass", "access")
agao$rad_564 &lt;- agro$x
agao$grab_bag_2 &lt;- aggo$x
write.csv(agao, "2019-05-21-1455_OBrien_reclass_breakdown.csv", row.names=FALSE)

agao &lt;- aggregate(d4$access, by=list(d4$NLCD_2011_LC_reclass), sum)
agro &lt;- aggregate(d4$rad_564, by=list(d4$NLCD_2011_LC_reclass), sum)
aggo &lt;- aggregate(d4$grab_bag_2, by=list(d4$NLCD_2011_LC_reclass), sum)
names(agao) &lt;- c("NLCD_2011_LC_reclass", "access")
agao$rad_564 &lt;- agro$x
agao$grab_bag_2 &lt;- aggo$x
write.csv(agao, "2019-05-21-1457_NLCD_reclass_breakdown.csv", row.names=FALSE)</pre>

<h2 id="toc_78">2019-05-22-0836_sample_frame.R</h2>

<pre>wd &lt;- "D:/projects/LTEMP/2019_sample_frame"
setwd(wd)

d1 &lt;- read.csv("LTEMP_site_table_2019-05-21-1454.csv", stringsAsFactors=FALSE)
fi &lt;- read.csv("LTEMP_site_table_2019-05-21-1610.csv")

library(sqldf)
d2 &lt;- sqldf('
select
 d1.*,
 fi.Fire as fire_name,
 fi.Year_ as fire_year
from
 d1 left outer join 
 fi
on
 d1.site = fi.site
')

#saving.
write.csv(d2, "LTEMP_site_table_2019-05-22-0910.csv", row.names=FALSE)

## How many burned?
sum(!(d2$fire_name==""))
[1] 13

## Table of burned sites.
slf &lt;- !(d2$fire_name=="")
ft &lt;- d2[slf, c("site", "fire_name", "fire_year")]
ft &lt;- ft[order(ft$site),]
ft
    site              fire_name fire_year
170 3215 King County Creek Fire      2005
298 3219     Irish Channel Fire      2005
260 3226            Shantatilik      2009
171 3231              Swan Lake      2007
124 3242            Shantatilik      2009
172 3289         Fox Creek Fire      2005
127 3306         Fox Creek Fire      2005
144 3307         Fox Creek Fire      2005
66  3311     Glacier Creek Fire      2004
272 3323          Caribou Hills      2007
168 3324          Caribou Hills      2007
169 3325         Fox Creek Fire      2005
204 3326         Fox Creek Fire      2005

## Later in the day I realized that this had not included the Funny River Fire.  I obtained a different GIS layer, a statewide 1940-2017 dataset.

wd &lt;- "D:/projects/LTEMP/2019_sample_frame"
setwd(wd)
d2 &lt;- read.csv("LTEMP_site_table_2019-05-22-0910.csv", stringsAsFactors=FALSE)
## Removing previous fire fields.
d2 &lt;- d2[,1:26]
d3 &lt;- read.csv("LTEMP_site_table_2019-05-22-1432.csv", stringsAsFactors=FALSE)

library(sqldf)
d4 &lt;- sqldf('
select
 d2.*,
 d3.fire_name,
 d3.fire_year
from
 d2 left outer join 
 d3
on
 d2.site = d3.site
')

rad_564_burned &lt;- d4$rad_564 * !is.na(d4$fire_year)


## Now new aggregates.
agao &lt;- aggregate(d4$access, by=list(d4$OBrien_LC_class), sum)
agro &lt;- aggregate(d4$rad_564, by=list(d4$OBrien_LC_class), sum)
aggo &lt;- aggregate(d4$grab_bag_2, by=list(d4$OBrien_LC_class), sum)
aggf &lt;- aggregate(rad_564_burned, by=list(d4$OBrien_LC_class), sum)
names(agao) &lt;- c("OBrien_LC_reclass", "access")
agao$rad_564 &lt;- agro$x
agao$grab_bag_2 &lt;- aggo$x
agao$rad_564_burned &lt;- aggf$x
write.csv(agao, "2019-05-22-1447_OBrien_class_breakdown.csv", row.names=FALSE)

agao &lt;- aggregate(d4$access, by=list(d4$NLCD_2011_LC_class), sum)
agro &lt;- aggregate(d4$rad_564, by=list(d4$NLCD_2011_LC_class), sum)
aggo &lt;- aggregate(d4$grab_bag_2, by=list(d4$NLCD_2011_LC_class), sum)
aggf &lt;- aggregate(rad_564_burned, by=list(d4$NLCD_2011_LC_class), sum)
names(agao) &lt;- c("NLCD_2011_LC_class", "access")
agao$rad_564 &lt;- agro$x
agao$grab_bag_2 &lt;- aggo$x
agao$rad_564_burned &lt;- aggf$x
write.csv(agao, "2019-05-22-1451_NLCD_class_breakdown.csv", row.names=FALSE)

## Saving.
write.csv(d4, "LTEMP_site_table_2019-05-22-1456.csv", row.names=FALSE)

## How many burned?
sum(rad_564_burned)
[1] 45</pre>

<h2 id="toc_79">2019-05-23-1031_adding_relationships.R</h2>

<pre>## Now I am trying to add same lot as relationships to records on Arctos.
wd &lt;- "C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2019-05-15_publishing_sample_data"
setwd(wd)

load("2019-05-16-1243_workspace.RData")

d1 &lt;- read.csv("ArctosData_79701BCE12.csv", stringsAsFactors=FALSE)
dim(d1)
d1 &lt;- d1[order(d1$GUID),]

## Select bulk samples.
slb &lt;- d1$ACCN == "FHP-EDRR-STDP"
## Select occurrences.
slo &lt;- d1$ACCN == "UAM-2019.01-FHP-EDRR-STDP-Ento"


length(levels(as.factor(d1$COLLECTING_EVENT_ID)))

library(sqldf)
dp &lt;- d1[slb,]
do &lt;- d1[slo,]
rel &lt;- sqldf('
select 
 dp.GUID as parent_guid,
 do.GUID as child_guid
from
 do left outer join dp
on
 dp.COLLECTING_EVENT_ID = do.COLLECTING_EVENT_ID and
 dp.COLLECTING_METHOD = do.COLLECTING_METHOD
')
## That did not work.  I should have uploaded the collecting methods and/or relationships when I bulkloaded these records.  Now I have a mess to clean up.  Alternatively, I could delete these records from Arctos and upload them again, this time getting things right.

## I think I need to re-upload these.

load("2019-05-16-1243_workspace.RData")

## Adding collecting method.
d3$COLLECTING_METHOD = d2$COLLECTING_METHOD
## Fixing a special character problem.
d3$COLLECTING_METHOD &lt;- gsub("Î±-pinene", "alpha-pinene", d3$COLLECTING_METHOD)

## Adding identifiers.
d3$OTHER_ID_NUM_TYPE_1 &lt;- "UAMObs:Ento"
d3$OTHER_ID_NUM_1 &lt;- gsub("UAMObs:Ento:", "", d2$GUID)


idsp &lt;- strsplit(d2$OTHERCATALOGNUMBERS, "; ")
id1 &lt;- sapply(idsp, "[", 1)
id2 &lt;- sapply(idsp, "[", 2)
id3 &lt;- sapply(idsp, "[", 3)
d3$OTHER_ID_NUM_TYPE_2 &lt;- "NCBI Biosample"
d3$OTHER_ID_NUM_2 &lt;- gsub("NCBI Biosample=", "", id1)
d3$OTHER_ID_NUM_TYPE_3 &lt;- "original identifier"
d3$OTHER_ID_NUM_3 &lt;- gsub("original identifier=", "", id2)
d3$OTHER_ID_NUM_TYPE_4 &lt;- ""
d3$OTHER_ID_NUM_TYPE_4[!is.na(id3)] &lt;- "secondary identifier"
d3$OTHER_ID_NUM_4 &lt;- ""
d3$OTHER_ID_NUM_4[!is.na(id3)] &lt;- gsub("secondary identifier=", "", id3[!is.na(id3)])

save.image("2019-05-23-1118_workspace.RData")

## I encumbered the previous records on Arctos.
## Now bulkloading replacement records.

write.csv(d3[1,], "2019-05-23-1124_blukload_row_1.csv", row.names=FALSE)

## That loaded just fine:
http://arctos.database.museum/guid/UAMObs:Ento:238287

## Ok, I see how to do it now.
## I manually fixed that first, loaded record.  Now for the rest.
d3$OTHER_ID_REFERENCES_1 &lt;- "same lot as"
d3$OTHER_ID_REFERENCES_2 &lt;- "same lot as"
d3$OTHER_ID_REFERENCES_3 &lt;- "same lot as"
d3$OTHER_ID_REFERENCES_4 &lt;- ""
d3$OTHER_ID_REFERENCES_4[!is.na(id3)] &lt;- "same lot as"

## Saving here.
save.image("2019-05-23-1153_workspace.RData")

## Now I want to see if I can bulk update the relationship to the original sample (UAMObs:Ento:236532).  I want to update these to same lot as relationships.

## Now to upload the rest...
write.csv(d3[2:100,], "2019-05-23-1153_blukload_rows_002-100.csv", row.names=FALSE)

## Actually I am just going to upload just one more to check...
write.csv(d3[2,], "2019-05-23-1155_blukload_row_002.csv", row.names=FALSE)

## While waiting on that one to load I will prepare the next set...
write.csv(d3[3:100,], "2019-05-23-1157_blukload_rows_003-100.csv", row.names=FALSE)
write.csv(d3[101:200,], "2019-05-23-1158_blukload_rows_101-200.csv", row.names=FALSE)
write.csv(d3[201:272,], "2019-05-23-1159_blukload_rows_201-272.csv", row.names=FALSE)

## Tried to load that first one and got errors...
d3$TAXON_NAME[d3$TAXON_NAME=="Ips pertabatus"] &lt;- "Ips perturbatus"
d3$TAXON_NAME &lt;- gsub("Ichneumonie", "Ichneumoninae", d3$TAXON_NAME)

save.image("2019-05-23-1207_workspace.RData")

write.csv(d3[3:100,], "2019-05-23-1208_blukload_rows_003-100.csv", row.names=FALSE)
write.csv(d3[101:200,], "2019-05-23-1208_blukload_rows_101-200.csv", row.names=FALSE)
write.csv(d3[201:272,], "2019-05-23-1208_blukload_rows_201-272.csv", row.names=FALSE)

## Doing a random check... Need to check sequence / identification of UAMObs:Ento:238482, identified as Spilogona sororcula.  It may be a Phaonia.</pre>

<h2 id="toc_1">2019-05-28-0647_adding_reciprocal_relationships.R</h2>

<pre>## Adding reciprocal relationships on Arctos.
wd &lt;- "C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2019-05-15_publishing_sample_data"
setwd(wd)

## downloaded data for Arctos records with accession UAM-2019.01-FHP-EDRR-STDP-Ento

d1 &lt;- read.csv("ArctosData_ED03E893E1.csv", stringsAsFactors=FALSE)

rl &lt;- strsplit(d1$RELATEDCATALOGEDITEMS, "; ")

existing_other_id_number &lt;- sapply(rl, "[", 2)
existing_other_id_number &lt;- gsub(
 "\\(same lot as\\) UAMObs:Ento http://arctos.database.museum/guid/UAMObs:Ento:",
 "",
 existing_other_id_number
 )

ul &lt;- as.data.frame(existing_other_id_number)
ul$guid_prefix &lt;- "UAMObs:Ento"
ul$existing_other_id_type &lt;- "catalog number"
ul$new_other_id_number &lt;- gsub("UAMObs:Ento:", "", d1$GUID)
ul$new_other_id_type &lt;- "UAMObs:Ento"
ul$new_other_id_references &lt;- "same lot as"

write.csv(ul[1,], "2019-05-28-0710_relationship_upload_row_1.csv", row.names=FALSE)
## That loaded and looked good.  Loading the rest.

write.csv(ul[2:272,], "2019-05-28-0714_relationship_upload_row_002-272.csv", row.names=FALSE)</pre>   

<h2 id="toc_2">2019-05-30-1127_visualizations.R</h2>
<pre>wd &lt;- "I:/BIOLOGY/Data/ProjectData/Grasslands/2015_grassland_project/spruce_genetics/work_space/2019-05-30_data_visualizations"
dd &lt;- "I:/BIOLOGY/Data/ProjectData/Grasslands/2015_grassland_project/spruce_genetics"

## Load data
library(xlsx)
setwd(dd)
ms &lt;- read.xlsx("spruceDataForJohn-May2019.xlsx", sheetName="microSats-individuals")
n5 &lt;- read.xlsx("spruceDataForJohn-May2019.xlsx", sheetName="nad5-individuals")
tr &lt;- read.xlsx("spruceDataForJohn-May2019.xlsx", sheetName="trnTR-individuals")
setwd(wd)

dim(ms)
[1] 446  11

dim(n5)
[1] 446   8

dim(tr)
[1] 446   6


## Adapting examples from https://homepage.divms.uiowa.edu/~luke/classes/STAT4580/histdens.html
library(ggplot2)

png("2019-05-30-1159_hist_microSats_Sitka.png")
p &lt;- ggplot(ms) +
  geom_histogram(
    aes(x = Sitka),
    binwidth = 0.05,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	)
p + labs(x = "microSats, percent Sitka spruce")				   
dev.off()

png("2019-05-30-1159_hist_microSats_white.png")
p &lt;- ggplot(ms) +
  geom_histogram(
    aes(x = White),
    binwidth = 0.05,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	)
p + labs(x = "microSats, percent white spruce")
dev.off()				   

png("2019-05-30-1159_hist_microSats_black.png")
p &lt;- ggplot(ms) +
  geom_histogram(
    aes(x = Black),
    binwidth = 0.05,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	)
p + labs(x = "microSats, percent black spruce")
dev.off()				   

bk &lt;- (0:20)*5/100
png("2019-05-30-1205_hist_microSats_Sitka.png")
p &lt;- ggplot(ms) +
  geom_histogram(
    aes(x = Sitka),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	)
p + labs(x = "microSats, percent Sitka spruce")				   
dev.off()

## Now manually setting breaks and y lim.
bk &lt;- (0:20)*5/100
yl &lt;- c(0, max(c( 
     sum(!is.na(ms$Sitka)),
     sum(!is.na(ms$White)),
     sum(!is.na(ms$Black)))
	 ))
	 

png("2019-05-30-1205_hist_microSats_Sitka.png")
p &lt;- ggplot(ms) +
  geom_histogram(
    aes(x = Sitka),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "microSats, percent Sitka spruce")				   
dev.off()


png("2019-05-30-1205_hist_microSats_white.png")
p &lt;- ggplot(ms) +
  geom_histogram(
    aes(x = White),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "microSats, percent white spruce")				   
dev.off()


png("2019-05-30-1205_hist_microSats_Black.png")
p &lt;- ggplot(ms) +
  geom_histogram(
    aes(x = Black),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "microSats, percent black spruce")				   
dev.off()
## Those look pretty good.

## Now for mitochondrial...
yl &lt;- c(0, max(c( 
     sum(!is.na(n5$Sitka)),
     sum(!is.na(n5$White)),
     sum(!is.na(n5$Black)))
	 ))

png("2019-05-30-1223_hist_nad5_Sitka.png")
p &lt;- ggplot(n5) +
  geom_histogram(
    aes(x = Sitka),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "nad5, percent Sitka spruce")				   
dev.off()


png("2019-05-30-1223_hist_nad5_white.png")
p &lt;- ggplot(n5) +
  geom_histogram(
    aes(x = White),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "nad5, percent white spruce")				   
dev.off()


png("2019-05-30-1223_hist_nad5_Black.png")
p &lt;- ggplot(n5) +
  geom_histogram(
    aes(x = Black),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "nad5, percent black spruce")				   
dev.off()


## Now for chloroplast...
yl &lt;- c(0, max(c( 
     sum(!is.na(tr$sitka)),
     sum(!is.na(tr$white)),
     sum(!is.na(tr$black)))
	 ))

png("2019-05-30-1228_hist_trnTR_Sitka.png")
p &lt;- ggplot(tr) +
  geom_histogram(
    aes(x = sitka),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "trnTR, percent Sitka spruce")				   
dev.off()


png("2019-05-30-1228_hist_trnTR_white.png")
p &lt;- ggplot(tr) +
  geom_histogram(
    aes(x = white),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "trnTR, percent white spruce")				   
dev.off()


png("2019-05-30-1228_hist_trnTR_Black.png")
p &lt;- ggplot(tr) +
  geom_histogram(
    aes(x = black),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "trnTR, percent black spruce")				   
dev.off()


## Now trying separating seedlings from the rest.
mss &lt;- grepl("SEED", ms$Sample)
mss &lt;- ms[mss,]
yl &lt;- c(0, max(c( 
     sum(!is.na(mss$Sitka)),
     sum(!is.na(mss$White)),
     sum(!is.na(mss$Black)))
	 ))
	 
png("2019-05-30-1241_hist_seedling_microSats_Sitka.png")
p &lt;- ggplot(mss) +
  geom_histogram(
    aes(x = Sitka),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "microSats, seedlings only, percent Sitka spruce")				   
dev.off()


png("2019-05-30-1241_hist_seedling_microSats_white.png")
p &lt;- ggplot(mss) +
  geom_histogram(
    aes(x = White),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "microSats, seedlings only, percent white spruce")				   
dev.off()


png("2019-05-30-1241_hist_seedling_microSats_Black.png")
p &lt;- ggplot(mss) +
  geom_histogram(
    aes(x = Black),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "microSats, seedlings only, percent black spruce")				   
dev.off()


## Now trying separating nonseedlings from the rest.
mst &lt;- !grepl("SEED", ms$Sample)
mst &lt;- ms[mst,]
yl &lt;- c(0, max(c( 
     sum(!is.na(mst$Sitka)),
     sum(!is.na(mst$White)),
     sum(!is.na(mst$Black)))
	 ))
	 
png("2019-05-30-1249_hist_nonseedling_microSats_Sitka.png")
p &lt;- ggplot(mst) +
  geom_histogram(
    aes(x = Sitka),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "microSats, non-seedlings only, percent Sitka spruce")				   
dev.off()


png("2019-05-30-1249_hist_nonseedling_microSats_white.png")
p &lt;- ggplot(mst) +
  geom_histogram(
    aes(x = White),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "microSats, non-seedlings only, percent white spruce")				   
dev.off()


png("2019-05-30-1249_hist_nonseedling_microSats_Black.png")
p &lt;- ggplot(mst) +
  geom_histogram(
    aes(x = Black),
    breaks=bk,
	fill = "grey",
	color = "black",
	na.rm = TRUE
	) + 
	ylim(yl)
p + labs(x = "microSats, non-seedlings only, percent black spruce")				   
dev.off()

save.image("2019-05-30-1303_workspace.RData")</pre> 

<h2 id="toc_3">2019-06-05-0823_sample_frame.R</h2> 
<pre>wd &lt;- "D:/projects/LTEMP/2019_sample_frame"
setwd(wd)

d1 &lt;- read.csv("LTEMP_site_table_2019-05-22-1456.csv", stringsAsFactors=FALSE)
lc19 &lt;- read.csv("2019-06-05-0822_LTEMP_sites_w_2019lc.csv", stringsAsFactors=FALSE)

dim(d1)
[1] 310  28
dim(lc19)
[1] 310  41

## Joining these.
library(sqldf)
d2 &lt;- sqldf('
select
 d1.*,
 lc19.LC_Class as KP2019_LC_class,
 lc19.Map_Group as KP2019_map_group
from
 d1 left outer join 
 lc19
on
 d1.site = lc19.site
')

dim(d2)
[1] 310  30

rad_564_not_burned &lt;- d2$rad_564 * is.na(d2$fire_year)
grab_bag_not_burned &lt;- d2$grab_bag_2 * is.na(d2$fire_year)

## Now new aggregates.
rad_564_burned &lt;- d2$rad_564 * !is.na(d2$fire_year)
agao &lt;- aggregate(d2$access, by=list(d2$KP2019_LC_class), sum)
agro &lt;- aggregate(d2$rad_564, by=list(d2$KP2019_LC_class), sum)
aggo &lt;- aggregate(d2$grab_bag_2, by=list(d2$KP2019_LC_class), sum)
aggf &lt;- aggregate(rad_564_not_burned, by=list(d2$KP2019_LC_class), sum)
aggg &lt;- aggregate(grab_bag_not_burned, by=list(d2$KP2019_LC_class), sum)

names(agao) &lt;- c("KP2019_LC_class", "access")
agao$rad_564 &lt;- agro$x
agao$grab_bag_2 &lt;- aggo$x
agao$rad_564_not_burned &lt;- aggf$x
agao$grab_bag_not_burned &lt;- aggg$x
agao &lt;- agao[order(-agao$access, agao$KP2019_LC_class),]
write.csv(agao, "2019-06-05-0837_KP2019_class_breakdown.csv", row.names=FALSE)

## Saving.
write.csv(d2, "LTEMP_site_table_2019-06-05-0842.csv", row.names=FALSE)

## How many grab bag sites did not burn?
sum(d2$grab_bag_2 &amp; is.na(d2$fire_year))
[1] 36

## Later John asked to focus on black spruce.
sl &lt;- (d2$KP2019_LC_class == "Black spruce") &amp; (grab_bag_not_burned == 1)
## Checking this against other classifications:
d2$OBrien_LC_class[sl]
 [1] "Black spruce" "Black spruce" "Black spruce" "Black spruce" "Black spruce" "Black spruce" "Black spruce" "Black spruce" "Black spruce"
[10] "Black spruce"

d2$NLCD_2011_LC_class[sl]
 [1] "Emergent Herbaceous Wetlands" "Evergreen Forest"             "Evergreen Forest"             "Evergreen Forest"            
 [5] "Evergreen Forest"             "Evergreen Forest"             "Evergreen Forest"             "Evergreen Forest"            
 [9] "Evergreen Forest"             "Evergreen Forest"    
## Which site is classified by NLCD as emergent wetlands?
d2$site[sl][d2$NLCD_2011_LC_class[sl] == "Emergent Herbaceous Wetlands"]
[1] 3172
## I looked at the photo.  It is black spruce.

## Collecting photos...
d2$site[sl]
 [1] 3172 3092 3156 5555 3202 3140 3069 3288 3072 3074

## Getting a list of these sites for looking at communities... 
s19 &lt;- d2$site[sl]

## Loading community data
cd &lt;- read.csv("D:/projects/LTEMP/2015-03-10_data_for_Beier/to_submit/compiled_data/LTEMP_grid_data_species_molten_2015-04-02-1249.csv", stringsAsFactors=FALSE)
dim(cd)
[1] 9316    6

## Dropping row numbers.
cd &lt;- cd[,2:ncol(cd)]
sl &lt;- cd$plot %in% s19
cb &lt;- cd[sl,]

## Need to drop the mammals.
sl &lt;- !(cb$category == "Mammals")
cb &lt;- cb[sl,]
dim(cb)
[1] 584   5 ## so 585 observations from these 10 sites.
## Saving this.
write.csv(cb, "2019-06-05-1252_all_observations_at_10_black_spruce_sites.csv", row.names=FALSE)

## How many species?
length(levels(as.factor(cb$latin)))
[1] 209

## Species list...
cg &lt;- unique(cb[,c("category", "latin")])
cg &lt;- cg[order(cg$category, cg$latin),]
write.csv(cg, "2019-06-05-1255_species_list_from_black_spruce_sites.csv", row.names=FALSE)

## Breakdown of all species...
ag1 &lt;- aggregate(cg$latin, by=list(cg$category), length)
names(ag1) &lt;- c("category", "n_species")
write.csv(ag1, "2019-06-05-1258_n_species_by_categories.csv", row.names=FALSE)

ag2 &lt;- aggregate(cb$latin, by=list(cb$category, cb$plot), length)
names(ag2) &lt;- c("category", "plot", "value")
ag2$variable &lt;- "n_species"
library(reshape2)

ag3 &lt;- dcast(ag2, category ~ plot)
ag3[is.na(ag3)] &lt;- 0

## Stats..
nsp &lt;- apply(ag3[,2:ncol(ag3)], 2, sum)
summary(nsp)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  45.00   53.50   57.00   58.40   64.25   75.00

## Making a plot  
setwd(wd)
pdf(file="2019-06-05-1327_barplot_categories_by_sites.pdf",
 width=7,
 height=6
 )  
clr &lt;- c("red", "black", "darkgrey", "darkolivegreen1", "darkgreen")
barplot(as.matrix(ag3[,2:ncol(ag3)]),
 xlab="site",
 ylab="number of species",
 col=clr,
 ylim=c(0,80),
 xlim=c(0,17),
 cex.names = 0.7
 )
legend("bottomright", 
 legend = rev(ag3$category), 
 fill = rev(clr),
 title = "category")
dev.off()


## Ok, now I want to determine similarity among these sites.
gd &lt;- expand.grid(s19, s19)
sl &lt;- !(gd$Var1 == gd$Var2)
gd &lt;- gd[sl,]
dim(gd)
[1] 90  2

nsp &lt;- as.data.frame(nsp)
nsp$site &lt;- rownames(nsp)

gd2 &lt;- sqldf('
select
 gd.*,
 nsp.nsp as nsp_site1
from
 gd left outer join
 nsp
on
 gd.Var1 = nsp.site
 ')

gd2 &lt;- gd2[order(gd2$Var1, gd2$Var2),]

gd2$nshare &lt;- NA
for (this_row in 1:nrow(gd2))
 {
 sl1 &lt;- cb$plot == gd2$Var1[this_row]
 sl2 &lt;- cb$plot == gd2$Var2[this_row]
 sp1 &lt;- cb$latin[sl1]
 sp2 &lt;- cb$latin[sl2]
 gd2$nshare[this_row] &lt;- sum(sp1 %in% sp2)
 }

gd2$percent_shared &lt;- round(gd2$nshare*100/gd2$nsp_site1)

summary(gd2$percent_shared)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  20.00   36.25   43.00   42.93   49.00   65.00 
  
## For each species, how many sites was it observed at?
ag4 &lt;- aggregate(cb$value, by=list(cb$latin), sum)

pdf(file="2019-06-05-1418_histogram_n_occurrences_by_species.pdf",
 width=6,
 height=6
 )  
hst &lt;- hist(ag4$x,
 breaks=(0:10) + 0.5,
 xlab="number of observations",
 main="histogram of number of observations for all species")
dev.off()

hst
$`breaks`
 [1]  0.5  1.5  2.5  3.5  4.5  5.5  6.5  7.5  8.5  9.5 10.5

$counts
 [1] 97 37 12 16 14 13  8  4  3  5

$density
 [1] 0.46411483 0.17703349 0.05741627 0.07655502 0.06698565 0.06220096 0.03827751 0.01913876 0.01435407
[10] 0.02392344

$mids
 [1]  1  2  3  4  5  6  7  8  9 10

$xname
[1] "ag4$x"

$equidist
[1] TRUE

attr(,"class")
[1] "histogram"

ag4 &lt;- ag4[order(ag4$x, ag4$Group.1),]

85          Hylocomium splendens 10
89           Hypogymnia physodes 10
150         Pleurozium schreberi 10
168            Regulus calendula 10
205        Vaccinium vitis-idaea 10
## Wow, black spruce was not picked up at one site!  Which one was that?

## sites with black spruce
pm &lt;- cb$plot[cb$latin == "Picea mariana"]
sl &lt;- !(s19 %in% pm)
s19[sl]
[1] 3140
## I looked at the photo.  It looks like that place is covered in black spruce.
## What was recorded at that site?
cb$latin[cb$plot == 3140]
 [1] "Catharus ustulatus"       "Dendroica coronata"       "Euphagus carolinus"      
 [4] "Gallinago delicata"       "Gavia immer"              "Grus canadensis"         
 [7] "Junco hyemalis"           "Loxia leucoptera"         "Perisoreus canadensis"   
[10] "Podiceps grisegena"       "Poecile atricapillus"     "Regulus calendula"       
[13] "Turdus migratorius"       "Zonotrichia leucophrys"   "Dismodicus modicus"      
[16] "Estrandia grandaeva"      "Arthonia edgewoodensis"   "Bryoria fuscescens"      
[19] "Bryoria glabra"           "Cladina arbuscula"        "Cladina mitis"           
[22] "Cladina rangiferina"      "Cladonia albonigra"       "Cladonia cenotea"        
[25] "Cladonia cornuta"         "Cladonia crispata"        "Cladonia deformis"       
[28] "Cladonia ecmocyna"        "Cladonia fimbriata"       "Cladonia gracilis"       
[31] "Cladonia metacorallifera" "Cladonia pleurota"        "Cladonia sulphurina"     
[34] "Hypogymnia physodes"      "Icmadophila ericetorum"   "Imshaugia aleurites"     
[37] "Lecanora pulicaris"       "Lecidea leprarioides"     "Nephroma arcticum"       
[40] "Peltigera aphthosa"       "Peltigera conspersa"      "Peltigera leucophlebia"  
[43] "Peltigera malacea"        "Peltigera scabrosa"       "Peltigera sphaerica"     
[46] "Pycnora leucococca"       "Ramboldia cinnabarina"    "Vulpicida pinastri"      
[49] "Aulacomnium palustre"     "Hylocomium splendens"     "Pleurozium schreberi"    
[52] "Polytrichum commune"      "Ptilidium ciliare"        "Sphagnum girgensohnii"   
[55] "Betula nana"              "Betula papyrifera"        "Calamagrostis canadensis"
[58] "Chamerion angustifolium"  "Cornus canadensis"        "Empetrum nigrum"         
[61] "Ledum groenlandicum"      "Ledum palustre"           "Lycopodium annotinum"    
[64] "Lycopodium clavatum"      "Picea glauca"             "Rubus chamaemorus"       
[67] "Salix bebbiana"           "Vaccinium uliginosum"     "Vaccinium vitis-idaea"  
## I think that Picea mariana was misidentified as Picea glauca.

save.image("2019-06-05-1500_workspace.RData")

## I just added KP2019 classes to the Slikok data.
sk &lt;- read.csv("2019-06-05-1537_Slikok_grid_KP2019_classes.csv", stringsAsFactors=FALSE)

sl &lt;- sk$Dominance_Type == "Black Spruce"
skl &lt;- sk$label[sl]
skl
[1] "MG07" "MG19" "MG24" "MG39" "SK22"

## assembling the occurrence data now.
sv &lt;- read.csv("I:/BIOLOGY/Data/ProjectData/Slikok_watershed/data/2016_veg_sampling/2016_Slikok_veg_data_2017-06-06-1549.csv", stringsAsFactors=FALSE)
dim(sv)
[1] 830   2
## Removing coarser identifications.
sl &lt;- grepl(" ", sv$identification)
sum(sl)
[1] 791

sv &lt;- sv[sl,]

## Some of these are lichens and mosses.  I will need to label these properly.
length(levels(as.factor(sv$identification)))
[1] 97 ## species.
levels(as.factor(sv$identification))
 [1] "Achillea millefolium"      "Aconitum delphiniifolium"  "Adoxa moschatellina"      
 [4] "Agrostis scabra"           "Alnus viridis"             "Andromeda polifolia"      
 [7] "Athyrium filix-femina"     "Betula nana"               "Betula occidentalis"      
[10] "Betula papyrifera"         "Betula papyrifera "        "Calamagrostis canadensis" 
[13] "Carex aquatilis"           "Carex canescens"           "Carex gynocrates"         
[16] "Carex limosa"              "Carex livida"              "Carex magellanica"        
[19] "Carex pauciflora"          "Carex rotundata"           "Carex tenuiflora"         
[22] "Chamaedaphne calyculata"   "Chamerion angustifolium"   "Comarum palustre"         
[25] "Cornus canadensis"         "Dasiphora floribunda"      "Drosera rotundifolia"     
[28] "Dryopteris expansa"        "Empetrum nigrum"           "Equisetrum sylvaticum"    
[31] "Equisetum arvense"         "Equisetum flauintnle"      "Equisetum fluviatile"     
[34] "Equisetum pratense"        "Equisetum sylvaticum"      "Eriophorum angustifolium" 
[37] "Eriophorum scheuchzeri"    "Galium trifidum"           "Galium triflorum"         
[40] "Geocaulon lividum"         "Goodyera repens"           "Gymnocarpium dryopteris"  
[43] "Hylocomium splendens"      "Juncus triglumis"          "Ledum palustre"           
[46] "Linnaea borealis"          "Listera cordata"           "Lobaria pulmonaria"       
[49] "Lycopodium annotinum"      "Malaxis paludosa"          "Menziesia ferruginea"     
[52] "Moehringia lateriflora"    "Moneses uniflora"          "Myrica gale"              
[55] "Nephroma arcticum"         "Oplopanax horridus"        "Orthilia secunda"         
[58] "Pedicularis labradorica"   "Picea glauca"              "Picea mariana"            
[61] "Platanthera dilatata"      "Pleurozium schreberi"      "Poa pratensis"            
[64] "Polemonium acutiflorum"    "Populus balsamifera"       "Populus tremuloides"      
[67] "Ptilium crista-castrensis" "Pyrola asarifolia"         "Ribes triste"             
[70] "Rosa acicularis"           "Rubus arcticus"            "Rubus chamaemorus"        
[73] "Rubus idaeus"              "Rubus pedatus"             "Salix barclayi"           
[76] "Salix bebbiana"            "Salix commutata"           "Salix fuscescens"         
[79] "Salix pulchra"             "Salix scouleriana"         "Sambucus racemosa"        
[82] "Sanguisorba canadensis"    "Sorbus scopulina"          "Spiraea stevenii"         
[85] "Spiranthes romanzoffiana"  "Splachnum luteum"          "Stellaria calycantha"     
[88] "Streptopus amplexicaulis"  "Triantha glutinosa"        "Trichophorum caespitosum" 
[91] "Trientalis europaea"       "Vaccinium caespitosum"     "Vaccinium oxycoccos"      
[94] "Vaccinium uliginosum"      "Vaccinium vitis-idaea"     "Viburnum edule"           
[97] "Viola epipsila"           

sv$category &lt;- "Vascular Plants"
li &lt;- c("Nephroma arcticum",
 "Lobaria pulmonaria"
 )
mo &lt;- c("Ptilium crista-castrensis",
 "Pleurozium schreberi",
 "Hylocomium splendens"
 )
sl &lt;- sv$identification %in% li
sv$category[sl] &lt;-  "Lichens"
sl &lt;- sv$identification %in% mo
sv$category[sl] &lt;-  "Other Plants"

## Now for birds.
bd &lt;- read.csv("I:/BIOLOGY/Data/ProjectData/Slikok_watershed/data/2016_bird_data/work_space/VCP_data.csv", stringsAsFactors=FALSE)
dim(bd)
[1] 518   7
## Truncating at 200 m.
sl &lt;- !(bd$distance_m &gt; 200)
bd &lt;- bd[sl,]
dim(bd)
[1] 467   7

## Need to finish up for the day for now.
save.image("2019-06-05-1614_workspace.RData")</pre>   

<h2 id="toc_4">2019-06-06-0838_sample_frame.R</h2>

<pre>wd &lt;- "D:/projects/LTEMP/2019_sample_frame"
setwd(wd)

load("2019-06-05-1614_workspace.RData")

bd
## There are a bunch of NAs there.
sl &lt;- !is.na(bd$ point_id)
bd &lt;- bd[sl,]
dim(bd)
[1] 461   7

## Downloaded code list from https://www.birdpop.org/docs/misc/List18.zip
library(foreign)
cl &lt;- read.dbf("LIST18.DBF")

library(sqldf)

sb &lt;- sqldf('
select
 bd.point_id as plot,
 cl.SCINAME as latin
from
 bd left outer join
 cl
on
 bd.species = cl.SPEC
')
dim(sb)
[1] 461   2
sb$category &lt;- "Birds"

## Uh-oh, some of those birds are NA.  Which codes were the problem?
sb &lt;- sqldf('
select
 bd.point_id as plot,
 bd.species,
 cl.SCINAME as latin,
 cl.COMMONNAME
from
 bd left outer join
 cl
on
 bd.species = cl.SPEC
')

sl &lt;- is.na(sb$latin)
sb[sl,]
levels(as.factor(sb$species[sl]))
[1] "BBCH" "GRAJ" "HEGU" "RESQ" "TRSW" "TTWO"

as.data.frame(levels(as.factor(sb$species[sl])))
  levels(as.factor(sb$species[sl]))
1                              BBCH black capped chickadee
2                              GRAJ gray jay
3                              HEGU herring gull
4                              RESQ red squirrel
5                              TRSW tree swallow
6                              TTWO three-toed woodpecker
## Dawn Magness helped me with those codes above.
sb$latin[sb$species=="BBCH"] &lt;- "Poecile atricapillus"
sb$latin[sb$species=="GRAJ"] &lt;- "Perisoreus canadensis"
sb$latin[sb$species=="HEGU"] &lt;- "Larus argentatus"
sb$latin[sb$species=="RESQ"] &lt;- "Tamiasciurus hudsonicus"
sb$latin[sb$species=="TRSW"] &lt;- "Tachycineta bicolor"
sb$latin[sb$species=="TTWO"] &lt;- "Picoides dorsalis"

## Just checking these...
levels(as.factor(sb$COMMONNAME))
 [1] "Alder Flycatcher"              
 [2] "American Robin"                
 [3] "Arctic Tern"                   
 [4] "Bald Eagle"                    
 [5] "Black-billed Magpie"           
 [6] "Black-capped Chickadee"        
 [7] "Bonaparte's Gull"              
 [8] "Boreal Chickadee"              
 [9] "Brown Creeper"                 
[10] "Common Loon"                   
[11] "Common Merganser"              
[12] "Common Raven"                  
[13] "Common Redpoll"                
[14] "Downy Woodpecker"              
[15] "Fox Sparrow"                   
[16] "Gambel's White-crowned Sparrow"
[17] "Glaucous-winged Gull"          
[18] "Golden-crowned Kinglet"        
[19] "Greater Yellowlegs"            
[20] "Hairy Woodpecker"              
[21] "Least Sandpiper"               
[22] "Lincoln's Sparrow"             
[23] "Mallard"                       
[24] "Merlin"                        
[25] "Mew Gull"                      
[26] "Olive-sided Flycatcher"        
[27] "Orange-crowned Warbler"        
[28] "Pine Grosbeak"                 
[29] "Red-breasted Nuthatch"         
[30] "Ruby-crowned Kinglet"          
[31] "Savannah Sparrow"              
[32] "Short-billed Dowitcher"        
[33] "Slate-colored Junco"           
[34] "Surf Scoter"                   
[35] "Swainson's Thrush"             
[36] "Tree Swallow"                  
[37] "Unidentified Flycatcher"       
[38] "Unidentified Swallow"          
[39] "Varied Thrush"                 
[40] "Western Wood-Pewee"            
[41] "White-winged Crossbill"        
[42] "Yellow-rumped Warbler"         

## Getting rid of a couple...
sl &lt;- !(sb$COMMONNAME %in% c("Unidentified Flycatcher", "Unidentified Swallow", "Tamiasciurus hudsonicus"))
sb &lt;- sb[sl,]
dim(sb)
[1] 459   4

## Adding the category.
sb$category &lt;- "Birds"

## Saving here.
save.image("2019-06-06-1004_workspace.RData")

## Now for cryptogam data.
cry &lt;- read.csv("2019-06-06-1002_cryptogam_ids.csv", stringsAsFactors=FALSE)
dim(cry)
[1] 789   3
## Need to relate the catalog numbers to plots...

crys &lt;- read.csv("2019-06-06-1017_cryptogam_samples_Arctos_data.csv", stringsAsFactors=FALSE)

library(xlsx)
sksites &lt;- read.xlsx("D:/projects/Slikok_watershed/data/site_data/Slikok_site_data.xlsx", sheetIndex=1)

crys$plot &lt;- substr(crys$SPEC_LOCALITY, nchar(crys$SPEC_LOCALITY)-4, nchar(crys$SPEC_LOCALITY))
crys$cat_num &lt;- substr(crys$GUID, 11, nchar(crys$GUID))

names(cry) &lt;- gsub("\\.", "", names(cry))
skcry &lt;- sqldf('
select
 cry.det as latin,
 cry.DETBY,
 crys.plot
from
 cry left outer join 
 crys
on
 cry.cat_num = crys.cat_num
')
dim(skcry)
[1] 789   3

skcry$category &lt;- "Lichens"
skcry$category[skcry$DETBY == "CRB"] &lt;- "Other Plants"
skcry &lt;- unique(skcry)
dim(skcry)
[1] 775   4

## Just want to look at these identifications for now.
levels(as.factor(skcry$latin))
levels(as.factor(skcry$latin))
  [1] "Arthonia edgewoodensis ined."       
  [2] "Aulacomnium palustre"               
  [3] "Biatora efflorescens"               
  [4] "Biatora pallens"                    
  [5] "Brachythecium acutum"               
  [6] "Brachythecium erythrorrhizon"       
  [7] "Brachythecium frigidum"             
  [8] "Brachythecium salebrosum"           
  [9] "Bryoria cfr fremontii"              
 [10] "Bryoria furcellata"                 
 [11] "Bryoria fuscescens"                 
 [12] "Bryoria glabra"                     
 [13] "Bryoria inactiva"                   
 [14] "Bryoria kockiana"                   
 [15] "Bryoria lanestris"                  
 [16] "Bryoria pikei"                      
 [17] "Bryoria pseudofuscescens"           
 [18] "Bryoria simplicior"                 
 [19] "Bryoria vrangiana"                  
 [20] "Buellia disciformis"                
 [21] "Buellia punctata"                   
 [22] "Calicium viride"                    
 [23] "Calliergon cordifolium"             
 [24] "Calliergonella cuspidata"           
 [25] "Calypogeia sphagnicola"             
 [26] "Campylium stellatum"                
 [27] "Cephalozia bicuspidata"             
 [28] "Cephaloziella divaricata"           
 [29] "Cetraria delisei"                   
 [30] "Cetraria islandica crispiformis"    
 [31] "Cetraria laevigata"                 
 [32] "Cetraria sepincola"                 
 [33] "Chaenotheca trichialis"             
 [34] "Chaenothecopsis tasmanica"          
 [35] "Chrysothrix candelaris"             
 [36] "Cladina rangiferina"                
 [37] "Cladina stygia"                     
 [38] "Cladonia albonigra"                 
 [39] "Cladonia amaurocraea"               
 [40] "Cladonia botrytes"                  
 [41] "Cladonia carneola"                  
 [42] "Cladonia carneola s lat"            
 [43] "Cladonia cenotea"                   
 [44] "Cladonia chlorophaea"               
 [45] "Cladonia coniocraea"                
 [46] "Cladonia cornuta"                   
 [47] "Cladonia crispata"                  
 [48] "Cladonia deformis"                  
 [49] "Cladonia elongata vulnerata"        
 [50] "Cladonia fimbriata"                 
 [51] "Cladonia gracilis turbinata"        
 [52] "Cladonia grayi"                     
 [53] "Cladonia ochrochlora"               
 [54] "Cladonia sulphurina"                
 [55] "Cliostomum griffithii"              
 [56] "Collema subflaccidum"               
 [57] "Cynodontium tenellum"               
 [58] "Dicranum acutifolium"               
 [59] "Dicranum fuscescens"                
 [60] "Dicranum leioneuron"                
 [61] "Dicranum pallidisetum"              
 [62] "Dicranum polysetum"                 
 [63] "Dicranum scoparium"                 
 [64] "Dicranum tauricum"                  
 [65] "Hylocomium splendens"               
 [66] "Hypnum circinale"                   
 [67] "Hypogymnia bitteri"                 
 [68] "Hypogymnia occidentalis"            
 [69] "Hypogymnia physodes"                
 [70] "Hypogymnia protea"                  
 [71] "Hypogymnia rugosa"                  
 [72] "Imshaugia aleurites"                
 [73] "Isopterygiopsis muelleriana"        
 [74] "Japewia subaurifera"                
 [75] "Japewia tornoensis"                 
 [76] "Lecanora allophana forma soralifera"
 [77] "Lecanora cadubriae"                 
 [78] "Lecanora fuscescens"                
 [79] "Lecanora hagenii"                   
 [80] "Lecanora hybocarpa"                 
 [81] "Lecanora impudens"                  
 [82] "Lecanora pulicaris"                 
 [83] "Lecanora symmicta"                  
 [84] "Lecidea betulicola"                 
 [85] "Lecidea leprarioides"               
 [86] "Lecidea nylanderi"                  
 [87] "Lecidea pullata"                    
 [88] "Leiocolea badensis"                 
 [89] "Leptogium compactum"                
 [90] "Leptogium saturninum"               
 [91] "Lobaria pulmonaria"                 
 [92] "Lobaria scrobiculata"               
 [93] "Lophozia longidens"                 
 [94] "Lophozia ventricosa"                
 [95] "Melanohalea septentrionalis"        
 [96] "Melanohalea trabeculata"            
 [97] "Mycobilimbia epixanthoides"         
 [98] "Mycoblastus affinis"                
 [99] "Mycoblastus sanguinarius"           
[100] "Mylia anomala"                      
[101] "Mylia taylorii"                     
[102] "Nephroma arcticum"                  
[103] "Nephroma parile"                    
[104] "Nephroma resupinatum"               
[105] "Ochrolechia androgyna"              
[106] "Ochrolechia szatalaensis"           
[107] "Orthotrichum obtusifolium"          
[108] "Paraleucobryum enerve"              
[109] "Parmelia hygrophila"                
[110] "Parmelia sulcata"                   
[111] "Parmeliopsis ambigua"               
[112] "Parmeliopsis hyperopta"             
[113] "Peltigera aphthosa"                 
[114] "Peltigera britannica"               
[115] "Peltigera canina"                   
[116] "Peltigera conspersa"                
[117] "Peltigera leucophlebia"             
[118] "Peltigera membranacea"              
[119] "Peltigera neopolydactyla"           
[120] "Peltigera occidentalis"             
[121] "Peltigera praetextata"              
[122] "Peltigera scabrosa"                 
[123] "Pertusaria suboculata"              
[124] "Phaeocalicium compressulum"         
[125] "Physcia aipolia"                    
[126] "Physcia cfr tenella"                
[127] "Physcia dubia"                      
[128] "Physconia cfr orbicularis"          
[129] "Plagiomnium medium"                 
[130] "Plagiothecium laetum"               
[131] "Plagiothecium piliferum"            
[132] "Platismatia glauca"                 
[133] "Pleurozium schreberi"               
[134] "Pohlia nutans"                      
[135] "Polytrichum commune"                
[136] "Polytrichum strictum"               
[137] "Ptilidium ciliare"                  
[138] "Ptilidium pulcherrimum"             
[139] "Ptilidiuum ciliare"                 
[140] "Ptilium crista-castrensis"          
[141] "Pycnora sorophora"                  
[142] "Pylaisia polyantha"                 
[143] "Ramalina dilacerata"                
[144] "Ramalina farinacea"                 
[145] "Ramalina obtusata"                  
[146] "Ramalina roesleri"                  
[147] "Ramalina thrausta"                  
[148] "Ramboldia cinnabarina"              
[149] "Rhizomnium glabrescens"             
[150] "Rhytidiadelphus subpinnatus"        
[151] "Rimularia caeca"                    
[152] "Rinodina degeliana"                 
[153] "Rinodina metaboliza"                
[154] "Sanionia uncinata"                  
[155] "Sciurohypnum latifolium"            
[156] "Sphagnum angustifolium"             
[157] "Sphagnum capillifolium"             
[158] "Sphagnum contortum"                 
[159] "Sphagnum fuscum"                    
[160] "Sphagnum girgensohnii"              
[161] "Sphagnum jensenii"                  
[162] "Sphagnum magellanicum"              
[163] "Sphagnum papillosum"                
[164] "Sphagnum rubellum"                  
[165] "Sphagnum squarrosum"                
[166] "Sphagnum teres"                     
[167] "Sphagnum warnstorfii"               
[168] "Tetraphis pellucida"                
[169] "Tetraplodon angustatus"             
[170] "Toensbergia leucococca"             
[171] "Tomentypnum nitens"                 
[172] "Tritomaria exsectiformis"           
[173] "Tritomaria quinquedentata"          
[174] "Tuckermannopsis chlorophylla"       
[175] "Usnea lapponica"                    
[176] "Usnea substerilis"                  
[177] "Vulpicida pinastri"                 
[178] "Warnstorfia exannulata"             
[179] "Xanthoria candelaria"               
[180] "Xanthoria polycarpa"    
## For the purposes of this exercise I want to drop identifications finer than species resolution.

skcry$latin[skcry$latin == "Cetraria islandica crispiformis"] &lt;- "Cetraria islandica"
skcry$latin[skcry$latin == "Cladonia elongata vulnerata"] &lt;- "Cladonia elongata"
skcry$latin[skcry$latin == "Cladonia gracilis turbinata"] &lt;- "Cladonia gracilis"
skcry$latin[skcry$latin == "Lecanora allophana forma soralifera"] &lt;- "Lecanora allophana"
skcry &lt;- unique(skcry)
dim(skcry)
[1] 775   4

## Saving here...
save.image("2019-06-06-1056_workspace.RData")


## Now for arthropod data...
ind &lt;- read.csv("D:/projects/Slikok_watershed/data/2016_arthropod_samples/NGS_data/work_space/2017-12-28_occupancy/q5_2017-12-07-0849.csv", stringsAsFactors=FALSE)
dim(ind)
[1] 1901   16

## Dropping read counts less than 10...
in2 &lt;- ind[ind$SumOfcluster_size &gt; 9,]
dim(in2)
[1] 1669   16

## Looking at ids.
levels(as.factor(in2$accepted_id))
  [1] "Ablabesmyia monilis"              
  [2] "Acartophthalmus nigrinus"         
  [3] "Achrotile sp. BOLD:ACU1499"       
  [4] "Aclastus sp. BOLD:AAA9140"        
  [5] "Alliopsis silvestris"             
  [6] "Allodia sp. BOLD:ACC5209"         
  [7] "Allodia sp. BOLD:ACJ1830"         
  [8] "Alopecosa aculeata"               
  [9] "Altica tombacina"                 
 [10] "Amauronematus fallax"             
 [11] "Ancylis sp. BOLD:ACE7743"         
 [12] "Anthomyza sp. BOLD:AAL8100"       
 [13] "Anticlea vasiliata"               
 [14] "Aperileptus infuscatus"           
 [15] "Aperileptus sp. jft05"            
 [16] "Araneus marmoreus"                
 [17] "Araniella displicata"             
 [18] "Arganthomyza duplex"              
 [19] "Argyresthia sp. BOLD:AAH4708"     
 [20] "Baccha elongata"                  
 [21] "Baeosciara scotica"               
 [22] "Balclutha rhenana"                
 [23] "Balclutha sp. BOLD:AAG8963"       
 [24] "Batrachedra praeangusta"          
 [25] "Beris fuscipes"                   
 [26] "Betulaphis quadrituberculata"     
 [27] "Boernerina occidentalis"          
 [28] "Boletina digitata"                
 [29] "Boletina onegensis"               
 [30] "Boletina sp. BOLD:AAM8972"        
 [31] "Bolitophila acuta"                
 [32] "Bolitophila austriaca"            
 [33] "Bolitophila hybrida"              
 [34] "Bolitophila sp. BOLD:AAV0668"     
 [35] "Boreodromia bicolor"              
 [36] "Brachycampta sp. BOLD:ACD9476"    
 [37] "Brachycampta sp. BOLD:ADG2488"    
 [38] "Braconidae sp. SLIKOK10"          
 [39] "Bradysia hilaris"                 
 [40] "Bradysia moestula"                
 [41] "Brevicornu sp. BOLD:AAM8961"      
 [42] "Brevicornu sp. BOLD:ACI5637"      
 [43] "Cacopsylla myrtilli"              
 [44] "Caloptilia suberinella"           
 [45] "Campaea perlata"                  
 [46] "Camptochaeta hirtula"             
 [47] "Canalidion montanum"              
 [48] "Carsia sororiata"                 
 [49] "Cartodere sp. BOLD:ABA9100"       
 [50] "Cecidomyiidae sp. BOLD:ABA6509"   
 [51] "Cecidomyiidae sp. BOLD:ACB9195"   
 [52] "Cecidomyiidae sp. BOLD:ACC1750"   
 [53] "Cecidomyiidae sp. BOLD:ACI2971"   
 [54] "Cecidomyiidae sp. BOLD:ACI6840"   
 [55] "Cecidomyiidae sp. BOLD:ACK3029"   
 [56] "Cecidomyiidae sp. BOLD:ACM9927"   
 [57] "Cecidomyiidae sp. SLIKOK09"       
 [58] "Cepheus sp. BOLD:AAD2517"         
 [59] "Ceraticelus fissiceps"            
 [60] "Ceratopogonidae sp. BOLD:ACY4529" 
 [61] "Chaitophorus populifolii"         
 [62] "Chalarus decorus"                 
 [63] "Chalarus sp. BOLD:ACK3338"        
 [64] "Chironomidae sp. BOLD:AAL7347"    
 [65] "Chironomidae sp. BOLD:AAM6264"    
 [66] "Chironomidae sp. BOLD:AAN5352"    
 [67] "Chironomidae sp. BOLD:AAN5397"    
 [68] "Chironomidae sp. BOLD:ACU6068"    
 [69] "Chironomidae sp. SLIKOK11"        
 [70] "Chironomidae sp. SLIKOK21"        
 [71] "Chironomidae sp. SLIKOK28"        
 [72] "Chironominae sp. SLIKOK32"        
 [73] "Chironomus sp. BOLD:AAC0594"      
 [74] "Chironomus sp. BOLD:AAL7315"      
 [75] "Chironomus sp. SLIKOK16"          
 [76] "Chironomus sp. SLIKOK34"          
 [77] "Cicadellidae sp. SLIKOK07"        
 [78] "Cicadellidae sp. SLIKOK14"        
 [79] "Cicadula intermedia"              
 [80] "Cicadula sp. BOLD:ACI5705"        
 [81] "Cinara mariana"                   
 [82] "Cixius meridionalis"              
 [83] "Cladara limitaria"                
 [84] "Cladotanytarsus sp. BOLD:AAC4537" 
 [85] "Claustropyga acanthostyla"        
 [86] "Clubiona kulczynskii"             
 [87] "Clusiodes melanostomus"           
 [88] "Coelosia gracilis"                
 [89] "Coenosia campestris"              
 [90] "Coenosia mollicula"               
 [91] "Coenosia sp. SLIKOK02"            
 [92] "Coleophora canadensisella"        
 [93] "Columella sp. BOLD:ABV1789"       
 [94] "Conchapelopia americana"          
 [95] "Conchapelopia sp. SLIKOK06"       
 [96] "Corynoptera blanda"               
 [97] "Corynoptera sp. SLIKOK18"         
 [98] "Craspedolepta subpunctata"        
 [99] "Cryptinae sp. SLIKOK22"           
[100] "Culicoides stilobezzioides"       
[101] "Culiseta impatiens"               
[102] "Culiseta morsitans"               
[103] "Cyclosa conica"                   
[104] "Dasyhelea modesta"                
[105] "Delia echinata"                   
[106] "Delia lineariventris"             
[107] "Delia tenuiventris"               
[108] "Delphacodes serrata ?"            
[109] "Deroceras sp. BOLD:ACT8460"       
[110] "Diapriidae sp. BOLD:AAU8951"      
[111] "Diapriidae sp. BOLD:AAU9299"      
[112] "Diapriidae sp. SLIKOK40"          
[113] "Diapriidae sp. SLIKOK43"          
[114] "Diastata vagans"                  
[115] "Dichelotarsus heteronychus"       
[116] "Dichopygina sp. BOLD:AAP8780"     
[117] "Dicranomyia sp. BOLD:ACY4096"     
[118] "Dicrotendipes modestus"           
[119] "Dictyna major"                    
[120] "Dicyrtomidae sp. BOLD:ACU7232"    
[121] "Dikraneura sp. BOLD:ACX8808"      
[122] "Dilophus femoratus"               
[123] "Dolerus gessneri"                 
[124] "Dolerus sp. SLIKOK36"             
[125] "Dolichopodidae sp. BOLD:ACC7206"  
[126] "Dolichovespula arenaria"          
[127] "Dorylomorpha xanthopus"           
[128] "Draeculacephala sp. BOLD:AAG8811" 
[129] "Drosophila subquinaria"           
[130] "Drosophilidae sp. BOLD:ACA9551"   
[131] "Dynatosoma sp. BOLD:ACL3264"      
[132] "Dysstroma citrata"                
[133] "Eanus decoratus"                  
[134] "Elasmostethus interstinctus"      
[135] "Elymana inornata"                 
[136] "Emblyna annulipes"                
[137] "Empididae sp. BOLD:AAF9792"       
[138] "Entomobrya nivalis"               
[139] "Ephedrus lacertosus"              
[140] "Epinotia sp. BOLD:AAB8744"        
[141] "Erioptera sp. BOLD:ABV1765"       
[142] "Erioptera sp. BOLD:ABW8836"       
[143] "Estrandia grandaeva"              
[144] "Euceraphis papyrifericola"        
[145] "Eudorylas sabroskyi"              
[146] "Eudorylas sp. BOLD:ACZ4721"       
[147] "Euhybus triplex"                  
[148] "Eupeodes lapponicus"              
[149] "Eupodidae sp. BOLD:AAL8163"       
[150] "Euscelis monodens sp. nov"        
[151] "Euthyneura sp. BOLD:AAF9859"      
[152] "Evacanthus acuminatus"            
[153] "Exechia contaminata"              
[154] "Exechia frigida"                  
[155] "Exechia sp. BOLD:AAQ3544"         
[156] "Exechia sp. BOLD:ACC3725"         
[157] "Exechia sp. BOLD:ACO2323"         
[158] "Exechia unimaculata"              
[159] "Exechiopsis sp. BOLD:ACI5770"     
[160] "Exothecinae sp. BOLD:AAM7467"     
[161] "Fannia brooksi"                   
[162] "Fannia ciliatissima"              
[163] "Fannia metallipennis"             
[164] "Fannia sp. BBDCN798-10"           
[165] "Fannia spathiophora"              
[166] "Forcipata loca"                   
[167] "Galerucella nymphaeae"            
[168] "Gelis sp. BOLD:AAA6283"           
[169] "Hebecnema nigra"                  
[170] "Heleomyzidae sp. BOLD:AAG0465"    
[171] "Helictes borealis"                
[172] "Helina annosa"                    
[173] "Helophora reducta"                
[174] "Hemerobius humulinus"             
[175] "Hemerobius marginatus"            
[176] "Hemerobius sp. BOLD:AAG0901"      
[177] "Heterarthrus nemoratus"           
[178] "Hilara argentata"                 
[179] "Hilara sp. BOLD:ACF7542"          
[180] "Hippodamia tredecimpunctata"      
[181] "Hybotidae sp. BOLD:AAG6953"       
[182] "Hybotidae sp. BOLD:ACC5973"       
[183] "Hybotidae sp. BOLD:ACX4896"       
[184] "Hydrotaea sp. SLIKOK26"           
[185] "Hylemya variata"                  
[186] "Ichneumonidae sp. BOLD:AAN8142"   
[187] "Ichneumonidae sp. BOLD:ACX6606"   
[188] "Ichneumonidae sp. BOLD:ADF4363"   
[189] "Ichneumonidae sp. SLIKOK08"       
[190] "Ichneumonidae sp. SLIKOK12"       
[191] "Ichneumonidae sp. SLIKOK15"       
[192] "Ichneumonidae sp. SLIKOK17"       
[193] "Ichneumonidae sp. SLIKOK23"       
[194] "Ichneumonidae sp. SLIKOK25"       
[195] "Ichneumonidae sp. SLIKOK31"       
[196] "Ichneumonidae sp. SLIKOK37"       
[197] "Ichneumonidae sp. SLIKOK41"       
[198] "Ichneumoninae sp. SLIKOK03"       
[199] "Idiocerus sp. BOLD:ABZ6671"       
[200] "Idiocerus sp. BOLD:ACB0208"       
[201] "Ilythea spilota"                  
[202] "Javesella sp. BOLD:ACI4365"       
[203] "Keroplatidae sp. SLIKOK01"        
[204] "Lachesilla contraforcepeta"       
[205] "Larinioides patagiatus"           
[206] "Lauxania shewelli"                
[207] "Lauxaniidae sp. BOLD:AAP8083"     
[208] "Lauxaniidae sp. SLIKOK42"         
[209] "Leptalia macilenta"               
[210] "Lepthyphantes alpinus"            
[211] "Leptosciarella sp. BOLD:ACC1232"  
[212] "Ligyrocoris sylvestris"           
[213] "Limnephilidae sp. SLIKOK33"       
[214] "Limnephilus ornatus"              
[215] "Limnophila poetica"               
[216] "Limnophyes minimus"               
[217] "Limoniidae sp. BOLD:AAF8971"      
[218] "Limoniidae sp. BOLD:ADC8285"      
[219] "Liriomyza kenti"                  
[220] "Lispocephala erythrocera"         
[221] "Lissonota sexcincta"              
[222] "Lithophane thaxteri"              
[223] "Lygocoris pabulinus"              
[224] "Macrocera sp. BOLD:AAP6490"       
[225] "Macrocera stigma"                 
[226] "Macrosiphum euphorbiae"           
[227] "Macrosteles alpinus"              
[228] "Macrosteles binotatus"            
[229] "Mecomma gilvipes"                 
[230] "Medina sp. BOLD:AAG6902"          
[231] "Megaselia diversa"                
[232] "Megaselia pulicaria complex"      
[233] "Megaselia sp. BOLD:AAU5627"       
[234] "Megaselia sp. BOLD:ACB1070"       
[235] "Megastylus orbitator"             
[236] "Megeremaeus sp. BOLD:ACC1118"     
[237] "Melanomya ordinaria"              
[238] "Melanoplus fasciatus"             
[239] "Melanostoma mellinum"             
[240] "Mesembrina latreillii"            
[241] "Metopomyza interfrontalis"        
[242] "Metriocnemus sp. 4ES"             
[243] "Micromus borealis"                
[244] "Minettia lupulina"                
[245] "Misumena vatia"                   
[246] "Mompha conturbatella"             
[247] "Monopelopia tenuicalcar"          
[248] "Mughiphantes sp. 1GAB"            
[249] "Muscidae sp. SLIKOK27"            
[250] "Mycetophila alea"                 
[251] "Mycetophila cruciator"            
[252] "Mycetophila luctuosa"             
[253] "Mycetophila sp. BOLD:AAG4978"     
[254] "Mycetophila sp. BOLD:ACA9583"     
[255] "Mycetophila sp. BOLD:ACC2284"     
[256] "Mycetophila sp. SLIKOK04"         
[257] "Mycomya maculata"                 
[258] "Mycomya nitida"                   
[259] "Mycomya shermani"                 
[260] "Mycomya sp. BOLD:AAG4937"         
[261] "Mycomya sp. SLIKOK39"             
[262] "Mydaea furtiva"                   
[263] "Nabis sp. BOLD:AAB8143"           
[264] "Natarsia punctata"                
[265] "Neriene radiata"                  
[266] "Neuratelia sp. BOLD:ACJ0780"      
[267] "Nothodelphax sp. BOLD:ACK6426"    
[268] "Nothodelphax sp. BOLD:ACU5128"    
[269] "Ochlerotatus communis group"      
[270] "Ochlerotatus diantaeus"           
[271] "Ochlerotatus excrucians ?"        
[272] "Oecetis inconspicua"              
[273] "Ohlertidion ohlerti"              
[274] "Orthocentrus sp. BOLD:AAB1188"    
[275] "Pachynematus sp. BOLD:ACR7759"    
[276] "Paratanytarsus sp. BOLD:ACD0044"  
[277] "Paratanytarsus sp. BOLD:ACR4469"  
[278] "Parornix obliterella"             
[279] "Pelegrina montana"                
[280] "Periscepsia clesides"             
[281] "Phaonia apicalis"                 
[282] "Phasia aeneoventris"              
[283] "Pherbellia albocostata"           
[284] "Pherbellia tenuipes"              
[285] "Philodromus peninsulanus"         
[286] "Phora occidentata"                
[287] "Phora sp. BOLD:AAG3238"           
[288] "Phora sp. BOLD:ACE7987"           
[289] "Phoridae sp. BOLD:AAP6413"        
[290] "Phronia sp. BOLD:ABX4956"         
[291] "Phronia sp. BOLD:ACL4028"         
[292] "Phylloneta impressa"              
[293] "Phytosciara flavipes"             
[294] "Pinalitus rostratus"              
[295] "Pipunculidae sp. SLIKOK29"        
[296] "Pipunculus campestris"            
[297] "Pipunculus hertzogi"              
[298] "Pityohyphantes alticeps"          
[299] "Pityohyphantes limitaneus"        
[300] "Platurocypta sp. BOLD:ACC5656"    
[301] "Platycheirus rosarum"             
[302] "Platypalpus sp. BOLD:AAV3699"     
[303] "Platypalpus sp. BOLD:AAV3720"     
[304] "Platypalpus xanthopodus"          
[305] "Platypezina sp. BOLD:ACD8933"     
[306] "Plectiscidea sp. BOLD:AAY4134"    
[307] "Plectiscidea sp. BOLD:ACJ0639"    
[308] "Plectiscidea venusta"             
[309] "Plectiscus impurator"             
[310] "Plunomia sp. BOLD:AAG6897"        
[311] "Polypedilum sp. BOLD:AAM6206"     
[312] "Polypedilum sp. BOLD:AAN5344"     
[313] "Praon sp. BOLD:ACF1737"           
[314] "Prionocera turcica"               
[315] "Pristiphora mollis"               
[316] "Proclitus paganus"                
[317] "Prosimulium minifulvum"           
[318] "Protapanteles sp. BOLD:ACI4084"   
[319] "Psallus falleni"                  
[320] "Psectrocladius fennicus"          
[321] "Pseudolimnophila inornata"        
[322] "Pseudopraon sp. BOLD:ABX6188"     
[323] "Psilidae sp. BOLD:AAF9705"        
[324] "Psychodidae sp. BOLD:ACC1296"     
[325] "Psyllidae sp. BOLD:AAV0253"       
[326] "Rhagonycha mandibularis"          
[327] "Rhamphomyia sp. BOLD:ACG3627"     
[328] "Rheocricotopus sp. BOLD:ACM7368"  
[329] "Rheotanytarsus pentapoda"         
[330] "Rhopalopterum soror"              
[331] "Rymosia cf. pinnata"              
[332] "Sapromyza sp. TAW1 BOLD:AAG6931"  
[333] "Sargus decorus"                   
[334] "Scaptomyza sp. BOLD:ACG6466"      
[335] "Scatopsciara atomaria"            
[336] "Scatopsciara neglecta"            
[337] "Scatopsciara sp. SLIKOK24"        
[338] "Sciaridae sp. BOLD:AAH3985"       
[339] "Sciaridae sp. BOLD:ACB9102"       
[340] "Sciaridae sp. SLIKOK05"           
[341] "Sciaridae sp. SLIKOK35"           
[342] "Scrobipalpa sp. SLIKOK13"         
[343] "Sepsis neocynipsea"               
[344] "Simulium arcticum complex"        
[345] "Simulium sp. BOLD:AAV2391"        
[346] "Simulium venustum complex"        
[347] "Sitticus striatus"                
[348] "Sminthuridae sp. SLIKOK20"        
[349] "Smittia sp. 16ES"                 
[350] "Somatochlora albicincta"          
[351] "Sorhoanus xanthoneurus"           
[352] "Spargania luctuata"               
[353] "Speranza brunneata"               
[354] "Spilogona opaca"                  
[355] "Spilogona sp. SLIKOK19"           
[356] "Strongylogaster rufigastra ?"     
[357] "Strongylophthalmyia angustipennis"
[358] "Succineidae sp. BOLD:ACZ3273"     
[359] "Suillia convergens"               
[360] "Suillia sp. BOLD:AAG0459"         
[361] "Sylvicola fuscatus"               
[362] "Sympistis dentata"                
[363] "Synplasta sp. BOLD:ACD3292"       
[364] "Tanytarsus aigos"                 
[365] "Tanytarsus recurvatus"            
[366] "Tanytarsus sp. BOLD:ABW2740"      
[367] "Tanytarsus sp. BOLD:ACN6175"      
[368] "Tetanocera phyllophora"           
[369] "Tetragnatha extensa"              
[370] "Tetragnatha laboriosa"            
[371] "Tetragoneura sp. BOLD:ACB7566"    
[372] "Thamnotettix confinis"            
[373] "Thanatus coloradensis"            
[374] "Theridion pictum"                 
[375] "Thricops sp. BOLD:ABY7837"        
[376] "Tipula penobscot"                 
[377] "Tomosvaryella sp. BOLD:AAG1660"   
[378] "Trichadenotecnum majus"           
[379] "Trichalophus alternatus"          
[380] "Trichocera sp. BOLD:ACF8968"      
[381] "Trichonta vitta"                  
[382] "Trioza sp. BOLD:AAM8925"          
[383] "Tupiocoris confusus"              
[384] "Tupiocoris sp. BOLD:AAE8157"      
[385] "Urytalpa sp. BOLD:ACO2024"        
[386] "Valenzuela flavidus"              
[387] "Valenzuela sp. BOLD:AAP4628"      
[388] "Venusia pearsalli"                
[389] "Vertigo cristata"                 
[390] "Vertigo sp. SLIKOK30"             
[391] "Vespula alascensis"               
[392] "Xysticus britcheri"               
[393] "Xysticus obscurus"                
[394] "Xysticus triangulosus"            
[395] "Zatypota percontatoria"           
[396] "Zeiraphera improbana"             
[397] "Zoogenetes harpa"                 
[398] "Zygomyia notata"                  
[399] "Zygomyia sp. BOLD:AAV4006"

## Those looked ok.
in3 &lt;- in2[,c("accepted_id", "label")]
in3 &lt;- unique(in3)
dim(in3)
[1] 1386    2

in3$category &lt;- "Invertebrates"

## ok, now conforming and conbining these Slikok datasets.
in3$variable &lt;- "presence"
in3$value &lt;- 1
names(in3)[1:2] &lt;- c("latin", "plot")
in4 &lt;- in3[,c("category", "latin", "variable", "value", "plot")]

skcry$variable &lt;- "presence"
skcry$value &lt;- 1
cry2 &lt;- skcry[,c("category", "latin", "variable", "value", "plot")]

sb$variable &lt;- "presence"
sb$value &lt;- 1
sb2 &lt;- sb[,c("category", "latin", "variable", "value", "plot")]

names(sv)[2] &lt;- "latin"
sv$variable &lt;- "presence"
sv$value &lt;- 1
sv2 &lt;- sv[,c("category", "latin", "variable", "value", "plot")]

skd &lt;- rbind(sv2, cry2, sb2, in4)
dim(skd)
[1] 3411    5
skd &lt;- unique(skd)
dim(skd)
[1] 3286    5

## How many species?
length(levels(as.factor(skd$latin)))
[1] 715

## How many sites? 40, right?
length(levels(as.factor(skd$plot)))
[1] 80
## Whoa, what is up?
levels(as.factor(skd$plot))
## Oh, there are spaces in some of those...
skd$plot &lt;- gsub(" ", "", skd$plot)
length(levels(as.factor(skd$plot)))
[1] 40 ## That's better.

## Doing some saving..
save.image("2019-06-06-1125_workspace.RData")
write.csv(skd, "2019-06-06-1126_Slikok_presence_data_combined.csv", row.names=FALSE)

ag5 &lt;- unique(skd[,c("category", "latin")])
ag5 &lt;- aggregate(ag5$latin, by=list(ag5$category), length)
          Group.1   x
1           Birds  44
2   Invertebrates 399
3         Lichens  81
4    Other Plants 100
5 Vascular Plants  92

## Making an overal barplot  
setwd(wd)
pdf(file="2019-06-06-1131_barplot_Slikok_categories.pdf",
 width=7,
 height=6
 )  
clr &lt;- c("red", "black", "darkgrey", "darkolivegreen1", "darkgreen")
barplot(rev(ag5$x),
 #names.arg = ag5$Group.1,
 ylab="number of species",
 col=rev(clr),
 main="Slikok grid (40 sites)",
 ylim=c(0,400)#,
 #xlim=c(0,8)#,
 #cex.names = 0.7
 )
legend("topleft", 
 legend = rev(ag5$Group.1), 
 fill = rev(clr),
 title = "category")
dev.off()


## Now looking at those black spruce sites. 

sl &lt;- skd$plot %in% skl
skdb &lt;- skd[sl,]
dim(skdb)
[1] 339   5
## Saving this.
write.csv(skdb, "2019-06-06-1145_all_observations_at_5_black_spruce_sites.csv", row.names=FALSE)

## How many species?
length(levels(as.factor(skdb$latin)))
[1] 192

## Breakdown of all species...
ag1 &lt;- aggregate(skdb$latin, by=list(skdb$category), length)
names(ag1) &lt;- c("category", "n_species")
write.csv(ag1, "2019-06-06-1146_n_species_by_categories.csv", row.names=FALSE)
ag1
         category n_species
1           Birds        35
2   Invertebrates       125
3         Lichens        53
4    Other Plants        68
5 Vascular Plants        58

ag2 &lt;- aggregate(skdb$latin, by=list(skdb$category, skdb$plot), length)
names(ag2) &lt;- c("category", "plot", "value")
ag2$variable &lt;- "n_species"
library(reshape2)

ag3 &lt;- dcast(ag2, category ~ plot)
ag3[is.na(ag3)] &lt;- 0
ag3
         category MG07 MG19 MG24 MG39 SK22
1           Birds    5    8    7    9    6
2   Invertebrates   33   20   20   24   28
3         Lichens   14    7   13   11    8
4    Other Plants   10   12   15   16   15
5 Vascular Plants   13    7   14   14   10

## Stats..
nsp &lt;- apply(ag3[,2:ncol(ag3)], 2, sum)
summary(nsp)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   54.0    67.0    69.0    67.8    74.0    75.0 

## Making a plot  
setwd(wd)
pdf(file="2019-06-06-1148_barplot_categories_by_sites.pdf",
 width=7,
 height=6
 )  
clr &lt;- c("red", "black", "darkgrey", "darkolivegreen1", "darkgreen")
barplot(as.matrix(ag3[,2:ncol(ag3)]),
 xlab="site",
 ylab="number of species",
 main="5 Slikok grid black spruce sites",
 col=clr,
 ylim=c(0,80),
 xlim=c(0,9),
 cex.names = 0.7
 )
legend("bottomright", 
 legend = rev(ag3$category), 
 fill = rev(clr),
 title = "category")
dev.off()

## Saving here.
save.image("2019-06-06-1220_workspace.RData")</pre>

<h2 id="toc_5">2019-06-07-0850_sample_frame.R</h2>
<pre>## John wanted coefficients of variation and similarity indices.
wd &lt;- "D:/projects/LTEMP/2019_sample_frame"
setwd(wd)

load("2019-06-06-1220_workspace.RData")

## for the Slikok sites...
ag3

## CV for numbers of species at these five sites.

cv &lt;- function(x)
 {
 sd(x)/mean(x)
 }
cv(nsp)
[1] 0.1240167 ## For the five Slikok sites, arthropods included.
## Same stat, no insects...
nspni &lt;- apply(ag3[c(1,3:5),2:ncol(ag3)], 2, sum)
summary(nspni)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   34.0    39.0    42.0    42.8    49.0    50.0 
cv(nspni)
[1] 0.1579481 ## That is rather a surprise.  There is actually more variation without the insect data.


## Now for the LTEMP sites.
ag2 &lt;- aggregate(cb$latin, by=list(cb$category, cb$plot), length)
names(ag2) &lt;- c("category", "plot", "value")
ag2$variable &lt;- "n_species"
library(reshape2)

ag3 &lt;- dcast(ag2, category ~ plot)
ag3[is.na(ag3)] &lt;- 0

## Stats..
nsp &lt;- apply(ag3[,2:ncol(ag3)], 2, sum)
summary(nsp)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  45.00   53.50   57.00   58.40   64.25   75.00 

cv(nsp)
[1] 0.1636845

nspni &lt;- apply(ag3[c(1,3:5),2:ncol(ag3)], 2, sum)
summary(nspni)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  43.00   52.25   55.50   56.40   60.75   71.00 

cv(nspni)
[1] 0.1541636


## Now combining datasets to calculate similarities.
str(skdb)
str(cb)
cb$plot &lt;- as.character(cb$plot)
skdb$value &lt;- as.integer(skdb$value)
bb &lt;- rbind(cb, skdb)
dim(bb)
[1] 923   5

## Doing a quick check for some synonymies...
levels(as.factor(bb$latin))
  [1] "Ablabesmyia monilis"            
  [2] "Acanthis flammea"               
  [3] "Achrotile sp. BOLD:ACU1499"     
  [4] "Allodia sp. BOLD:ACJ1830"       
  [5] "Alnus viridis"                  
  [6] "Andromeda polifolia"            
  [7] "Aperileptus infuscatus"         
  [8] "Araneus marmoreus"              
  [9] "Arctostaphylos rubra"           
 [10] "Arthonia edgewoodensis"         
 [11] "Arthonia edgewoodensis ined."   
 [12] "Aulacomnium palustre"           
 [13] "Baeomyces rufus"                
 [14] "Betula nana"                    
 [15] "Betula papyrifera"              
 [16] "Biatora efflorescens"           
 [17] "Biatora pallens"                
 [18] "Boletina sp. BOLD:AAM8972"      
 [19] "Braconidae sp. SLIKOK10"        
 [20] "Bryoria fuscescens"             
 [21] "Bryoria glabra"                 
 [22] "Bryoria lanestris"              
 [23] "Bryoria pseudofuscescens"       
 [24] "Bryoria simplicior"             
 [25] "Buellia griseovirens"           
 [26] "Buellia punctata"               
 [27] "Cacopsylla myrtilli"            
 [28] "Calamagrostis canadensis"       
 [29] "Calicium viride"                
 [30] "Calidris minutilla"             
 [31] "Calypogeia sphagnicola"         
 [32] "Canalidion montanum"            
 [33] "Carduelis flammea"              
 [34] "Carex bigelowii"                
 [35] "Carex rotundata"                
 [36] "Carsia sororiata"               
 [37] "Catharus guttatus"              
 [38] "Catharus ustulatus"             
 [39] "Cecidomyiidae sp. BOLD:ABA6509" 
 [40] "Cephalozia bicuspidata"         
 [41] "Cepheus sp. BOLD:AAD2517"       
 [42] "Ceraticelus atriceps"           
 [43] "Ceraticelus fissiceps"          
 [44] "Ceraticelus silus"              
 [45] "Ceratodon purpureus"            
 [46] "Chaenothecopsis tasmanica"      
 [47] "Chamaedaphne calyculata"        
 [48] "Chamerion angustifolium"        
 [49] "Chironomidae sp. BOLD:AAN5397"  
 [50] "Chironominae sp. SLIKOK32"      
 [51] "Chironomus sp. BOLD:AAL7315"    
 [52] "Chironomus sp. SLIKOK34"        
 [53] "Chrysothrix candelaris"         
 [54] "Cicadellidae sp. SLIKOK07"      
 [55] "Cinara mariana"                 
 [56] "Cixius meridionalis"            
 [57] "Cladina arbuscula"              
 [58] "Cladina mitis"                  
 [59] "Cladina rangiferina"            
 [60] "Cladina stellaris"              
 [61] "Cladina stygia"                 
 [62] "Cladonia albonigra"             
 [63] "Cladonia bellidiflora"          
 [64] "Cladonia borealis"              
 [65] "Cladonia botrytes"              
 [66] "Cladonia carneola"              
 [67] "Cladonia cenotea"               
 [68] "Cladonia chlorophaea"           
 [69] "Cladonia coniocraea"            
 [70] "Cladonia cornuta"               
 [71] "Cladonia crispata"              
 [72] "Cladonia deformis"              
 [73] "Cladonia ecmocyna"              
 [74] "Cladonia elongata"              
 [75] "Cladonia fimbriata"             
 [76] "Cladonia gracilis"              
 [77] "Cladonia grayi"                 
 [78] "Cladonia macilenta"             
 [79] "Cladonia maxima"                
 [80] "Cladonia metacorallifera"       
 [81] "Cladonia phyllophora"           
 [82] "Cladonia pleurota"              
 [83] "Cladonia subulata"              
 [84] "Cladonia sulphurina"            
 [85] "Cladonia umbricola"             
 [86] "Cliostomum flavidulum"          
 [87] "Cliostomum griffithii"          
 [88] "Clubiona kulczynskii"           
 [89] "Coenosia sp. SLIKOK02"          
 [90] "Coleophora canadensisella"      
 [91] "Conchapelopia americana"        
 [92] "Contopus cooperi"               
 [93] "Contopus sordidulus"            
 [94] "Cornus canadensis"              
 [95] "Corvus corax"                   
 [96] "Cyclosa conica"                 
 [97] "Dasiphora fruticosa"            
 [98] "Dendroica coronata"             
 [99] "Dichopygina sp. BOLD:AAP8780"   
[100] "Dicranum fuscescens"            
[101] "Dicranum howellii"              
[102] "Dicranum polysetum"             
[103] "Dicranum scoparium"             
[104] "Dicrotendipes modestus"         
[105] "Dictyna alaskae"                
[106] "Dictyna arundinacea"            
[107] "Dictyna major"                  
[108] "Dilophus femoratus"             
[109] "Dismodicus modicus"             
[110] "Drosera rotundifolia"           
[111] "Eanus decoratus"                
[112] "Emblyna annulipes"              
[113] "Emblyna chitina"                
[114] "Empetrum nigrum"                
[115] "Empidonax alnorum"              
[116] "Equisetum arvense"              
[117] "Equisetum sylvaticum"           
[118] "Equisetum variegatum"           
[119] "Erioptera sp. BOLD:ABW8836"     
[120] "Estrandia grandaeva"            
[121] "Euhybus triplex"                
[122] "Euphagus carolinus"             
[123] "Exechia frigida"                
[124] "Flavocetraria cucullata"        
[125] "Formica neorufibarbis"          
[126] "Gallinago delicata"             
[127] "Gavia immer"                    
[128] "Gelis sp. BOLD:AAA6283"         
[129] "Geocaulon lividum"              
[130] "Grus canadensis"                
[131] "Hemerobius humulinus"           
[132] "Hemerobius sp. BOLD:AAG0901"    
[133] "Hylocomium splendens"           
[134] "Hypogymnia austerodes"          
[135] "Hypogymnia bitteri"             
[136] "Hypogymnia occidentalis"        
[137] "Hypogymnia physodes"            
[138] "Hypogymnia rugosa"              
[139] "Ichneumonidae sp. SLIKOK37"     
[140] "Icmadophila ericetorum"         
[141] "Imshaugia aleurites"            
[142] "Ixoreus naevius"                
[143] "Japewia subaurifera"            
[144] "Japewia tornoensis"             
[145] "Junco heymalis  hyemalis"       
[146] "Junco hyemalis"                 
[147] "Keroplatidae sp. SLIKOK01"      
[148] "Kusnezoviella macleani"         
[149] "Larus glaucescens"              
[150] "Lecanora boligera"              
[151] "Lecanora circumborealis"        
[152] "Lecanora fuscescens"            
[153] "Lecanora hagenii"               
[154] "Lecanora laxa"                  
[155] "Lecanora pulicaris"             
[156] "Lecanora schizochromatica"      
[157] "Lecanora symmicta"              
[158] "Lecidea leprarioides"           
[159] "Lecidea rubrocastanea"          
[160] "Ledum groenlandicum"            
[161] "Ledum palustre"                 
[162] "Leptosciarella sp. BOLD:ACC1232"
[163] "Limnodromus griseus"            
[164] "Limnophyes minimus"             
[165] "Limoniidae sp. BOLD:AAF8971"    
[166] "Limoniidae sp. BOLD:ADC8285"    
[167] "Linnaea borealis"               
[168] "Lobaria pulmonaria"             
[169] "Lobaria scrobiculata"           
[170] "Lophozia ventricosa"            
[171] "Loxia leucoptera"               
[172] "Lupinus nootkatensis"           
[173] "Lycopodium annotinum"           
[174] "Lycopodium clavatum"            
[175] "Lygocoris pabulinus"            
[176] "Macrocera sp. BOLD:AAP6490"     
[177] "Macrosteles alpinus"            
[178] "Mecomma gilvipes"               
[179] "Megaselia diversa"              
[180] "Melanelia olivacea"             
[181] "Melanomya ordinaria"            
[182] "Melospiza lincolnii"            
[183] "Mesembrina latreillii"          
[184] "Metriocnemus sp. 4ES"           
[185] "Misumena vatia"                 
[186] "Mompha sexstrigella"            
[187] "Mughiphantes sp. 1GAB"          
[188] "Muscidae sp. SLIKOK27"          
[189] "Mycetophila luctuosa"           
[190] "Mycobilimbia sanguineoatra"     
[191] "Mycoblastus sanguinarius"       
[192] "Mycomya shermani"               
[193] "Mycomya sp. BOLD:AAG4937"       
[194] "Mylia taylorii"                 
[195] "Myrmica alaskensis"             
[196] "Nabis sp. BOLD:AAB8143"         
[197] "Nephroma arcticum"              
[198] "Nephroma bellum"                
[199] "Ochlerotatus communis group"    
[200] "Ochlerotatus diantaeus"         
[201] "Ochlerotatus excrucians ?"      
[202] "Ochrolechia androgyna"          
[203] "Ochrolechia szatalaensis"       
[204] "Oreothlypis celata"             
[205] "Paludella squarrosa"            
[206] "Paratanytarsus sp. BOLD:ACR4469"
[207] "Parmelia sulcata"               
[208] "Parmeliopsis ambigua"           
[209] "Parmeliopsis hyperopta"         
[210] "Passerculus sandwichensis"      
[211] "Peltigera aphthosa"             
[212] "Peltigera canina"               
[213] "Peltigera conspersa"            
[214] "Peltigera leucophlebia"         
[215] "Peltigera malacea"              
[216] "Peltigera membranacea"          
[217] "Peltigera neopolydactyla"       
[218] "Peltigera occidentalis"         
[219] "Peltigera orbicularis"          
[220] "Peltigera ponojensis"           
[221] "Peltigera retifoveata"          
[222] "Peltigera scabrosa"             
[223] "Peltigera sphaerica"            
[224] "Periscepsia clesides"           
[225] "Perisoreus canadensis"          
[226] "Phaenoglyphis kenaii"           
[227] "Philodromus peninsulanus"       
[228] "Phlyctis argena"                
[229] "Phronia sp. BOLD:ABX4956"       
[230] "Phytosciara flavipes"           
[231] "Picea glauca"                   
[232] "Picea mariana"                  
[233] "Picoides dorsalis"              
[234] "Pinalitus rostratus"            
[235] "Pipunculus hertzogi"            
[236] "Pityohyphantes alticeps"        
[237] "Pityohyphantes limitaneus"      
[238] "Placynthiella dasaea"           
[239] "Platismatia glauca"             
[240] "Platypalpus sp. BOLD:AAV3720"   
[241] "Plectiscidea sp. BOLD:ACJ0639"  
[242] "Plectiscus impurator"           
[243] "Pleurozium schreberi"           
[244] "Podiceps grisegena"             
[245] "Poecile atricapillus"           
[246] "Poecile hudsonica"              
[247] "Poecile hudsonicus"             
[248] "Pohlia nutans"                  
[249] "Polytrichum commune"            
[250] "Polytrichum juniperinum"        
[251] "Polytrichum piliferum"          
[252] "Polytrichum strictum"           
[253] "Populus trichocarpa"            
[254] "Pseudopraon sp. BOLD:ABX6188"   
[255] "Ptilidium ciliare"              
[256] "Ptilidium pulcherrimum"         
[257] "Ptilium crista-castrensis"      
[258] "Pycnora elachista"              
[259] "Pycnora leucococca"             
[260] "Pycnora sorophora"              
[261] "Ramalina dilacerata"            
[262] "Ramalina roesleri"              
[263] "Ramboldia cinnabarina"          
[264] "Regulus calendula"              
[265] "Rhagonycha mandibularis"        
[266] "Rhamphomyia barypoda"           
[267] "Rhamphomyia sp. BOLD:ACG3627"   
[268] "Rinodina degeliana"             
[269] "Rinodina flavosoralifera"       
[270] "Rinodina griseosoralifera"      
[271] "Rinodina stictica"              
[272] "Rosa acicularis"                
[273] "Rubus arcticus"                 
[274] "Rubus chamaemorus"              
[275] "Rugathodes aurantius"           
[276] "Salix barclayi"                 
[277] "Salix bebbiana"                 
[278] "Salix fuscescens"               
[279] "Salix pulchra"                  
[280] "Salix scouleriana"              
[281] "Sanionia uncinata"              
[282] "Scatopsciara atomaria"          
[283] "Setophaga coronata"             
[284] "Simulium arcticum complex"      
[285] "Sminthuridae sp. SLIKOK20"      
[286] "Somatochlora albicincta"        
[287] "Sphagnum alaskense"             
[288] "Sphagnum angustifolium"         
[289] "Sphagnum fuscum"                
[290] "Sphagnum girgensohnii"          
[291] "Sphagnum magellanicum"          
[292] "Sphagnum rubellum"              
[293] "Sphagnum russowii"              
[294] "Sphagnum teres"                 
[295] "Sphagnum warnstorfii"           
[296] "Spiraea stevenii"               
[297] "Splachnum luteum"               
[298] "Stereocaulon tomentosum"        
[299] "Suillia convergens"             
[300] "Tachycineta bicolor"            
[301] "Tanytarsus aigos"               
[302] "Tetragnatha extensa"            
[303] "Tetragnatha laboriosa"          
[304] "Tetraplodon angustatus"         
[305] "Tetraplodon mnioides"           
[306] "Theridion pictum"               
[307] "Toensbergia leucococca"         
[308] "Tomenthypnum nitens"            
[309] "Tringa flavipes"                
[310] "Tringa melanoleuca"             
[311] "Trioza sp. BOLD:AAM8925"        
[312] "Tritomaria quinquedentata"      
[313] "Tuckermannopsis chlorophylla"   
[314] "Turdus migratorius"             
[315] "Urytalpa sp. BOLD:ACO2024"      
[316] "Usnea lapponica"                
[317] "Vaccinium caespitosum"          
[318] "Vaccinium oxycoccos"            
[319] "Vaccinium uliginosum"           
[320] "Vaccinium vitis-idaea"          
[321] "Viburnum edule"                 
[322] "Vulpicida pinastri"             
[323] "Xylographa vitiligo"            
[324] "Zonotrichia leucophrys"         
[325] "Zonotrichia leucophrys gambelii"
[326] "Zygomyia notata"                
[327] "Zygomyia sp. BOLD:AAV4006"      
## That looked ok.

library(reshape2)
bsc &lt;- dcast(bb, plot ~ latin, sum)
bscm &lt;- as.matrix(bsc[,2:ncol(bsc)])
rownames(bscm) &lt;- bsc$plot


library(vegan)
vde &lt;- vegdist(bscm, method="euclidian")
vde

vdr &lt;- vegdist(bscm, method="raup")
vdr

cluse &lt;- hclust(vde, "average")
plot(cluse) 

## I think I really have to cut out the invertebrates here.
bbni &lt;- bb[!(bb$category == "Invertebrates"),]
dim(bbni)
[1] 778   5

bsc &lt;- dcast(bbni, plot ~ latin, sum)
bscm &lt;- as.matrix(bsc[,2:ncol(bsc)])
rownames(bscm) &lt;- bsc$plot

vde &lt;- vegdist(bscm, method="euclidian")
vde
cluse &lt;- hclust(vde, "average")
pdf("2019-06-07-1002_plot_clusters.pdf",
 width=6,
 height=6)
plot(cluse,
 ylab="Euclidean distance",
 xlab="plots",
 main="",
 sub=""
 ) 
dev.off()

vdr &lt;- vegdist(bscm, method="raup")
vdr
clusr &lt;- hclust(vdr, "average")
plot(clusr) 

## Going with euclidean distance because this is easy to understand.

## For the LTEMP sites...
vdem &lt;- as.matrix(vde)
diag(vdem) &lt;- NA
ltd &lt;- mean(vdem[1:10,1:10], na.rm=TRUE)
ltd
[1] 7.931097

## For Slikok sites...
skd &lt;- mean(vdem[11:15,11:15], na.rm=TRUE)
skd
[1] 6.945005

## Overall...
mean(vdem, na.rm=TRUE)
[1] 7.936467

## Between LTEMP and Slikok groups...
dd &lt;- mean(vdem[1:10,11:15], na.rm=TRUE)
dd
[1] 8.139593


## Now looking at numbers of shared species..
ag2 &lt;- aggregate(bbni$latin, by=list(bbni$category, bbni$plot), length)
names(ag2) &lt;- c("category", "plot", "value")
ag2$variable &lt;- "n_species"

ag3 &lt;- dcast(ag2, category ~ plot)
ag3[is.na(ag3)] &lt;- 0

nsp &lt;- apply(ag3[,2:ncol(ag3)], 2, sum)
nsp &lt;- as.data.frame(nsp)
nsp$site &lt;- rownames(nsp)

## Ok, now I want to determine similarity among these sites.
gd &lt;- expand.grid(nsp$site, nsp$site)
sl &lt;- !(gd$Var1 == gd$Var2)
gd &lt;- gd[sl,]
dim(gd)
[1] 210   2

library(sqldf)
gd2 &lt;- sqldf('
select
 gd.*,
 nsp.nsp as nsp_site1
from
 gd left outer join
 nsp
on
 gd.Var1 = nsp.site
 ')

gd2 &lt;- gd2[order(gd2$Var1, gd2$Var2),]

gd2$nshare &lt;- NA
for (this_row in 1:nrow(gd2))
 {
 sl1 &lt;- bbni$plot == gd2$Var1[this_row]
 sl2 &lt;- bbni$plot == gd2$Var2[this_row]
 sp1 &lt;- bbni$latin[sl1]
 sp2 &lt;- bbni$latin[sl2]
 gd2$nshare[this_row] &lt;- sum(sp1 %in% sp2)
 }

gd2$percent_shared &lt;- gd2$nshare*100/gd2$nsp_site1

summary(gd2$percent_shared)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  17.86   32.92   40.91   40.29   46.94   65.22 

## Now comparing just LTEMP sites.
sll &lt;- !(grepl("M", gd2$Var1) |  grepl("S", gd2$Var1) | grepl("M", gd2$Var2) | grepl("S", gd2$Var2))
gd2[sll,]
dim(gd2[sll,])
[1] 90  5
summary(gd2$percent_shared[sll])
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  21.13   37.70   43.92   44.28   50.91   65.22 

## For the Slikok sites...
sls &lt;- (grepl("M", gd2$Var1) | grepl("S", gd2$Var1)) &amp;
       (grepl("M", gd2$Var2) | grepl("S", gd2$Var2))
gd2[sls,]
dim(gd2[sls,])
summary(gd2$percent_shared[sls])
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  34.00   43.41   46.08   46.40   50.00   57.14 
## Ok, so those are a little more similar to each other.

## Now contrast them.
slc &lt;- (
        (grepl("M", gd2$Var1) | grepl("S", gd2$Var1)) &amp;
        (!grepl("M", gd2$Var2) | !grepl("S", gd2$Var2))
       |
	     (!grepl("M", gd2$Var1) | !grepl("S", gd2$Var1)) &amp;
        (grepl("M", gd2$Var2) | grepl("S", gd2$Var2))
       )
dim(gd2[slc,])
summary(gd2$percent_shared[slc])
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  17.86   29.53   38.05   37.30   43.59   63.27 
  
#Later John asked for how many species were shared between LTEMP and Slikok sites.
#Again looking at everything except invertebrates.
## First, how many species overall?
length(levels(as.factor(bbni$latin)))
[1] 224

length(levels(as.factor(bb$latin)))  # What was it with insects?
[1] 327

sl &lt;- grepl("M", bbni$plot) |  grepl("S", bbni$plot)

spl &lt;- levels(as.factor(bbni$latin[!sl]))
sps &lt;- levels(as.factor(bbni$latin[sl]))

## Saw one problem.
bbni$latin[bbni$latin=="Zonotrichia leucophrys gambelii"] &lt;- "Zonotrichia leucophrys"

spl &lt;- levels(as.factor(bbni$latin[!sl]))
sps &lt;- levels(as.factor(bbni$latin[sl]))

length(levels(as.factor(bbni$latin)))
[1] 223

length(spl)
[1] 192
length(sps)
[1] 103

sum(spl %in% sps)
[1] 72
sum(sps %in% spl)
[1] 72

save.image("2019-06-07-1203_workspace.RData")</pre>

<h2 id="toc_6">2019-06-10-1104_map_stuff.R</h2>

<pre>## Working on map/flight plan stuff for 2019 LTEMP sampling.
wd &lt;- "D:/projects/LTEMP/2019_sample_frame"
setwd(wd)

d1 &lt;- read.csv("LTEMP_site_table_2019-06-10-0948.csv", stringsAsFactors=FALSE)
d1$lzlab &lt;- paste("L", d1$site, sep="")

write.csv(d1, "LTEMP_site_table_2019-06-10-1120.csv", row.names=FALSE)

## Now getting all coordinates in dms.
library(xlsx)
co &lt;- read.xlsx("flight_plan_coordinates_v2019-06-10-1123.xlsx", sheetIndex=1)

co$lat_ddm &lt;- paste(floor(co$lat_dd), "degrees ", round((co$lat_dd - floor(co$lat_dd))*60, 3), "' N", sep="")

co$lon_ddm &lt;- paste(floor(abs(co$lon_dd)), "degrees ", round((abs((co$lon_dd)) - floor(abs(co$lon_dd)))*60, 3), "' W", sep="")

## Saving this...
write.csv(co, "2019-06-10-1139_flight_map_coord.csv", row.names=FALSE)

## Later in the day...
d1 &lt;- read.xlsx("flight_plan_coordinates_v2019-06-10-1142.xlsx", sheetIndex=1)
library(maptools)
coordinates(d1) &lt;- c("lon_dd", "lat_dd")
plot(d1)

albers &lt;- "+proj=aea +lat_1=55 +lat_2=65 +lat_0=50 +lon_0=-154 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"
wgs84 &lt;- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"

proj4string(d1) &lt;- CRS(wgs84)
d1a &lt;- spTransform(d1, CRS(albers))

coo &lt;- coordinates(d1a)
rownames(coo) &lt;- d1a$site
as.matrix(dist(coo))

write.csv(round(as.matrix(dist(coo))), "flight_plan_coordinates_distances_meters.csv")

com &lt;- as.matrix(dist(coo))
comi &lt;- com*0.000621371
conmi &lt;- com*0.00053995663640604751

write.csv(round(comi, 1), "flight_plan_coordinates_distances_miles.csv")
write.csv(round(conmi, 1), "flight_plan_coordinates_distances_nautical_miles.csv")

save.image("2019-06-10-1411_workspace.RData")</pre>

<h2 id="toc_7">2019-06-11-1337_comparison.R</h2>
<pre>wd &lt;- "C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2019-04-01_comparison"
setwd(wd)
load("2019-04-11-1056_workspace.RData")


library(corrplot)
corrplot(co1, method="circle"))

d4all
cor(d4all[1,,1], d4all[1,,2])

cor(rep(0, 10), c(10, rep(0, 9)))


## Now that might be a little problematic using the read counts and morph counts.  Let's try presence/absence.
to10 &lt;- function(x)
 {
 if(x &gt; 0) {1}
 else {0}
 }
d5 &lt;- d4all
d5 &lt;- apply(d5, 1:3, FUN=to10)
co10 &lt;- cor(df10)

## Let's just look at the percent of the time the two methods agree.
d5d &lt;- abs(d5[,,1] - d5[,,2])
pdif &lt;- apply(d5d, 1, sum)/ncol(d5d)
pdif &lt;- pdif[order(pdif)]

## Making a data frame of these comparisons.
pdif &lt;- apply(d5d, 1, sum)/ncol(d5d)
dfs &lt;- as.data.frame(pdif)

dfs$morph_pos_counts &lt;- apply(d4all[,,"morph_count"], 1, sum)
dfs$ngs_pos_counts &lt;- apply(d4all[,,"read_count"], 1, sum)

plot(dfs$morph_pos_counts, dfs$ngs_pos_counts)
text(dfs$morph_pos_counts, dfs$ngs_pos_counts, rownames(dfs))

## Checking something...
dimnames(d4all)[[1]] == rownames(smr2)
## Looks good.

plot(dfs$morph_pos_counts, dfs$ngs_pos_counts)
text(dfs$morph_pos_counts, dfs$ngs_pos_counts, smr2$accepted_id)


plot(log(dfs$morph_pos_counts + 1), log(dfs$ngs_pos_counts + 1))
text(log(dfs$morph_pos_counts + 1), log(dfs$ngs_pos_counts + 1), smr2$accepted_id)

## Filling in some missing IDs...
smr2$accepted_id[smr2$accepted_id==""] &lt;- smr2$family_name[smr2$accepted_id==""]
smr2$accepted_id[smr2$accepted_id==""] &lt;- smr2$order_name[smr2$accepted_id==""]
smr2$accepted_id[smr2$accepted_id==""] &lt;- smr2$class_name[smr2$accepted_id==""]
smr2$accepted_id[smr2$accepted_id==""] &lt;- smr2$phylum_name[smr2$accepted_id==""]

pdf(file="2019-06-11-1439_read_counts_v_morph_counts.pdf",
 width=8,
 height=8
 )
plot(log(dfs$morph_pos_counts + 1),
 log(dfs$ngs_pos_counts + 1),
 xlim=c(-1, 6),
 ylim=c(-1, 13)
 )
text(log(dfs$morph_pos_counts + 1),
 log(dfs$ngs_pos_counts + 1),
 smr2$accepted_id, srt=45
 )
dev.off()

dm &lt;- d5[,,"morph_count"] * d5[,,"read_count"]
dfs$agree_positive &lt;- apply(dm, 1, sum)

## What species were shared by both methods?
sl &lt;- apply
morphl &lt;- smr2$accepted_id[smr2$morph_count &amp; ids$sp]
[1] "Acmaeops proteus"   "Meriellum proteus"  "Stenocorus obtusus" "Tetropium fuscum"   "Ips pertabatus"    
[6] "Ips typographus"    "Halyomorpha halys"

ngsl &lt;- smr2$accepted_id[smr2$read_count &amp; ids$sp]
ngsl
 [1] "Clubiona kulczynskii"         "Tibellus sp. BOLD:AAA7188"    "Entomobrya nivalis"          
 [4] "Acmaeops proteus"             "Neospondylis upiformis"       "Phymatodes dimidiatus"       
 [7] "Phymatodes maculicollis"      "Plectrura spinicauda"         "Tetropium cinnamopterum"     
[10] "Xylotrechus longitarsis"      "Xylotrechus undulatus"        "Thanasimus undatulus"        
[13] "Cryphalus ruficollis"         "Dendroctonus rufipennis"      "Dolurgus pumilus"            
[16] "Dryocoetes affaber"           "Dryocoetes autographus"       "Hylurgops rugipennis"        
[19] "Orthotomicus caelatus"        "Polygraphus rufipennis"       "Pseudips concinnus"          
[22] "Trypodendron lineatum"        "Idolus debilis"               "Liotrichus sagitticollis"    
[25] "Pseudanostirus hoppingi"      "Epiphanis cornutus"           "Serropalpus substriatus"     
[28] "Hemicoelus carinatus"         "Microbregma emarginatum"      "Placusa incompleta"          
[31] "Hydrophoria lancifer"         "Synneuron decipiens"          "Allocladius sp. BOLD:AAH3022"
[34] "Coenosia conforma"            "Phaonia errans"               "Phaonia luteva"              
[37] "Spilogona sororcula"          "Exechia papyracea"            "Gymnophora subarcuata"       
[40] "Phora sp. BOLD:AAU5644"       "Sciaridae sp. BOLD:AAP9896"   "Prionocera turcica"          
[43] "Tipula platymera"             "Xylophagus fulgidus"          "Elasmostethus interstinctus" 
[46] "Ichneumonie sp. BOLD:AAU8831"

morphl[morphl %in% ngsl]
[1] "Acmaeops proteus"  ## Only one species identified by both methods.</pre>

<h2 id="toc_8">2019-06-14-0951_updating_occurrence_plot.R</h2>
<pre>wd &lt;- "C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2019-04-01_comparison"
setwd(wd)

load("2019-04-11-0958_workspace.RData")

## Updating some names...
idlab[idlab=="Arthropoda Insecta Coleoptera Curculionidae Ips pertabatus"] &lt;- 
 "Arthropoda Insecta Coleoptera Curculionidae Ips perturbatus"
idlab[idlab=="Arthropoda Insecta Hymenoptera Ichneumonidae Ichneumonie sp. BOLD:AAU8831"] &lt;- 
 "Arthropoda Insecta Hymenoptera Ichneumonidae Ichneumoninae sp. BOLD:AAU8831" 
idlab[idlab=="Arthropoda Insecta Diptera Mycetophilidae Exechia papyracea"] &lt;- 
 "Arthropoda Insecta Diptera Mycetophilidae Exechia sp. BOLD:ACO2323" 
 
png(file="2019-06-14-0953_occurrence_plot.png",
 width=1050,
 height=1400
 )
par(mar=c(1,1,10,40))
image(d7,
 col=clr,
 xaxt="n",
 yaxt="n"
 )
grid(nc, nr)
box()
axis(side=4,
 labels=idlab,
 at=(0:(nr-1))/(nr-1),
 las=2
 )
axis(side=3,
 labels=slab,
 at=(0:(nc-1))/(nc-1), 
 las=2
 ) 
dev.off()</pre>

<h2 id="toc_9">2019-06-18-0720_starting_on_Yeti.txt</h2>
<pre>cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/raw_fastq

mv 4869-KNWREnto10866-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10866_R1.fastq.gz
mv 4869-KNWREnto10866-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10866_R2.fastq.gz
mv 4869-KNWREnto10867-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10867_R1.fastq.gz
mv 4869-KNWREnto10867-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10867_R2.fastq.gz
mv 4869-KNWREnto10868-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10868_R1.fastq.gz
mv 4869-KNWREnto10868-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10868_R2.fastq.gz
mv 4869-KNWREnto10869-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10869_R1.fastq.gz
mv 4869-KNWREnto10869-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10869_R2.fastq.gz
mv 4869-KNWREnto10871-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10871_R1.fastq.gz
mv 4869-KNWREnto10871-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10871_R2.fastq.gz
mv 4869-KNWREnto10872-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10872_R1.fastq.gz
mv 4869-KNWREnto10872-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10872_R2.fastq.gz
mv 4869-KNWREnto10873-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10873_R1.fastq.gz
mv 4869-KNWREnto10873-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10873_R2.fastq.gz
mv 4869-KNWREnto10875-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10875_R1.fastq.gz
mv 4869-KNWREnto10875-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10875_R2.fastq.gz
mv 4869-KNWREnto10876-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10876_R1.fastq.gz
mv 4869-KNWREnto10876-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10876_R2.fastq.gz
mv 4869-KNWREnto10877-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10877_R1.fastq.gz
mv 4869-KNWREnto10877-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10877_R2.fastq.gz
mv 4869-KNWREnto10878-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10878_R1.fastq.gz
mv 4869-KNWREnto10878-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10878_R2.fastq.gz
mv 4869-KNWREnto10879-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10879_R1.fastq.gz
mv 4869-KNWREnto10879-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10879_R2.fastq.gz
mv 4869-KNWREnto10881-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10881_R1.fastq.gz
mv 4869-KNWREnto10881-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10881_R2.fastq.gz
mv 4869-KNWREnto10883-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10883_R1.fastq.gz
mv 4869-KNWREnto10883-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10883_R2.fastq.gz
mv 4869-KNWREnto10884-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10884_R1.fastq.gz
mv 4869-KNWREnto10884-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10884_R2.fastq.gz
mv 4869-KNWREnto10885-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10885_R1.fastq.gz
mv 4869-KNWREnto10885-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10885_R2.fastq.gz
mv 4869-KNWREnto10886-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10886_R1.fastq.gz
mv 4869-KNWREnto10886-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10886_R2.fastq.gz
mv 4869-KNWREnto10887-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10887_R1.fastq.gz
mv 4869-KNWREnto10887-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10887_R2.fastq.gz
mv 4869-KNWREnto10888-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10888_R1.fastq.gz
mv 4869-KNWREnto10888-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10888_R2.fastq.gz
mv 4869-KNWREnto10889-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10889_R1.fastq.gz
mv 4869-KNWREnto10889-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10889_R2.fastq.gz
mv 4869-KNWREnto10890-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10890_R1.fastq.gz
mv 4869-KNWREnto10890-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10890_R2.fastq.gz
mv 4869-KNWREnto10891-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10891_R1.fastq.gz
mv 4869-KNWREnto10891-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10891_R2.fastq.gz
mv 4869-KNWREnto10892-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10892_R1.fastq.gz
mv 4869-KNWREnto10892-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10892_R2.fastq.gz
mv 4869-KNWREnto10893-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10893_R1.fastq.gz
mv 4869-KNWREnto10893-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10893_R2.fastq.gz
mv 4869-KNWREnto10894-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10894_R1.fastq.gz
mv 4869-KNWREnto10894-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10894_R2.fastq.gz
mv 4869-KNWREnto10895-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10895_R1.fastq.gz
mv 4869-KNWREnto10895-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10895_R2.fastq.gz
mv 4869-KNWREnto10896-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10896_R1.fastq.gz
mv 4869-KNWREnto10896-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10896_R2.fastq.gz
mv 4869-KNWREnto10897-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10897_R1.fastq.gz
mv 4869-KNWREnto10897-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10897_R2.fastq.gz
mv 4869-KNWREnto10898-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10898_R1.fastq.gz
mv 4869-KNWREnto10898-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10898_R2.fastq.gz
mv 4869-KNWREnto10899-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10899_R1.fastq.gz
mv 4869-KNWREnto10899-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10899_R2.fastq.gz
mv 4869-KNWREnto10900-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10900_R1.fastq.gz
mv 4869-KNWREnto10900-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10900_R2.fastq.gz
mv 4869-KNWREnto10901-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10901_R1.fastq.gz
mv 4869-KNWREnto10901-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10901_R2.fastq.gz
mv 4869-KNWREnto10902-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10902_R1.fastq.gz
mv 4869-KNWREnto10902-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10902_R2.fastq.gz
mv 4869-KNWREnto10903-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10903_R1.fastq.gz
mv 4869-KNWREnto10903-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10903_R2.fastq.gz
mv 4869-KNWREnto10904-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10904_R1.fastq.gz
mv 4869-KNWREnto10904-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10904_R2.fastq.gz
mv 4869-KNWREnto10905-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10905_R1.fastq.gz
mv 4869-KNWREnto10905-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10905_R2.fastq.gz
mv 4869-KNWREnto10906-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10906_R1.fastq.gz
mv 4869-KNWREnto10906-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10906_R2.fastq.gz
mv 4869-KNWREnto10908-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10908_R1.fastq.gz
mv 4869-KNWREnto10908-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10908_R2.fastq.gz
mv 4869-KNWREnto10909-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10909_R1.fastq.gz
mv 4869-KNWREnto10909-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10909_R2.fastq.gz
mv 4869-KNWREnto10910-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10910_R1.fastq.gz
mv 4869-KNWREnto10910-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10910_R2.fastq.gz
mv 4869-KNWREnto10912-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10912_R1.fastq.gz
mv 4869-KNWREnto10912-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10912_R2.fastq.gz
mv 4869-KNWREnto10913-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10913_R1.fastq.gz
mv 4869-KNWREnto10913-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10913_R2.fastq.gz
mv 4869-KNWREnto10914-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10914_R1.fastq.gz
mv 4869-KNWREnto10914-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10914_R2.fastq.gz
mv 4869-KNWREnto10916-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10916_R1.fastq.gz
mv 4869-KNWREnto10916-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10916_R2.fastq.gz
mv 4869-KNWREnto10918-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10918_R1.fastq.gz
mv 4869-KNWREnto10918-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10918_R2.fastq.gz
mv 4869-KNWREnto10920-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10920_R1.fastq.gz
mv 4869-KNWREnto10920-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10920_R2.fastq.gz
mv 4869-KNWREnto10922-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10922_R1.fastq.gz
mv 4869-KNWREnto10922-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10922_R2.fastq.gz
mv 4869-KNWREnto10923-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10923_R1.fastq.gz
mv 4869-KNWREnto10923-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10923_R2.fastq.gz
mv 4869-KNWREnto10924-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10924_R1.fastq.gz
mv 4869-KNWREnto10924-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10924_R2.fastq.gz
mv 4869-KNWREnto10926-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10926_R1.fastq.gz
mv 4869-KNWREnto10926-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10926_R2.fastq.gz
mv 4869-KNWREnto10927-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10927_R1.fastq.gz
mv 4869-KNWREnto10927-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10927_R2.fastq.gz
mv 4869-KNWREnto10928-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10928_R1.fastq.gz
mv 4869-KNWREnto10928-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10928_R2.fastq.gz
mv 4869-KNWREnto10930-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10930_R1.fastq.gz
mv 4869-KNWREnto10930-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10930_R2.fastq.gz
mv 4869-KNWREnto10931-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10931_R1.fastq.gz
mv 4869-KNWREnto10931-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10931_R2.fastq.gz
mv 4869-KNWREnto10932-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10932_R1.fastq.gz
mv 4869-KNWREnto10932-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10932_R2.fastq.gz
mv 4869-KNWREnto10934-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10934_R1.fastq.gz
mv 4869-KNWREnto10934-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10934_R2.fastq.gz
mv 4869-KNWREnto10936-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10936_R1.fastq.gz
mv 4869-KNWREnto10936-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10936_R2.fastq.gz
mv 4869-KNWREnto10938-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10938_R1.fastq.gz
mv 4869-KNWREnto10938-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10938_R2.fastq.gz
mv 4869-KNWREnto10940-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10940_R1.fastq.gz
mv 4869-KNWREnto10940-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10940_R2.fastq.gz
mv 4869-KNWREnto10941-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10941_R1.fastq.gz
mv 4869-KNWREnto10941-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10941_R2.fastq.gz
mv 4869-KNWREnto10942-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10942_R1.fastq.gz
mv 4869-KNWREnto10942-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10942_R2.fastq.gz
mv 4869-KNWREnto10944-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10944_R1.fastq.gz
mv 4869-KNWREnto10944-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10944_R2.fastq.gz
mv 4869-KNWREnto10945-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10945_R1.fastq.gz
mv 4869-KNWREnto10945-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10945_R2.fastq.gz
mv 4869-KNWREnto10948-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10948_R1.fastq.gz
mv 4869-KNWREnto10948-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10948_R2.fastq.gz
mv 4869-KNWREnto10950-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10950_R1.fastq.gz
mv 4869-KNWREnto10950-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10950_R2.fastq.gz
mv 4869-KNWREnto10951-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10951_R1.fastq.gz
mv 4869-KNWREnto10951-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10951_R2.fastq.gz
mv 4869-KNWREnto10952-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10952_R1.fastq.gz
mv 4869-KNWREnto10952-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10952_R2.fastq.gz
mv 4869-KNWREnto10953-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10953_R1.fastq.gz
mv 4869-KNWREnto10953-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10953_R2.fastq.gz
mv 4869-KNWREnto10954-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10954_R1.fastq.gz
mv 4869-KNWREnto10954-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10954_R2.fastq.gz
mv 4869-KNWREnto10956-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10956_R1.fastq.gz
mv 4869-KNWREnto10956-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10956_R2.fastq.gz
mv 4869-KNWREnto10958-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10958_R1.fastq.gz
mv 4869-KNWREnto10958-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10958_R2.fastq.gz
mv 4869-KNWREnto10959-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10959_R1.fastq.gz
mv 4869-KNWREnto10959-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10959_R2.fastq.gz
mv 4869-KNWREnto10960-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10960_R1.fastq.gz
mv 4869-KNWREnto10960-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10960_R2.fastq.gz
mv 4869-KNWREnto10961-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10961_R1.fastq.gz
mv 4869-KNWREnto10961-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10961_R2.fastq.gz
mv 4869-KNWREnto10962-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10962_R1.fastq.gz
mv 4869-KNWREnto10962-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10962_R2.fastq.gz
mv 4869-KNWREnto10963-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10963_R1.fastq.gz
mv 4869-KNWREnto10963-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10963_R2.fastq.gz
mv 4869-KNWREnto10964-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10964_R1.fastq.gz
mv 4869-KNWREnto10964-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10964_R2.fastq.gz
mv 4869-KNWREnto10965-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10965_R1.fastq.gz
mv 4869-KNWREnto10965-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10965_R2.fastq.gz
mv 4869-KNWREnto10966-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10966_R1.fastq.gz
mv 4869-KNWREnto10966-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10966_R2.fastq.gz
mv 4869-KNWREnto10967-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10967_R1.fastq.gz
mv 4869-KNWREnto10967-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10967_R2.fastq.gz
mv 4869-KNWREnto10968-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10968_R1.fastq.gz
mv 4869-KNWREnto10968-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10968_R2.fastq.gz
mv 4869-KNWREnto10969-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10969_R1.fastq.gz
mv 4869-KNWREnto10969-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10969_R2.fastq.gz
mv 4869-KNWREnto10970-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10970_R1.fastq.gz
mv 4869-KNWREnto10970-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10970_R2.fastq.gz
mv 4869-KNWREnto10971-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10971_R1.fastq.gz
mv 4869-KNWREnto10971-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10971_R2.fastq.gz
mv 4869-KNWREnto10972-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10972_R1.fastq.gz
mv 4869-KNWREnto10972-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10972_R2.fastq.gz
mv 4869-KNWREnto10973-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10973_R1.fastq.gz
mv 4869-KNWREnto10973-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10973_R2.fastq.gz
mv 4869-KNWREnto10974-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10974_R1.fastq.gz
mv 4869-KNWREnto10974-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10974_R2.fastq.gz
mv 4869-KNWREnto10975-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10975_R1.fastq.gz
mv 4869-KNWREnto10975-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10975_R2.fastq.gz
mv 4869-KNWREnto10976-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10976_R1.fastq.gz
mv 4869-KNWREnto10976-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10976_R2.fastq.gz
mv 4869-KNWREnto10977-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10977_R1.fastq.gz
mv 4869-KNWREnto10977-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10977_R2.fastq.gz
mv 4869-KNWREnto10978-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10978_R1.fastq.gz
mv 4869-KNWREnto10978-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10978_R2.fastq.gz
mv 4869-KNWREnto10979-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10979_R1.fastq.gz
mv 4869-KNWREnto10979-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10979_R2.fastq.gz
mv 4869-KNWREnto10981-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10981_R1.fastq.gz
mv 4869-KNWREnto10981-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10981_R2.fastq.gz
mv 4869-KNWREnto10982-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10982_R1.fastq.gz
mv 4869-KNWREnto10982-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10982_R2.fastq.gz
mv 4869-KNWREnto10983-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10983_R1.fastq.gz
mv 4869-KNWREnto10983-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10983_R2.fastq.gz
mv 4869-KNWREnto10985-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10985_R1.fastq.gz
mv 4869-KNWREnto10985-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10985_R2.fastq.gz
mv 4869-KNWREnto10986-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10986_R1.fastq.gz
mv 4869-KNWREnto10986-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10986_R2.fastq.gz
mv 4869-KNWREnto10987-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10987_R1.fastq.gz
mv 4869-KNWREnto10987-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10987_R2.fastq.gz
mv 4869-KNWREnto10988-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10988_R1.fastq.gz
mv 4869-KNWREnto10988-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10988_R2.fastq.gz
mv 4869-KNWREnto10989-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10989_R1.fastq.gz
mv 4869-KNWREnto10989-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10989_R2.fastq.gz
mv 4869-KNWREnto10990-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10990_R1.fastq.gz
mv 4869-KNWREnto10990-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10990_R2.fastq.gz
mv 4869-KNWREnto10993-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10993_R1.fastq.gz
mv 4869-KNWREnto10993-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10993_R2.fastq.gz
mv 4869-KNWREnto10995-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10995_R1.fastq.gz
mv 4869-KNWREnto10995-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10995_R2.fastq.gz
mv 4869-KNWREnto10997-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10997_R1.fastq.gz
mv 4869-KNWREnto10997-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10997_R2.fastq.gz
mv 4869-KNWREnto10999-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10999_R1.fastq.gz
mv 4869-KNWREnto10999-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10999_R2.fastq.gz
mv 4869-KNWREnto11000-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11000_R1.fastq.gz
mv 4869-KNWREnto11000-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11000_R2.fastq.gz
mv 4869-KNWREnto11001-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11001_R1.fastq.gz
mv 4869-KNWREnto11001-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11001_R2.fastq.gz
mv 4869-KNWREnto11003-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11003_R1.fastq.gz
mv 4869-KNWREnto11003-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11003_R2.fastq.gz
mv 4869-KNWREnto11004-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11004_R1.fastq.gz
mv 4869-KNWREnto11004-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11004_R2.fastq.gz
mv 4869-KNWREnto11005-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11005_R1.fastq.gz
mv 4869-KNWREnto11005-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11005_R2.fastq.gz
mv 4869-KNWREnto11007-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11007_R1.fastq.gz
mv 4869-KNWREnto11007-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11007_R2.fastq.gz
mv 4869-KNWREnto11008-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11008_R1.fastq.gz
mv 4869-KNWREnto11008-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11008_R2.fastq.gz
mv 4869-KNWREnto11009-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11009_R1.fastq.gz
mv 4869-KNWREnto11009-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11009_R2.fastq.gz
mv 4869-KNWREnto11011-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11011_R1.fastq.gz
mv 4869-KNWREnto11011-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11011_R2.fastq.gz
mv 4869-KNWREnto11013-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11013_R1.fastq.gz
mv 4869-KNWREnto11013-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11013_R2.fastq.gz
mv 4869-KNWREnto11015-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11015_R1.fastq.gz
mv 4869-KNWREnto11015-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11015_R2.fastq.gz
mv 4869-KNWREnto11017-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11017_R1.fastq.gz
mv 4869-KNWREnto11017-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11017_R2.fastq.gz
mv 4869-KNWREnto11018-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11018_R1.fastq.gz
mv 4869-KNWREnto11018-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11018_R2.fastq.gz
mv 4869-KNWREnto11019-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11019_R1.fastq.gz
mv 4869-KNWREnto11019-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11019_R2.fastq.gz
mv 4869-KNWREnto11021-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11021_R1.fastq.gz
mv 4869-KNWREnto11021-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11021_R2.fastq.gz
mv 4869-KNWREnto11022-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11022_R1.fastq.gz
mv 4869-KNWREnto11022-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11022_R2.fastq.gz
mv 4869-KNWREnto11023-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11023_R1.fastq.gz
mv 4869-KNWREnto11023-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11023_R2.fastq.gz
mv 4869-KNWREnto11025-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11025_R1.fastq.gz
mv 4869-KNWREnto11025-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11025_R2.fastq.gz
mv 4869-KNWREnto11026-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11026_R1.fastq.gz
mv 4869-KNWREnto11026-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11026_R2.fastq.gz
mv 4869-KNWREnto11027-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11027_R1.fastq.gz
mv 4869-KNWREnto11027-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11027_R2.fastq.gz</pre>

<h2 id="toc_10">2019-06-18-0720_starting_on_Yeti.txt</h2>
<pre>cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/raw_fastq

mv 4869-KNWREnto10866-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10866_R1.fastq.gz
mv 4869-KNWREnto10866-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10866_R2.fastq.gz
mv 4869-KNWREnto10867-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10867_R1.fastq.gz
mv 4869-KNWREnto10867-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10867_R2.fastq.gz
mv 4869-KNWREnto10868-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10868_R1.fastq.gz
mv 4869-KNWREnto10868-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10868_R2.fastq.gz
mv 4869-KNWREnto10869-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10869_R1.fastq.gz
mv 4869-KNWREnto10869-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10869_R2.fastq.gz
mv 4869-KNWREnto10871-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10871_R1.fastq.gz
mv 4869-KNWREnto10871-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10871_R2.fastq.gz
mv 4869-KNWREnto10872-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10872_R1.fastq.gz
mv 4869-KNWREnto10872-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10872_R2.fastq.gz
mv 4869-KNWREnto10873-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10873_R1.fastq.gz
mv 4869-KNWREnto10873-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10873_R2.fastq.gz
mv 4869-KNWREnto10875-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10875_R1.fastq.gz
mv 4869-KNWREnto10875-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10875_R2.fastq.gz
mv 4869-KNWREnto10876-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10876_R1.fastq.gz
mv 4869-KNWREnto10876-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10876_R2.fastq.gz
mv 4869-KNWREnto10877-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10877_R1.fastq.gz
mv 4869-KNWREnto10877-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10877_R2.fastq.gz
mv 4869-KNWREnto10878-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10878_R1.fastq.gz
mv 4869-KNWREnto10878-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10878_R2.fastq.gz
mv 4869-KNWREnto10879-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10879_R1.fastq.gz
mv 4869-KNWREnto10879-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10879_R2.fastq.gz
mv 4869-KNWREnto10881-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10881_R1.fastq.gz
mv 4869-KNWREnto10881-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10881_R2.fastq.gz
mv 4869-KNWREnto10883-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10883_R1.fastq.gz
mv 4869-KNWREnto10883-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10883_R2.fastq.gz
mv 4869-KNWREnto10884-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10884_R1.fastq.gz
mv 4869-KNWREnto10884-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10884_R2.fastq.gz
mv 4869-KNWREnto10885-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10885_R1.fastq.gz
mv 4869-KNWREnto10885-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10885_R2.fastq.gz
mv 4869-KNWREnto10886-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10886_R1.fastq.gz
mv 4869-KNWREnto10886-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10886_R2.fastq.gz
mv 4869-KNWREnto10887-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10887_R1.fastq.gz
mv 4869-KNWREnto10887-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10887_R2.fastq.gz
mv 4869-KNWREnto10888-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10888_R1.fastq.gz
mv 4869-KNWREnto10888-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10888_R2.fastq.gz
mv 4869-KNWREnto10889-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10889_R1.fastq.gz
mv 4869-KNWREnto10889-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10889_R2.fastq.gz
mv 4869-KNWREnto10890-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10890_R1.fastq.gz
mv 4869-KNWREnto10890-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10890_R2.fastq.gz
mv 4869-KNWREnto10891-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10891_R1.fastq.gz
mv 4869-KNWREnto10891-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10891_R2.fastq.gz
mv 4869-KNWREnto10892-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10892_R1.fastq.gz
mv 4869-KNWREnto10892-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10892_R2.fastq.gz
mv 4869-KNWREnto10893-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10893_R1.fastq.gz
mv 4869-KNWREnto10893-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10893_R2.fastq.gz
mv 4869-KNWREnto10894-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10894_R1.fastq.gz
mv 4869-KNWREnto10894-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10894_R2.fastq.gz
mv 4869-KNWREnto10895-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10895_R1.fastq.gz
mv 4869-KNWREnto10895-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10895_R2.fastq.gz
mv 4869-KNWREnto10896-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10896_R1.fastq.gz
mv 4869-KNWREnto10896-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10896_R2.fastq.gz
mv 4869-KNWREnto10897-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10897_R1.fastq.gz
mv 4869-KNWREnto10897-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10897_R2.fastq.gz
mv 4869-KNWREnto10898-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10898_R1.fastq.gz
mv 4869-KNWREnto10898-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10898_R2.fastq.gz
mv 4869-KNWREnto10899-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10899_R1.fastq.gz
mv 4869-KNWREnto10899-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10899_R2.fastq.gz
mv 4869-KNWREnto10900-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10900_R1.fastq.gz
mv 4869-KNWREnto10900-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10900_R2.fastq.gz
mv 4869-KNWREnto10901-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10901_R1.fastq.gz
mv 4869-KNWREnto10901-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10901_R2.fastq.gz
mv 4869-KNWREnto10902-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10902_R1.fastq.gz
mv 4869-KNWREnto10902-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10902_R2.fastq.gz
mv 4869-KNWREnto10903-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10903_R1.fastq.gz
mv 4869-KNWREnto10903-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10903_R2.fastq.gz
mv 4869-KNWREnto10904-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10904_R1.fastq.gz
mv 4869-KNWREnto10904-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10904_R2.fastq.gz
mv 4869-KNWREnto10905-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10905_R1.fastq.gz
mv 4869-KNWREnto10905-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10905_R2.fastq.gz
mv 4869-KNWREnto10906-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10906_R1.fastq.gz
mv 4869-KNWREnto10906-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10906_R2.fastq.gz
mv 4869-KNWREnto10908-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10908_R1.fastq.gz
mv 4869-KNWREnto10908-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10908_R2.fastq.gz
mv 4869-KNWREnto10909-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10909_R1.fastq.gz
mv 4869-KNWREnto10909-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10909_R2.fastq.gz
mv 4869-KNWREnto10910-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10910_R1.fastq.gz
mv 4869-KNWREnto10910-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10910_R2.fastq.gz
mv 4869-KNWREnto10912-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10912_R1.fastq.gz
mv 4869-KNWREnto10912-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10912_R2.fastq.gz
mv 4869-KNWREnto10913-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10913_R1.fastq.gz
mv 4869-KNWREnto10913-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10913_R2.fastq.gz
mv 4869-KNWREnto10914-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10914_R1.fastq.gz
mv 4869-KNWREnto10914-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10914_R2.fastq.gz
mv 4869-KNWREnto10916-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10916_R1.fastq.gz
mv 4869-KNWREnto10916-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10916_R2.fastq.gz
mv 4869-KNWREnto10918-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10918_R1.fastq.gz
mv 4869-KNWREnto10918-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10918_R2.fastq.gz
mv 4869-KNWREnto10920-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10920_R1.fastq.gz
mv 4869-KNWREnto10920-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10920_R2.fastq.gz
mv 4869-KNWREnto10922-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10922_R1.fastq.gz
mv 4869-KNWREnto10922-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10922_R2.fastq.gz
mv 4869-KNWREnto10923-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10923_R1.fastq.gz
mv 4869-KNWREnto10923-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10923_R2.fastq.gz
mv 4869-KNWREnto10924-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10924_R1.fastq.gz
mv 4869-KNWREnto10924-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10924_R2.fastq.gz
mv 4869-KNWREnto10926-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10926_R1.fastq.gz
mv 4869-KNWREnto10926-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10926_R2.fastq.gz
mv 4869-KNWREnto10927-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10927_R1.fastq.gz
mv 4869-KNWREnto10927-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10927_R2.fastq.gz
mv 4869-KNWREnto10928-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10928_R1.fastq.gz
mv 4869-KNWREnto10928-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10928_R2.fastq.gz
mv 4869-KNWREnto10930-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10930_R1.fastq.gz
mv 4869-KNWREnto10930-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10930_R2.fastq.gz
mv 4869-KNWREnto10931-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10931_R1.fastq.gz
mv 4869-KNWREnto10931-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10931_R2.fastq.gz
mv 4869-KNWREnto10932-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10932_R1.fastq.gz
mv 4869-KNWREnto10932-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10932_R2.fastq.gz
mv 4869-KNWREnto10934-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10934_R1.fastq.gz
mv 4869-KNWREnto10934-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10934_R2.fastq.gz
mv 4869-KNWREnto10936-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10936_R1.fastq.gz
mv 4869-KNWREnto10936-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10936_R2.fastq.gz
mv 4869-KNWREnto10938-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10938_R1.fastq.gz
mv 4869-KNWREnto10938-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10938_R2.fastq.gz
mv 4869-KNWREnto10940-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10940_R1.fastq.gz
mv 4869-KNWREnto10940-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10940_R2.fastq.gz
mv 4869-KNWREnto10941-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10941_R1.fastq.gz
mv 4869-KNWREnto10941-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10941_R2.fastq.gz
mv 4869-KNWREnto10942-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10942_R1.fastq.gz
mv 4869-KNWREnto10942-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10942_R2.fastq.gz
mv 4869-KNWREnto10944-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10944_R1.fastq.gz
mv 4869-KNWREnto10944-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10944_R2.fastq.gz
mv 4869-KNWREnto10945-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10945_R1.fastq.gz
mv 4869-KNWREnto10945-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10945_R2.fastq.gz
mv 4869-KNWREnto10948-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10948_R1.fastq.gz
mv 4869-KNWREnto10948-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10948_R2.fastq.gz
mv 4869-KNWREnto10950-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10950_R1.fastq.gz
mv 4869-KNWREnto10950-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10950_R2.fastq.gz
mv 4869-KNWREnto10951-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10951_R1.fastq.gz
mv 4869-KNWREnto10951-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10951_R2.fastq.gz
mv 4869-KNWREnto10952-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10952_R1.fastq.gz
mv 4869-KNWREnto10952-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10952_R2.fastq.gz
mv 4869-KNWREnto10953-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10953_R1.fastq.gz
mv 4869-KNWREnto10953-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10953_R2.fastq.gz
mv 4869-KNWREnto10954-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10954_R1.fastq.gz
mv 4869-KNWREnto10954-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10954_R2.fastq.gz
mv 4869-KNWREnto10956-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10956_R1.fastq.gz
mv 4869-KNWREnto10956-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10956_R2.fastq.gz
mv 4869-KNWREnto10958-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10958_R1.fastq.gz
mv 4869-KNWREnto10958-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10958_R2.fastq.gz
mv 4869-KNWREnto10959-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10959_R1.fastq.gz
mv 4869-KNWREnto10959-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10959_R2.fastq.gz
mv 4869-KNWREnto10960-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10960_R1.fastq.gz
mv 4869-KNWREnto10960-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10960_R2.fastq.gz
mv 4869-KNWREnto10961-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10961_R1.fastq.gz
mv 4869-KNWREnto10961-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10961_R2.fastq.gz
mv 4869-KNWREnto10962-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10962_R1.fastq.gz
mv 4869-KNWREnto10962-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10962_R2.fastq.gz
mv 4869-KNWREnto10963-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10963_R1.fastq.gz
mv 4869-KNWREnto10963-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10963_R2.fastq.gz
mv 4869-KNWREnto10964-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10964_R1.fastq.gz
mv 4869-KNWREnto10964-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10964_R2.fastq.gz
mv 4869-KNWREnto10965-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10965_R1.fastq.gz
mv 4869-KNWREnto10965-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10965_R2.fastq.gz
mv 4869-KNWREnto10966-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10966_R1.fastq.gz
mv 4869-KNWREnto10966-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10966_R2.fastq.gz
mv 4869-KNWREnto10967-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10967_R1.fastq.gz
mv 4869-KNWREnto10967-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10967_R2.fastq.gz
mv 4869-KNWREnto10968-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10968_R1.fastq.gz
mv 4869-KNWREnto10968-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10968_R2.fastq.gz
mv 4869-KNWREnto10969-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10969_R1.fastq.gz
mv 4869-KNWREnto10969-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10969_R2.fastq.gz
mv 4869-KNWREnto10970-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10970_R1.fastq.gz
mv 4869-KNWREnto10970-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10970_R2.fastq.gz
mv 4869-KNWREnto10971-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10971_R1.fastq.gz
mv 4869-KNWREnto10971-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10971_R2.fastq.gz
mv 4869-KNWREnto10972-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10972_R1.fastq.gz
mv 4869-KNWREnto10972-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10972_R2.fastq.gz
mv 4869-KNWREnto10973-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10973_R1.fastq.gz
mv 4869-KNWREnto10973-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10973_R2.fastq.gz
mv 4869-KNWREnto10974-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10974_R1.fastq.gz
mv 4869-KNWREnto10974-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10974_R2.fastq.gz
mv 4869-KNWREnto10975-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10975_R1.fastq.gz
mv 4869-KNWREnto10975-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10975_R2.fastq.gz
mv 4869-KNWREnto10976-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10976_R1.fastq.gz
mv 4869-KNWREnto10976-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10976_R2.fastq.gz
mv 4869-KNWREnto10977-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10977_R1.fastq.gz
mv 4869-KNWREnto10977-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10977_R2.fastq.gz
mv 4869-KNWREnto10978-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10978_R1.fastq.gz
mv 4869-KNWREnto10978-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10978_R2.fastq.gz
mv 4869-KNWREnto10979-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10979_R1.fastq.gz
mv 4869-KNWREnto10979-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10979_R2.fastq.gz
mv 4869-KNWREnto10981-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10981_R1.fastq.gz
mv 4869-KNWREnto10981-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10981_R2.fastq.gz
mv 4869-KNWREnto10982-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10982_R1.fastq.gz
mv 4869-KNWREnto10982-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10982_R2.fastq.gz
mv 4869-KNWREnto10983-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10983_R1.fastq.gz
mv 4869-KNWREnto10983-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10983_R2.fastq.gz
mv 4869-KNWREnto10985-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10985_R1.fastq.gz
mv 4869-KNWREnto10985-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10985_R2.fastq.gz
mv 4869-KNWREnto10986-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10986_R1.fastq.gz
mv 4869-KNWREnto10986-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10986_R2.fastq.gz
mv 4869-KNWREnto10987-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10987_R1.fastq.gz
mv 4869-KNWREnto10987-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10987_R2.fastq.gz
mv 4869-KNWREnto10988-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10988_R1.fastq.gz
mv 4869-KNWREnto10988-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10988_R2.fastq.gz
mv 4869-KNWREnto10989-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10989_R1.fastq.gz
mv 4869-KNWREnto10989-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10989_R2.fastq.gz
mv 4869-KNWREnto10990-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10990_R1.fastq.gz
mv 4869-KNWREnto10990-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10990_R2.fastq.gz
mv 4869-KNWREnto10993-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10993_R1.fastq.gz
mv 4869-KNWREnto10993-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10993_R2.fastq.gz
mv 4869-KNWREnto10995-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10995_R1.fastq.gz
mv 4869-KNWREnto10995-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10995_R2.fastq.gz
mv 4869-KNWREnto10997-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10997_R1.fastq.gz
mv 4869-KNWREnto10997-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10997_R2.fastq.gz
mv 4869-KNWREnto10999-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto10999_R1.fastq.gz
mv 4869-KNWREnto10999-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto10999_R2.fastq.gz
mv 4869-KNWREnto11000-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11000_R1.fastq.gz
mv 4869-KNWREnto11000-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11000_R2.fastq.gz
mv 4869-KNWREnto11001-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11001_R1.fastq.gz
mv 4869-KNWREnto11001-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11001_R2.fastq.gz
mv 4869-KNWREnto11003-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11003_R1.fastq.gz
mv 4869-KNWREnto11003-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11003_R2.fastq.gz
mv 4869-KNWREnto11004-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11004_R1.fastq.gz
mv 4869-KNWREnto11004-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11004_R2.fastq.gz
mv 4869-KNWREnto11005-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11005_R1.fastq.gz
mv 4869-KNWREnto11005-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11005_R2.fastq.gz
mv 4869-KNWREnto11007-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11007_R1.fastq.gz
mv 4869-KNWREnto11007-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11007_R2.fastq.gz
mv 4869-KNWREnto11008-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11008_R1.fastq.gz
mv 4869-KNWREnto11008-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11008_R2.fastq.gz
mv 4869-KNWREnto11009-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11009_R1.fastq.gz
mv 4869-KNWREnto11009-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11009_R2.fastq.gz
mv 4869-KNWREnto11011-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11011_R1.fastq.gz
mv 4869-KNWREnto11011-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11011_R2.fastq.gz
mv 4869-KNWREnto11013-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11013_R1.fastq.gz
mv 4869-KNWREnto11013-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11013_R2.fastq.gz
mv 4869-KNWREnto11015-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11015_R1.fastq.gz
mv 4869-KNWREnto11015-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11015_R2.fastq.gz
mv 4869-KNWREnto11017-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11017_R1.fastq.gz
mv 4869-KNWREnto11017-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11017_R2.fastq.gz
mv 4869-KNWREnto11018-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11018_R1.fastq.gz
mv 4869-KNWREnto11018-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11018_R2.fastq.gz
mv 4869-KNWREnto11019-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11019_R1.fastq.gz
mv 4869-KNWREnto11019-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11019_R2.fastq.gz
mv 4869-KNWREnto11021-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11021_R1.fastq.gz
mv 4869-KNWREnto11021-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11021_R2.fastq.gz
mv 4869-KNWREnto11022-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11022_R1.fastq.gz
mv 4869-KNWREnto11022-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11022_R2.fastq.gz
mv 4869-KNWREnto11023-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11023_R1.fastq.gz
mv 4869-KNWREnto11023-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11023_R2.fastq.gz
mv 4869-KNWREnto11025-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11025_R1.fastq.gz
mv 4869-KNWREnto11025-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11025_R2.fastq.gz
mv 4869-KNWREnto11026-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11026_R1.fastq.gz
mv 4869-KNWREnto11026-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11026_R2.fastq.gz
mv 4869-KNWREnto11027-mlCOIintF-HCO2198R_R1.fastq.gz KNWREnto11027_R1.fastq.gz
mv 4869-KNWREnto11027-mlCOIintF-HCO2198R_R2.fastq.gz KNWREnto11027_R2.fastq.gz

## Now cloning the SCVUC pipeline.
cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods
git clone https://github.com/EcoBiomics-Zoobiome/SCVUC_COI_metabarcode_pipeline.git

## Part I - Link to raw files
linkfiles
/lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/raw_fastq

## Part II - Forward and reverse read number check
module load perl/perl-5.24.1
perl fastq_gz_stats.plx  ## That did not work. 

module purge

module load perl/perl-bio-perl-1.007001
perl fastq_gz_stats.plx  ## Same error.  (you may need to install the Statistics::Lite module) 
module purge

module load perl/perl-5.24.1
perl -MCPAN -e shell
install Statistics::Lite
module purge
module load perl/perl-5.24.1
perl fastq_gz_stats.plx  ## Could not get that to work.  Logged out and logged back in.

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts
module load perl/perl-5.24.1

## Ok, I finally got it to work. First I had to load the module.
module load perl/perl-5.24.1
## Then source my .bashrc.
source $HOME/.bashrc

## Then it worked:
perl fastq_gz_stats.plx KNWREnto10866_R1.fastq.gz
KNWREnto10866_R1.fastq.gz       42196   246     251     250.989074793819        251     251

perl fastq_gz_stats.plx KNWREnto10866_R1.fastq.gz &gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10866_R2.fastq.gz &gt;&gt; fastqstats.txt
## That worked.

## Now submitting that as a SLURM job.
sbatch 2019-06-18-0847_stats.slurm

cat fastqstats.txt
## That looked good.

## Now cloning Seqprep
cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods
git clone https://github.com/jstjohn/SeqPrep.git
cd SeqPrep
make

cp * /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts/

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts

## Now testing one.
sh runseqprep_gz.sh KNWREnto10866_R1.fastq.gz KNWREnto10866_R2.fastq.gz
## That did not work. seqprep command not found.
## Making a symbolic link...
ln -s SeqPrep seqprep
## That still did not work because this directory is not in my PATH.
## Editing:
vi runseqprep_gz.sh

#!/bin/bash
#June 28, 2018 by Teresita M. POrter
#Script grabs R1 and R2 fastq.gz files by their extension (everything but basename)
#Run SEQPREP in parallel
#Be sure to include file extensions that target the R1 and R2 file as command-line arguments
#USAGE sh runseqprep_gz.sh _R1_001.fastq.gz _R2_001.fastq.gz

NR_CPUS=20
count=0

EXT=$1
EXT2=$2

for r1 in *$EXT
do

echo $r1

base=${r1%%$EXT}
echo $base

r2=$base$2

echo $r2

#Pair raw reads
./SeqPrep -f $r1 -r $r2 -1 ${r1}.out -2 ${r2}.out -q 20 -s ${base}.paired.fastq.gz -o 25 &amp;

let count+=1
[[ $((count%NR_CPUS)) -eq 0 ]] &amp;&amp; wait

done

wait

echo "All jobs are done"

sh runseqprep_gz.sh KNWREnto10866_R1.fastq.gz KNWREnto10866_R2.fastq.gz
KNWREnto10866_R1.fastq.gz

KNWREnto10866_R2.fastq.gz

Pairs Processed:        0
Pairs Merged:   41136
Pairs With Adapters:    1
Pairs Discarded:        1
CPU Time Used (Minutes):        0.393333
All jobs are done
## That may have worked.  There appeared to be no output, though.
## I found it.  The file is named .paired.fastq.gz.

##Again editing the script.
vi runseqprep_gz.sh

#!/bin/bash
#June 28, 2018 by Teresita M. POrter
#Script grabs R1 and R2 fastq.gz files by their extension (everything but basename)
#Run SEQPREP in parallel
#Be sure to include file extensions that target the R1 and R2 file as command-line arguments
#USAGE sh runseqprep_gz.sh _R1_001.fastq.gz _R2_001.fastq.gz

NR_CPUS=20
count=0

EXT=$1
EXT2=$2

for r1 in *$EXT
do

echo $r1

base=$r1
echo $base

r2=$base$2

echo $r2

#Pair raw reads
./SeqPrep -f $r1 -r $r2 -1 ${r1}.out -2 ${r2}.out -q 20 -s ${base}.paired.fastq.gz -o 25 &amp;

let count+=1
[[ $((count%NR_CPUS)) -eq 0 ]] &amp;&amp; wait

done

wait

echo "All jobs are done"

## Trying again.
sh runseqprep_gz.sh KNWREnto10866_R1.fastq.gz KNWREnto10866_R2.fastq.gz
## That failed.

vi runseqprep_gz.sh

#!/bin/bash
#June 28, 2018 by Teresita M. POrter
#Script grabs R1 and R2 fastq.gz files by their extension (everything but basename)
#Run SEQPREP in parallel
#Be sure to include file extensions that target the R1 and R2 file as command-line arguments
#USAGE sh runseqprep_gz.sh _R1_001.fastq.gz _R2_001.fastq.gz

NR_CPUS=20
count=0

EXT=$1
EXT2=$2

for r1 in *$EXT
do

echo $r1

base=${r1%%$EXT}
echo $base

r2=$base$2

echo $r2

#Pair raw reads
./SeqPrep -f $r1 -r $r2 -1 ${r1}.out -2 ${r2}.out -q 20 -s ${r1}.paired.fastq.gz -o 25 &amp;

let count+=1
[[ $((count%NR_CPUS)) -eq 0 ]] &amp;&amp; wait

done

wait

echo "All jobs are done"

## That was ugly.  I am just going to use the SeqPrep command  from that script in a SLURM script.

## Need the list of file names...
R

fn &lt;- dir()
sl &lt;- grepl("KNWREnto", fn)
fn &lt;- fn[sl]
sm &lt;- levels(as.factor(substr(fn, 1, 13)))
length(sm)
[1] 125 ## Looks good.
write(sm, "2019-06-18-1106_names.txt")
q()

cat *names.txt
KNWREnto10866
KNWREnto10867
KNWREnto10868
KNWREnto10869
KNWREnto10871
KNWREnto10872
KNWREnto10873
KNWREnto10875
KNWREnto10876
KNWREnto10877
KNWREnto10878
KNWREnto10879
KNWREnto10881
KNWREnto10883
KNWREnto10884
KNWREnto10885
KNWREnto10886
KNWREnto10887
KNWREnto10888
KNWREnto10889
KNWREnto10890
KNWREnto10891
KNWREnto10892
KNWREnto10893
KNWREnto10894
KNWREnto10895
KNWREnto10896
KNWREnto10897
KNWREnto10898
KNWREnto10899
KNWREnto10900
KNWREnto10901
KNWREnto10902
KNWREnto10903
KNWREnto10904
KNWREnto10905
KNWREnto10906
KNWREnto10908
KNWREnto10909
KNWREnto10910
KNWREnto10912
KNWREnto10913
KNWREnto10914
KNWREnto10916
KNWREnto10918
KNWREnto10920
KNWREnto10922
KNWREnto10923
KNWREnto10924
KNWREnto10926
KNWREnto10927
KNWREnto10928
KNWREnto10930
KNWREnto10931
KNWREnto10932
KNWREnto10934
KNWREnto10936
KNWREnto10938
KNWREnto10940
KNWREnto10941
KNWREnto10942
KNWREnto10944
KNWREnto10945
KNWREnto10948
KNWREnto10950
KNWREnto10951
KNWREnto10952
KNWREnto10953
KNWREnto10954
KNWREnto10956
KNWREnto10958
KNWREnto10959
KNWREnto10960
KNWREnto10961
KNWREnto10962
KNWREnto10963
KNWREnto10964
KNWREnto10965
KNWREnto10966
KNWREnto10967
KNWREnto10968
KNWREnto10969
KNWREnto10970
KNWREnto10971
KNWREnto10972
KNWREnto10973
KNWREnto10974
KNWREnto10975
KNWREnto10976
KNWREnto10977
KNWREnto10978
KNWREnto10979
KNWREnto10981
KNWREnto10982
KNWREnto10983
KNWREnto10985
KNWREnto10986
KNWREnto10987
KNWREnto10988
KNWREnto10989
KNWREnto10990
KNWREnto10993
KNWREnto10995
KNWREnto10997
KNWREnto10999
KNWREnto11000
KNWREnto11001
KNWREnto11003
KNWREnto11004
KNWREnto11005
KNWREnto11007
KNWREnto11008
KNWREnto11009
KNWREnto11011
KNWREnto11013
KNWREnto11015
KNWREnto11017
KNWREnto11018
KNWREnto11019
KNWREnto11021
KNWREnto11022
KNWREnto11023
KNWREnto11025
KNWREnto11026
KNWREnto11027

## Made SLURM script...
sbatch 2019-06-18-1056_SeqPrep.slurm

## While that is running I am getting ready for the next step using cutadapt.
module load python/anaconda3 
conda install -c bioconda cutadapt

## Had to add the following to my .bashrc file:
export PATH="/home/mattbowser/.local/bin:$PATH"

## I am not sure if I need to use cutadapt.  I think the barcode sequences have already been removed.
cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts
module load perl/perl-5.24.1
perl fastq_gz_stats.plx KNWREnto10866.paired.fastq.gz
KNWREnto10866.paired.fastq.gz   41136   259     392     364.905800272268        365     365
## So those do need to be trimmed.

## Trying this out.
module load parallel/20160422
cutadapt -g GGWACWGGWTGAACWGTWTAYCCYCC  -m 150 -q 20,20 --max-n=3 --discard-untrimmed -o KNWREnto10866.Ftrimmed.fastq.gz KNWREnto10866.paired.fastq.gz

## How does that look?
module load perl/perl-5.24.1
source $HOME/.bashrc
perl fastq_gz_stats.plx KNWREnto10866.Ftrimmed.fastq.gz
KNWREnto10866.Ftrimmed.fastq.gz 41069   233     366     338.932552533541        339     339
## That worked.

## Now for reverse.
cutadapt -a TAAACTTCAGGGTGACCAAAAAATCA -m 150 -q 20,20 --max-n=3  --discard-untrimmed -o KNWREnto10866.Rtrimmed.fasta.gz KNWREnto10866.Ftrimmed.fastq.gz
## That did not work.  Trying the reverse complement.
cutadapt -a TGATTTTTTGGTCACCCTGAAGTTTA -m 150 -q 20,20 --max-n=3  --discard-untrimmed -o KNWREnto10866.Rtrimmed.fasta.gz KNWREnto10866.Ftrimmed.fastq.gz
## That seemed to work.
perl fastq_gz_stats.plx KNWREnto10866.Rtrimmed.fasta.gz
KNWREnto10866.Rtrimmed.fasta.gz 20490   207     340     312.968374816984        313     313
## That is beautiful!

## Wrote a SLURM script using parallel, just copying from the SCVUC readme and editing.  We will see how this works.
sbatch 2019-06-18-1233_cutadapt.slurm
## That made some ugly file names.
## Trying to fix this.
rename .paired.fastq.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz .Rtrimmed.fasta.gz *.paired.fastq.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz
## Getting rid of one mistake.
rm KNWREnto10866_R1.fastq.gz.Rtrimmed.fasta.gz 
ls *.Rtrimmed.fasta.gz
rm KNWREnto10866.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz
ls -al *.Rtrimmed.fasta.gz  ## Oh, no.  Those are all far too small.

## Trying that SLURM script again.
sbatch 2019-06-18-1233_cutadapt.slurm

## Ok, found and fixed the problem.  Running that again.
sbatch 2019-06-18-1233_cutadapt.slurm
## Wow that made a mess of extra files.

## Fixing really long file names.
rename .paired.fastq.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz .Rtrimmed.fasta.gz *.paired.fastq.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz

ls -al *.Rtrimmed.fasta.gz

rm *.paired.fastq.gz.Ftrimmed.fastq.gz.Ftrimmed.fastq.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz
rm *.paired.fastq.gz.Ftrimmed.fastq.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz
rm *.paired.fastq.gz.Ftrimmed.fastq.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz
rm *.paired.fastq.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz.Rtrimmed.fasta.gz*
rm *.paired.fastq.gz.Ftrimmed.fastq.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz.Rtrimmed.fasta.gz
rm *.paired.fastq.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz
rm *.Ftrimmed.*
## Things look better now.

## Have to be done for today, though.</pre>

<h2 id="toc_11">2019-06-18-0847_stats.slurm</h2>
<pre>#!/bin/bash
#SBATCH --job-name=fastqstats
#SBATCH -n 1 # number of nodes    
#SBATCH -n 1 # number of tasks 
#SBATCH -p long # parition
#SBATCH --account=bio # account code
#SBATCH --time=0-02:00:00 # requested job time D-HH:MM:SS
#SBATCH --mail-type=ALL 
#SBATCH --mail-user=matt_bowser@fws.gov 
#SBATCH -o 2019-06-18-0720_fastqstats-%j.out 

module load perl/perl-5.24.1
source /home/mattbowser/.bashrc

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts
perl fastq_gz_stats.plx KNWREnto10866_R1.fastq.gz &gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10866_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10867_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10867_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10868_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10868_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10869_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10869_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10871_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10871_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10872_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10872_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10873_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10873_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10875_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10875_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10876_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10876_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10877_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10877_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10878_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10878_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10879_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10879_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10881_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10881_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10883_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10883_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10884_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10884_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10885_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10885_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10886_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10886_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10887_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10887_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10888_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10888_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10889_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10889_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10890_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10890_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10891_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10891_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10892_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10892_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10893_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10893_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10894_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10894_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10895_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10895_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10896_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10896_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10897_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10897_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10898_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10898_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10899_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10899_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10900_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10900_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10901_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10901_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10902_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10902_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10903_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10903_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10904_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10904_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10905_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10905_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10906_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10906_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10908_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10908_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10909_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10909_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10910_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10910_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10912_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10912_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10913_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10913_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10914_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10914_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10916_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10916_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10918_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10918_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10920_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10920_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10922_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10922_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10923_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10923_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10924_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10924_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10926_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10926_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10927_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10927_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10928_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10928_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10930_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10930_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10931_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10931_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10932_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10932_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10934_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10934_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10936_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10936_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10938_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10938_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10940_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10940_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10941_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10941_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10942_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10942_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10944_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10944_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10945_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10945_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10948_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10948_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10950_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10950_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10951_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10951_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10952_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10952_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10953_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10953_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10954_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10954_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10956_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10956_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10958_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10958_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10959_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10959_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10960_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10960_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10961_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10961_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10962_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10962_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10963_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10963_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10964_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10964_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10965_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10965_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10966_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10966_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10967_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10967_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10968_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10968_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10969_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10969_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10970_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10970_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10971_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10971_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10972_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10972_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10973_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10973_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10974_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10974_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10975_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10975_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10976_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10976_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10977_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10977_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10978_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10978_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10979_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10979_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10981_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10981_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10982_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10982_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10983_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10983_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10985_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10985_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10986_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10986_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10987_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10987_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10988_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10988_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10989_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10989_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10990_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10990_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10993_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10993_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10995_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10995_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10997_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10997_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10999_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto10999_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11000_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11000_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11001_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11001_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11003_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11003_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11004_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11004_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11005_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11005_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11007_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11007_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11008_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11008_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11009_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11009_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11011_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11011_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11013_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11013_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11015_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11015_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11017_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11017_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11018_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11018_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11019_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11019_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11021_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11021_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11022_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11022_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11023_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11023_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11025_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11025_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11026_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11026_R2.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11027_R1.fastq.gz &gt;&gt; fastqstats.txt
perl fastq_gz_stats.plx KNWREnto11027_R2.fastq.gz &gt;&gt; fastqstats.txt

module purge </pre>

<h2 id="toc_12">2019-06-18-1056_SeqPrep.slurm</h2>
<pre>#!/bin/bash
#SBATCH --job-name=seqprep
#SBATCH -n 1 # number of nodes    
#SBATCH -n 1 # number of tasks 
#SBATCH -p long # parition
#SBATCH --account=bio # account code
#SBATCH --time=0-04:00:00 # requested job time D-HH:MM:SS
#SBATCH --mail-type=ALL 
#SBATCH --mail-user=matt_bowser@fws.gov 
#SBATCH -o 2019-06-18-1056_SeqPrep-%j.out 

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts
./SeqPrep -f KNWREnto10866_R1.fastq.gz -r KNWREnto10866_R2.fastq.gz -1 KNWREnto10866_R1.fastq.gz.out -2 KNWREnto10866_R2.fastq.gz.out -q 20 -s KNWREnto10866.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10867_R1.fastq.gz -r KNWREnto10867_R2.fastq.gz -1 KNWREnto10867_R1.fastq.gz.out -2 KNWREnto10867_R2.fastq.gz.out -q 20 -s KNWREnto10867.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10868_R1.fastq.gz -r KNWREnto10868_R2.fastq.gz -1 KNWREnto10868_R1.fastq.gz.out -2 KNWREnto10868_R2.fastq.gz.out -q 20 -s KNWREnto10868.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10869_R1.fastq.gz -r KNWREnto10869_R2.fastq.gz -1 KNWREnto10869_R1.fastq.gz.out -2 KNWREnto10869_R2.fastq.gz.out -q 20 -s KNWREnto10869.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10871_R1.fastq.gz -r KNWREnto10871_R2.fastq.gz -1 KNWREnto10871_R1.fastq.gz.out -2 KNWREnto10871_R2.fastq.gz.out -q 20 -s KNWREnto10871.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10872_R1.fastq.gz -r KNWREnto10872_R2.fastq.gz -1 KNWREnto10872_R1.fastq.gz.out -2 KNWREnto10872_R2.fastq.gz.out -q 20 -s KNWREnto10872.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10873_R1.fastq.gz -r KNWREnto10873_R2.fastq.gz -1 KNWREnto10873_R1.fastq.gz.out -2 KNWREnto10873_R2.fastq.gz.out -q 20 -s KNWREnto10873.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10875_R1.fastq.gz -r KNWREnto10875_R2.fastq.gz -1 KNWREnto10875_R1.fastq.gz.out -2 KNWREnto10875_R2.fastq.gz.out -q 20 -s KNWREnto10875.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10876_R1.fastq.gz -r KNWREnto10876_R2.fastq.gz -1 KNWREnto10876_R1.fastq.gz.out -2 KNWREnto10876_R2.fastq.gz.out -q 20 -s KNWREnto10876.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10877_R1.fastq.gz -r KNWREnto10877_R2.fastq.gz -1 KNWREnto10877_R1.fastq.gz.out -2 KNWREnto10877_R2.fastq.gz.out -q 20 -s KNWREnto10877.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10878_R1.fastq.gz -r KNWREnto10878_R2.fastq.gz -1 KNWREnto10878_R1.fastq.gz.out -2 KNWREnto10878_R2.fastq.gz.out -q 20 -s KNWREnto10878.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10879_R1.fastq.gz -r KNWREnto10879_R2.fastq.gz -1 KNWREnto10879_R1.fastq.gz.out -2 KNWREnto10879_R2.fastq.gz.out -q 20 -s KNWREnto10879.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10881_R1.fastq.gz -r KNWREnto10881_R2.fastq.gz -1 KNWREnto10881_R1.fastq.gz.out -2 KNWREnto10881_R2.fastq.gz.out -q 20 -s KNWREnto10881.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10883_R1.fastq.gz -r KNWREnto10883_R2.fastq.gz -1 KNWREnto10883_R1.fastq.gz.out -2 KNWREnto10883_R2.fastq.gz.out -q 20 -s KNWREnto10883.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10884_R1.fastq.gz -r KNWREnto10884_R2.fastq.gz -1 KNWREnto10884_R1.fastq.gz.out -2 KNWREnto10884_R2.fastq.gz.out -q 20 -s KNWREnto10884.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10885_R1.fastq.gz -r KNWREnto10885_R2.fastq.gz -1 KNWREnto10885_R1.fastq.gz.out -2 KNWREnto10885_R2.fastq.gz.out -q 20 -s KNWREnto10885.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10886_R1.fastq.gz -r KNWREnto10886_R2.fastq.gz -1 KNWREnto10886_R1.fastq.gz.out -2 KNWREnto10886_R2.fastq.gz.out -q 20 -s KNWREnto10886.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10887_R1.fastq.gz -r KNWREnto10887_R2.fastq.gz -1 KNWREnto10887_R1.fastq.gz.out -2 KNWREnto10887_R2.fastq.gz.out -q 20 -s KNWREnto10887.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10888_R1.fastq.gz -r KNWREnto10888_R2.fastq.gz -1 KNWREnto10888_R1.fastq.gz.out -2 KNWREnto10888_R2.fastq.gz.out -q 20 -s KNWREnto10888.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10889_R1.fastq.gz -r KNWREnto10889_R2.fastq.gz -1 KNWREnto10889_R1.fastq.gz.out -2 KNWREnto10889_R2.fastq.gz.out -q 20 -s KNWREnto10889.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10890_R1.fastq.gz -r KNWREnto10890_R2.fastq.gz -1 KNWREnto10890_R1.fastq.gz.out -2 KNWREnto10890_R2.fastq.gz.out -q 20 -s KNWREnto10890.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10891_R1.fastq.gz -r KNWREnto10891_R2.fastq.gz -1 KNWREnto10891_R1.fastq.gz.out -2 KNWREnto10891_R2.fastq.gz.out -q 20 -s KNWREnto10891.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10892_R1.fastq.gz -r KNWREnto10892_R2.fastq.gz -1 KNWREnto10892_R1.fastq.gz.out -2 KNWREnto10892_R2.fastq.gz.out -q 20 -s KNWREnto10892.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10893_R1.fastq.gz -r KNWREnto10893_R2.fastq.gz -1 KNWREnto10893_R1.fastq.gz.out -2 KNWREnto10893_R2.fastq.gz.out -q 20 -s KNWREnto10893.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10894_R1.fastq.gz -r KNWREnto10894_R2.fastq.gz -1 KNWREnto10894_R1.fastq.gz.out -2 KNWREnto10894_R2.fastq.gz.out -q 20 -s KNWREnto10894.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10895_R1.fastq.gz -r KNWREnto10895_R2.fastq.gz -1 KNWREnto10895_R1.fastq.gz.out -2 KNWREnto10895_R2.fastq.gz.out -q 20 -s KNWREnto10895.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10896_R1.fastq.gz -r KNWREnto10896_R2.fastq.gz -1 KNWREnto10896_R1.fastq.gz.out -2 KNWREnto10896_R2.fastq.gz.out -q 20 -s KNWREnto10896.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10897_R1.fastq.gz -r KNWREnto10897_R2.fastq.gz -1 KNWREnto10897_R1.fastq.gz.out -2 KNWREnto10897_R2.fastq.gz.out -q 20 -s KNWREnto10897.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10898_R1.fastq.gz -r KNWREnto10898_R2.fastq.gz -1 KNWREnto10898_R1.fastq.gz.out -2 KNWREnto10898_R2.fastq.gz.out -q 20 -s KNWREnto10898.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10899_R1.fastq.gz -r KNWREnto10899_R2.fastq.gz -1 KNWREnto10899_R1.fastq.gz.out -2 KNWREnto10899_R2.fastq.gz.out -q 20 -s KNWREnto10899.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10900_R1.fastq.gz -r KNWREnto10900_R2.fastq.gz -1 KNWREnto10900_R1.fastq.gz.out -2 KNWREnto10900_R2.fastq.gz.out -q 20 -s KNWREnto10900.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10901_R1.fastq.gz -r KNWREnto10901_R2.fastq.gz -1 KNWREnto10901_R1.fastq.gz.out -2 KNWREnto10901_R2.fastq.gz.out -q 20 -s KNWREnto10901.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10902_R1.fastq.gz -r KNWREnto10902_R2.fastq.gz -1 KNWREnto10902_R1.fastq.gz.out -2 KNWREnto10902_R2.fastq.gz.out -q 20 -s KNWREnto10902.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10903_R1.fastq.gz -r KNWREnto10903_R2.fastq.gz -1 KNWREnto10903_R1.fastq.gz.out -2 KNWREnto10903_R2.fastq.gz.out -q 20 -s KNWREnto10903.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10904_R1.fastq.gz -r KNWREnto10904_R2.fastq.gz -1 KNWREnto10904_R1.fastq.gz.out -2 KNWREnto10904_R2.fastq.gz.out -q 20 -s KNWREnto10904.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10905_R1.fastq.gz -r KNWREnto10905_R2.fastq.gz -1 KNWREnto10905_R1.fastq.gz.out -2 KNWREnto10905_R2.fastq.gz.out -q 20 -s KNWREnto10905.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10906_R1.fastq.gz -r KNWREnto10906_R2.fastq.gz -1 KNWREnto10906_R1.fastq.gz.out -2 KNWREnto10906_R2.fastq.gz.out -q 20 -s KNWREnto10906.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10908_R1.fastq.gz -r KNWREnto10908_R2.fastq.gz -1 KNWREnto10908_R1.fastq.gz.out -2 KNWREnto10908_R2.fastq.gz.out -q 20 -s KNWREnto10908.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10909_R1.fastq.gz -r KNWREnto10909_R2.fastq.gz -1 KNWREnto10909_R1.fastq.gz.out -2 KNWREnto10909_R2.fastq.gz.out -q 20 -s KNWREnto10909.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10910_R1.fastq.gz -r KNWREnto10910_R2.fastq.gz -1 KNWREnto10910_R1.fastq.gz.out -2 KNWREnto10910_R2.fastq.gz.out -q 20 -s KNWREnto10910.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10912_R1.fastq.gz -r KNWREnto10912_R2.fastq.gz -1 KNWREnto10912_R1.fastq.gz.out -2 KNWREnto10912_R2.fastq.gz.out -q 20 -s KNWREnto10912.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10913_R1.fastq.gz -r KNWREnto10913_R2.fastq.gz -1 KNWREnto10913_R1.fastq.gz.out -2 KNWREnto10913_R2.fastq.gz.out -q 20 -s KNWREnto10913.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10914_R1.fastq.gz -r KNWREnto10914_R2.fastq.gz -1 KNWREnto10914_R1.fastq.gz.out -2 KNWREnto10914_R2.fastq.gz.out -q 20 -s KNWREnto10914.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10916_R1.fastq.gz -r KNWREnto10916_R2.fastq.gz -1 KNWREnto10916_R1.fastq.gz.out -2 KNWREnto10916_R2.fastq.gz.out -q 20 -s KNWREnto10916.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10918_R1.fastq.gz -r KNWREnto10918_R2.fastq.gz -1 KNWREnto10918_R1.fastq.gz.out -2 KNWREnto10918_R2.fastq.gz.out -q 20 -s KNWREnto10918.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10920_R1.fastq.gz -r KNWREnto10920_R2.fastq.gz -1 KNWREnto10920_R1.fastq.gz.out -2 KNWREnto10920_R2.fastq.gz.out -q 20 -s KNWREnto10920.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10922_R1.fastq.gz -r KNWREnto10922_R2.fastq.gz -1 KNWREnto10922_R1.fastq.gz.out -2 KNWREnto10922_R2.fastq.gz.out -q 20 -s KNWREnto10922.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10923_R1.fastq.gz -r KNWREnto10923_R2.fastq.gz -1 KNWREnto10923_R1.fastq.gz.out -2 KNWREnto10923_R2.fastq.gz.out -q 20 -s KNWREnto10923.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10924_R1.fastq.gz -r KNWREnto10924_R2.fastq.gz -1 KNWREnto10924_R1.fastq.gz.out -2 KNWREnto10924_R2.fastq.gz.out -q 20 -s KNWREnto10924.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10926_R1.fastq.gz -r KNWREnto10926_R2.fastq.gz -1 KNWREnto10926_R1.fastq.gz.out -2 KNWREnto10926_R2.fastq.gz.out -q 20 -s KNWREnto10926.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10927_R1.fastq.gz -r KNWREnto10927_R2.fastq.gz -1 KNWREnto10927_R1.fastq.gz.out -2 KNWREnto10927_R2.fastq.gz.out -q 20 -s KNWREnto10927.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10928_R1.fastq.gz -r KNWREnto10928_R2.fastq.gz -1 KNWREnto10928_R1.fastq.gz.out -2 KNWREnto10928_R2.fastq.gz.out -q 20 -s KNWREnto10928.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10930_R1.fastq.gz -r KNWREnto10930_R2.fastq.gz -1 KNWREnto10930_R1.fastq.gz.out -2 KNWREnto10930_R2.fastq.gz.out -q 20 -s KNWREnto10930.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10931_R1.fastq.gz -r KNWREnto10931_R2.fastq.gz -1 KNWREnto10931_R1.fastq.gz.out -2 KNWREnto10931_R2.fastq.gz.out -q 20 -s KNWREnto10931.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10932_R1.fastq.gz -r KNWREnto10932_R2.fastq.gz -1 KNWREnto10932_R1.fastq.gz.out -2 KNWREnto10932_R2.fastq.gz.out -q 20 -s KNWREnto10932.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10934_R1.fastq.gz -r KNWREnto10934_R2.fastq.gz -1 KNWREnto10934_R1.fastq.gz.out -2 KNWREnto10934_R2.fastq.gz.out -q 20 -s KNWREnto10934.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10936_R1.fastq.gz -r KNWREnto10936_R2.fastq.gz -1 KNWREnto10936_R1.fastq.gz.out -2 KNWREnto10936_R2.fastq.gz.out -q 20 -s KNWREnto10936.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10938_R1.fastq.gz -r KNWREnto10938_R2.fastq.gz -1 KNWREnto10938_R1.fastq.gz.out -2 KNWREnto10938_R2.fastq.gz.out -q 20 -s KNWREnto10938.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10940_R1.fastq.gz -r KNWREnto10940_R2.fastq.gz -1 KNWREnto10940_R1.fastq.gz.out -2 KNWREnto10940_R2.fastq.gz.out -q 20 -s KNWREnto10940.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10941_R1.fastq.gz -r KNWREnto10941_R2.fastq.gz -1 KNWREnto10941_R1.fastq.gz.out -2 KNWREnto10941_R2.fastq.gz.out -q 20 -s KNWREnto10941.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10942_R1.fastq.gz -r KNWREnto10942_R2.fastq.gz -1 KNWREnto10942_R1.fastq.gz.out -2 KNWREnto10942_R2.fastq.gz.out -q 20 -s KNWREnto10942.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10944_R1.fastq.gz -r KNWREnto10944_R2.fastq.gz -1 KNWREnto10944_R1.fastq.gz.out -2 KNWREnto10944_R2.fastq.gz.out -q 20 -s KNWREnto10944.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10945_R1.fastq.gz -r KNWREnto10945_R2.fastq.gz -1 KNWREnto10945_R1.fastq.gz.out -2 KNWREnto10945_R2.fastq.gz.out -q 20 -s KNWREnto10945.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10948_R1.fastq.gz -r KNWREnto10948_R2.fastq.gz -1 KNWREnto10948_R1.fastq.gz.out -2 KNWREnto10948_R2.fastq.gz.out -q 20 -s KNWREnto10948.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10950_R1.fastq.gz -r KNWREnto10950_R2.fastq.gz -1 KNWREnto10950_R1.fastq.gz.out -2 KNWREnto10950_R2.fastq.gz.out -q 20 -s KNWREnto10950.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10951_R1.fastq.gz -r KNWREnto10951_R2.fastq.gz -1 KNWREnto10951_R1.fastq.gz.out -2 KNWREnto10951_R2.fastq.gz.out -q 20 -s KNWREnto10951.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10952_R1.fastq.gz -r KNWREnto10952_R2.fastq.gz -1 KNWREnto10952_R1.fastq.gz.out -2 KNWREnto10952_R2.fastq.gz.out -q 20 -s KNWREnto10952.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10953_R1.fastq.gz -r KNWREnto10953_R2.fastq.gz -1 KNWREnto10953_R1.fastq.gz.out -2 KNWREnto10953_R2.fastq.gz.out -q 20 -s KNWREnto10953.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10954_R1.fastq.gz -r KNWREnto10954_R2.fastq.gz -1 KNWREnto10954_R1.fastq.gz.out -2 KNWREnto10954_R2.fastq.gz.out -q 20 -s KNWREnto10954.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10956_R1.fastq.gz -r KNWREnto10956_R2.fastq.gz -1 KNWREnto10956_R1.fastq.gz.out -2 KNWREnto10956_R2.fastq.gz.out -q 20 -s KNWREnto10956.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10958_R1.fastq.gz -r KNWREnto10958_R2.fastq.gz -1 KNWREnto10958_R1.fastq.gz.out -2 KNWREnto10958_R2.fastq.gz.out -q 20 -s KNWREnto10958.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10959_R1.fastq.gz -r KNWREnto10959_R2.fastq.gz -1 KNWREnto10959_R1.fastq.gz.out -2 KNWREnto10959_R2.fastq.gz.out -q 20 -s KNWREnto10959.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10960_R1.fastq.gz -r KNWREnto10960_R2.fastq.gz -1 KNWREnto10960_R1.fastq.gz.out -2 KNWREnto10960_R2.fastq.gz.out -q 20 -s KNWREnto10960.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10961_R1.fastq.gz -r KNWREnto10961_R2.fastq.gz -1 KNWREnto10961_R1.fastq.gz.out -2 KNWREnto10961_R2.fastq.gz.out -q 20 -s KNWREnto10961.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10962_R1.fastq.gz -r KNWREnto10962_R2.fastq.gz -1 KNWREnto10962_R1.fastq.gz.out -2 KNWREnto10962_R2.fastq.gz.out -q 20 -s KNWREnto10962.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10963_R1.fastq.gz -r KNWREnto10963_R2.fastq.gz -1 KNWREnto10963_R1.fastq.gz.out -2 KNWREnto10963_R2.fastq.gz.out -q 20 -s KNWREnto10963.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10964_R1.fastq.gz -r KNWREnto10964_R2.fastq.gz -1 KNWREnto10964_R1.fastq.gz.out -2 KNWREnto10964_R2.fastq.gz.out -q 20 -s KNWREnto10964.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10965_R1.fastq.gz -r KNWREnto10965_R2.fastq.gz -1 KNWREnto10965_R1.fastq.gz.out -2 KNWREnto10965_R2.fastq.gz.out -q 20 -s KNWREnto10965.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10966_R1.fastq.gz -r KNWREnto10966_R2.fastq.gz -1 KNWREnto10966_R1.fastq.gz.out -2 KNWREnto10966_R2.fastq.gz.out -q 20 -s KNWREnto10966.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10967_R1.fastq.gz -r KNWREnto10967_R2.fastq.gz -1 KNWREnto10967_R1.fastq.gz.out -2 KNWREnto10967_R2.fastq.gz.out -q 20 -s KNWREnto10967.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10968_R1.fastq.gz -r KNWREnto10968_R2.fastq.gz -1 KNWREnto10968_R1.fastq.gz.out -2 KNWREnto10968_R2.fastq.gz.out -q 20 -s KNWREnto10968.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10969_R1.fastq.gz -r KNWREnto10969_R2.fastq.gz -1 KNWREnto10969_R1.fastq.gz.out -2 KNWREnto10969_R2.fastq.gz.out -q 20 -s KNWREnto10969.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10970_R1.fastq.gz -r KNWREnto10970_R2.fastq.gz -1 KNWREnto10970_R1.fastq.gz.out -2 KNWREnto10970_R2.fastq.gz.out -q 20 -s KNWREnto10970.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10971_R1.fastq.gz -r KNWREnto10971_R2.fastq.gz -1 KNWREnto10971_R1.fastq.gz.out -2 KNWREnto10971_R2.fastq.gz.out -q 20 -s KNWREnto10971.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10972_R1.fastq.gz -r KNWREnto10972_R2.fastq.gz -1 KNWREnto10972_R1.fastq.gz.out -2 KNWREnto10972_R2.fastq.gz.out -q 20 -s KNWREnto10972.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10973_R1.fastq.gz -r KNWREnto10973_R2.fastq.gz -1 KNWREnto10973_R1.fastq.gz.out -2 KNWREnto10973_R2.fastq.gz.out -q 20 -s KNWREnto10973.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10974_R1.fastq.gz -r KNWREnto10974_R2.fastq.gz -1 KNWREnto10974_R1.fastq.gz.out -2 KNWREnto10974_R2.fastq.gz.out -q 20 -s KNWREnto10974.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10975_R1.fastq.gz -r KNWREnto10975_R2.fastq.gz -1 KNWREnto10975_R1.fastq.gz.out -2 KNWREnto10975_R2.fastq.gz.out -q 20 -s KNWREnto10975.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10976_R1.fastq.gz -r KNWREnto10976_R2.fastq.gz -1 KNWREnto10976_R1.fastq.gz.out -2 KNWREnto10976_R2.fastq.gz.out -q 20 -s KNWREnto10976.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10977_R1.fastq.gz -r KNWREnto10977_R2.fastq.gz -1 KNWREnto10977_R1.fastq.gz.out -2 KNWREnto10977_R2.fastq.gz.out -q 20 -s KNWREnto10977.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10978_R1.fastq.gz -r KNWREnto10978_R2.fastq.gz -1 KNWREnto10978_R1.fastq.gz.out -2 KNWREnto10978_R2.fastq.gz.out -q 20 -s KNWREnto10978.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10979_R1.fastq.gz -r KNWREnto10979_R2.fastq.gz -1 KNWREnto10979_R1.fastq.gz.out -2 KNWREnto10979_R2.fastq.gz.out -q 20 -s KNWREnto10979.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10981_R1.fastq.gz -r KNWREnto10981_R2.fastq.gz -1 KNWREnto10981_R1.fastq.gz.out -2 KNWREnto10981_R2.fastq.gz.out -q 20 -s KNWREnto10981.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10982_R1.fastq.gz -r KNWREnto10982_R2.fastq.gz -1 KNWREnto10982_R1.fastq.gz.out -2 KNWREnto10982_R2.fastq.gz.out -q 20 -s KNWREnto10982.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10983_R1.fastq.gz -r KNWREnto10983_R2.fastq.gz -1 KNWREnto10983_R1.fastq.gz.out -2 KNWREnto10983_R2.fastq.gz.out -q 20 -s KNWREnto10983.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10985_R1.fastq.gz -r KNWREnto10985_R2.fastq.gz -1 KNWREnto10985_R1.fastq.gz.out -2 KNWREnto10985_R2.fastq.gz.out -q 20 -s KNWREnto10985.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10986_R1.fastq.gz -r KNWREnto10986_R2.fastq.gz -1 KNWREnto10986_R1.fastq.gz.out -2 KNWREnto10986_R2.fastq.gz.out -q 20 -s KNWREnto10986.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10987_R1.fastq.gz -r KNWREnto10987_R2.fastq.gz -1 KNWREnto10987_R1.fastq.gz.out -2 KNWREnto10987_R2.fastq.gz.out -q 20 -s KNWREnto10987.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10988_R1.fastq.gz -r KNWREnto10988_R2.fastq.gz -1 KNWREnto10988_R1.fastq.gz.out -2 KNWREnto10988_R2.fastq.gz.out -q 20 -s KNWREnto10988.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10989_R1.fastq.gz -r KNWREnto10989_R2.fastq.gz -1 KNWREnto10989_R1.fastq.gz.out -2 KNWREnto10989_R2.fastq.gz.out -q 20 -s KNWREnto10989.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10990_R1.fastq.gz -r KNWREnto10990_R2.fastq.gz -1 KNWREnto10990_R1.fastq.gz.out -2 KNWREnto10990_R2.fastq.gz.out -q 20 -s KNWREnto10990.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10993_R1.fastq.gz -r KNWREnto10993_R2.fastq.gz -1 KNWREnto10993_R1.fastq.gz.out -2 KNWREnto10993_R2.fastq.gz.out -q 20 -s KNWREnto10993.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10995_R1.fastq.gz -r KNWREnto10995_R2.fastq.gz -1 KNWREnto10995_R1.fastq.gz.out -2 KNWREnto10995_R2.fastq.gz.out -q 20 -s KNWREnto10995.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10997_R1.fastq.gz -r KNWREnto10997_R2.fastq.gz -1 KNWREnto10997_R1.fastq.gz.out -2 KNWREnto10997_R2.fastq.gz.out -q 20 -s KNWREnto10997.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto10999_R1.fastq.gz -r KNWREnto10999_R2.fastq.gz -1 KNWREnto10999_R1.fastq.gz.out -2 KNWREnto10999_R2.fastq.gz.out -q 20 -s KNWREnto10999.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11000_R1.fastq.gz -r KNWREnto11000_R2.fastq.gz -1 KNWREnto11000_R1.fastq.gz.out -2 KNWREnto11000_R2.fastq.gz.out -q 20 -s KNWREnto11000.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11001_R1.fastq.gz -r KNWREnto11001_R2.fastq.gz -1 KNWREnto11001_R1.fastq.gz.out -2 KNWREnto11001_R2.fastq.gz.out -q 20 -s KNWREnto11001.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11003_R1.fastq.gz -r KNWREnto11003_R2.fastq.gz -1 KNWREnto11003_R1.fastq.gz.out -2 KNWREnto11003_R2.fastq.gz.out -q 20 -s KNWREnto11003.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11004_R1.fastq.gz -r KNWREnto11004_R2.fastq.gz -1 KNWREnto11004_R1.fastq.gz.out -2 KNWREnto11004_R2.fastq.gz.out -q 20 -s KNWREnto11004.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11005_R1.fastq.gz -r KNWREnto11005_R2.fastq.gz -1 KNWREnto11005_R1.fastq.gz.out -2 KNWREnto11005_R2.fastq.gz.out -q 20 -s KNWREnto11005.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11007_R1.fastq.gz -r KNWREnto11007_R2.fastq.gz -1 KNWREnto11007_R1.fastq.gz.out -2 KNWREnto11007_R2.fastq.gz.out -q 20 -s KNWREnto11007.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11008_R1.fastq.gz -r KNWREnto11008_R2.fastq.gz -1 KNWREnto11008_R1.fastq.gz.out -2 KNWREnto11008_R2.fastq.gz.out -q 20 -s KNWREnto11008.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11009_R1.fastq.gz -r KNWREnto11009_R2.fastq.gz -1 KNWREnto11009_R1.fastq.gz.out -2 KNWREnto11009_R2.fastq.gz.out -q 20 -s KNWREnto11009.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11011_R1.fastq.gz -r KNWREnto11011_R2.fastq.gz -1 KNWREnto11011_R1.fastq.gz.out -2 KNWREnto11011_R2.fastq.gz.out -q 20 -s KNWREnto11011.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11013_R1.fastq.gz -r KNWREnto11013_R2.fastq.gz -1 KNWREnto11013_R1.fastq.gz.out -2 KNWREnto11013_R2.fastq.gz.out -q 20 -s KNWREnto11013.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11015_R1.fastq.gz -r KNWREnto11015_R2.fastq.gz -1 KNWREnto11015_R1.fastq.gz.out -2 KNWREnto11015_R2.fastq.gz.out -q 20 -s KNWREnto11015.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11017_R1.fastq.gz -r KNWREnto11017_R2.fastq.gz -1 KNWREnto11017_R1.fastq.gz.out -2 KNWREnto11017_R2.fastq.gz.out -q 20 -s KNWREnto11017.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11018_R1.fastq.gz -r KNWREnto11018_R2.fastq.gz -1 KNWREnto11018_R1.fastq.gz.out -2 KNWREnto11018_R2.fastq.gz.out -q 20 -s KNWREnto11018.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11019_R1.fastq.gz -r KNWREnto11019_R2.fastq.gz -1 KNWREnto11019_R1.fastq.gz.out -2 KNWREnto11019_R2.fastq.gz.out -q 20 -s KNWREnto11019.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11021_R1.fastq.gz -r KNWREnto11021_R2.fastq.gz -1 KNWREnto11021_R1.fastq.gz.out -2 KNWREnto11021_R2.fastq.gz.out -q 20 -s KNWREnto11021.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11022_R1.fastq.gz -r KNWREnto11022_R2.fastq.gz -1 KNWREnto11022_R1.fastq.gz.out -2 KNWREnto11022_R2.fastq.gz.out -q 20 -s KNWREnto11022.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11023_R1.fastq.gz -r KNWREnto11023_R2.fastq.gz -1 KNWREnto11023_R1.fastq.gz.out -2 KNWREnto11023_R2.fastq.gz.out -q 20 -s KNWREnto11023.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11025_R1.fastq.gz -r KNWREnto11025_R2.fastq.gz -1 KNWREnto11025_R1.fastq.gz.out -2 KNWREnto11025_R2.fastq.gz.out -q 20 -s KNWREnto11025.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11026_R1.fastq.gz -r KNWREnto11026_R2.fastq.gz -1 KNWREnto11026_R1.fastq.gz.out -2 KNWREnto11026_R2.fastq.gz.out -q 20 -s KNWREnto11026.paired.fastq.gz -o 25 
./SeqPrep -f KNWREnto11027_R1.fastq.gz -r KNWREnto11027_R2.fastq.gz -1 KNWREnto11027_R1.fastq.gz.out -2 KNWREnto11027_R2.fastq.gz.out -q 20 -s KNWREnto11027.paired.fastq.gz -o 25 </pre>

<h2 id="toc_13">2019-06-18-1233_cutadapt.slurm</h2>
<pre>#!/bin/bash
#SBATCH --job-name=cutadapt
#SBATCH -n 1 # number of nodes    
#SBATCH -n 1 # number of tasks 
#SBATCH -p long # parition
#SBATCH --account=bio # account code
#SBATCH --time=0-04:00:00 # requested job time D-HH:MM:SS
#SBATCH --mail-type=ALL 
#SBATCH --mail-user=matt_bowser@fws.gov 
#SBATCH -o 2019-06-18-1233_cutadapt-%j.out 

module load python/anaconda3
module load parallel/20160422
source /home/mattbowser/.bashrc

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts

ls | grep .paired.fastq.gz | parallel -j 20 "cutadapt -g GGWACWGGWTGAACWGTWTAYCCYCC  -m 150 -q 20,20 --max-n=3 --discard-untrimmed -o {}.Ftrimmed.fastq.gz {}"
ls | grep .Ftrimmed.fastq.gz | parallel -j 20 "cutadapt -a TGATTTTTTGGTCACCCTGAAGTTTA -m 150 -q 20,20 --max-n=3  --discard-untrimmed -o {}.Rtrimmed.fasta.gz {}"

module purge</pre>

<h2 id="toc_14">2019-06-19-1015_more_on_Yeti.txt</h2>
<pre>ssh mattbowser@fws.gov@yeti.cr.usgs.gov

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts

## cleaning up a little.
mkdir trimmed
mv *.Rtrimmed.fasta.gz trimmed/
rm *_R1*

cd trimmed
ls -1 | wc -l
125
## Good.

## Renaming.
rename .Rtrimmed.fasta.gz .fasta.gz *.Rtrimmed.fasta.gz

cd ..

## Now trying the renaming...
module load perl/perl-5.24.1
source $HOME/.bashrc

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts/trimmed
perl ../rename_fasta_gzip.plx KNWREnto10867.fasta.gz 

## I must have accidentally deleted a file.  Rerunning previous step.
rm *.fasta.gz
cd ..
sbatch 2019-06-18-1233_cutadapt.slurm
mv *.paired.fastq.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz trimmed
cd trimmed
rename .paired.fastq.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz .fasta.gz *.paired.fastq.gz.Ftrimmed.fastq.gz.Rtrimmed.fasta.gz

## Let's see if they can all be processed at once.
perl ../rename_fasta_gzip.plx *.fasta.gz 
## Nope.  That just renamed the first one.
perl ../rename_fasta_gzip.plx KNWREnto10866.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10867.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10868.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10869.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10871.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10872.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10873.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10875.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10876.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10877.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10878.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10879.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10881.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10883.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10884.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10885.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10886.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10887.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10888.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10889.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10890.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10891.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10892.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10893.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10894.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10895.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10896.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10897.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10898.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10899.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10900.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10901.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10902.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10903.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10904.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10905.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10906.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10908.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10909.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10910.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10912.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10913.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10914.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10916.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10918.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10920.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10922.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10923.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10924.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10926.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10927.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10928.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10930.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10931.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10932.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10934.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10936.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10938.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10940.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10941.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10942.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10944.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10945.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10948.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10950.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10951.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10952.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10953.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10954.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10956.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10958.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10959.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10960.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10961.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10962.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10963.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10964.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10965.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10966.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10967.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10968.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10969.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10970.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10971.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10972.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10973.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10974.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10975.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10976.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10977.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10978.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10979.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10981.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10982.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10983.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10985.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10986.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10987.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10988.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10989.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10990.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10993.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10995.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10997.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto10999.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11000.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11001.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11003.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11004.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11005.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11007.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11008.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11009.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11011.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11013.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11015.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11017.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11018.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11019.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11021.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11022.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11023.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11025.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11026.fasta.gz
perl ../rename_fasta_gzip.plx KNWREnto11027.fasta.gz
	
## I think I used the wrong script here.
cd ..
mkdir renamed
mv trimmed/*.renamed.fasta.gz renamed/
ls trimmed
ls renamed

ls -1 trimmed | wc -l
cd trimmed

## Oh, it should be ok.  Borrowing script from the run_rename_fasta.sh script.
cd ..
cd renamed

for g in *.renamed.fasta.gz
do

zcat $g &gt;&gt; cat.fasta
#rm $g

done

gzip cat.fasta

## Now for vsearch dereplication.
cd ..

module purge

sbatch 2019-06-19-1040_derep.slurm

## Now for denoising.  I hope this works.
sbatch 2019-06-19-1101_denoise.slurm

## Now working on classifying step.


cd /lustre/projects/fws/fws_bio/mattbowser/lib
git clone https://github.com/terrimporter/CO1Classifier.git

cd cd CO1*
wget https://github.com/terrimporter/CO1Classifier/releases/download/v3.2/CO1v3_2_trained.tar.gz
tar -zxvf CO1v3_2_trained.tar.gz

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts
sbatch 2019-06-19-1528_rdp_classifier.slurm

## That was canceled due to exceding the memory limit.</pre>

<h2 id="toc_15">2019-06-19-1040_derep.slurm</h2>

<pre>#!/bin/bash
#SBATCH --job-name=derep
#SBATCH -n 1 # number of nodes    
#SBATCH -n 1 # number of tasks 
#SBATCH -p long # parition
#SBATCH --account=bio # account code
#SBATCH --time=0-04:00:00 # requested job time D-HH:MM:SS
#SBATCH --mail-type=ALL 
#SBATCH --mail-user=matt_bowser@fws.gov 
#SBATCH -o 2019-06-19-0720_derep-%j.out 

module load genetics/vsearch-2.4.3

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts

vsearch --threads 10 --derep_fulllength renamed/cat.fasta.gz --output cat.uniques --sizein --sizeout

module purge</pre>

<h2 id="toc_16">2019-06-19-1101_denoise.slurm</h2>
<pre>#!/bin/bash
#SBATCH --job-name=denoise
#SBATCH -n 1 # number of nodes    
#SBATCH -n 1 # number of tasks 
#SBATCH -p long # parition
#SBATCH --account=bio # account code
#SBATCH --time=1-04:00:00 # requested job time D-HH:MM:SS
#SBATCH --mail-type=ALL 
#SBATCH --mail-user=matt_bowser@fws.gov 
#SBATCH -o 2019-06-19-1101_denoise-%j.out 

module load genetics/vsearch-2.4.3

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts

./usearch11 -unoise3 cat.uniques -zotus cat.denoised -minsize 3 &gt; log

vi -c "%s/&gt;Zotu/&gt;Otu/g" -c "wq" cat.denoised

vsearch  --usearch_global renamed/cat.fasta.gz --db cat.denoised --id 1.0 --otutabout cat.fasta.table --threads 20

module purge</pre>

<h2 id="toc_17">2019-06-19-1528_rdp_classifier.slurm</h2>

<pre>#!/bin/bash
#SBATCH --job-name=denoise
#SBATCH -n 1 # number of nodes    
#SBATCH -n 1 # number of tasks 
#SBATCH -p long # parition
#SBATCH --account=bio # account code
#SBATCH --time=1-04:00:00 # requested job time D-HH:MM:SS
#SBATCH --mail-type=ALL 
#SBATCH --mail-user=matt_bowser@fws.gov 
#SBATCH -o 2019-06-19-1528_rdp_classifier-%j.out 

module load genetics/vsearch-2.4.3

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts

module load java/jdk-11.0.1 
java -Xmx8g -jar /home/mattbowser/rdp_classifier_2.12/dist/classifier.jar \
 classify -t /lustre/projects/fws/fws_bio/mattbowser/lib/CO1Classifier/mydata_trained/rRNAClassifier.properties \
 -o cat.denoised.out cat.denoised

module purge</pre>

<h2 id="toc_18">2019-06-20-0942_more_on_Yeti.txt</h2>

<pre>ssh mattbowser@fws.gov@yeti.cr.usgs.gov

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts

## Assigning taxonomy using vsearch.
sbatch 2019-06-20-0943_vsearch_taxonomy.slurm
## That was not the kind of output I wanted.  Trying again.

sbatch 2019-06-20-1024_vsearch_taxonomy.slurm
## That returned no matches.  I wonder what I am doing wrong.

## Trying lulu prep.
sbatch 2019-06-20-1039_lulu_prep.slurm
## That worked just fine.

## I still do not know why vsearch is not working here.  I 
sbatch 2019-06-20-1101_vsearch_taxonomy.slurm
## Still nt working.  Could this be a file name issue?

cp cat.denoised cat.denoised.fas

module load genetics/vsearch-2.4.3

vsearch --usearch_global cat.denoised.fas \
 --db /home/mattbowser/AK_arhropod_COI_library/2019-03-25-0832_clusters.fas \
 --id .90 \
 --iddef 1 \
 --blast6out  2019-06-20-1121_vsearch_matches.txt
## Same problem.  Am I using the wrong -iddef for comparing short query reads to long db sequences?

## Trying CD-HIT, which I remember being appropriate for matching short reads to long sequences.
sbatch 2019-06-20-1126_vsearch_taxonomy.slurm
## That worked.

cat 2019-06-20-1126_vsearch_taxonomy-4190176.out
vsearch v2.4.3_linux_x86_64, 125.9GB RAM, 20 cores
https://github.com/torognes/vsearch

Reading file /home/mattbowser/AK_arhropod_COI_library/2019-03-25-0832_clusters.fas 100%
90808347 nt in 140244 seqs, min 63, max 1551, avg 648
Masking 100%
Counting unique k-mers 100%
Creating index of unique k-mers 100%
Searching 100%
Matching query sequences: 1925 of 2348 (81.98%)

## Ok, now switching to R locally.
## Going to try to get identifications from BOLD.
wd &lt;- "D:/projects/Slikok_watershed/data/2016_arthropod_samples/NGS_data/work_space/2019-06-17_Yeti"
setwd(wd)

library(Biostrings)

fas1 &lt;- readDNAStringSet("cat.denoised")

length(fas1)
[1] 2348


library(bold)
ids &lt;- NA
id1 &lt;- bold_identify(as.character(fas1[1]), db = "COX1")
ids[[1]] &lt;- id1

library(tictoc)
tic("10 records")
ids &lt;- NA
for (this_otu in 1:10) #length(fas1)
 {
 ids[[this_otu]] &lt;- bold_identify(as.character(fas1[this_otu]), db = "COX1")
 }
toc()
10 records: 123.46 sec elapsed
## So 12 second per record.

## How long for the whole thing?
(123.46/10) * length(fas1)
[1] 28988.41 # seconds
(123.46/10) * length(fas1) * 1/60
[1] 483.1401 # minutes.
(123.46/10) * length(fas1) * 1/60 * 1/60
[1] 8.052336 # hours.


save(ids, file="ids.RData")

## Ok, back on Yeti.
## Copied over some of those R and SLURM files. ## starting some.
sbatch 2019-06-20-1241_bold_0001-0500.slurm
sbatch 2019-06-20-1241_bold_0501-1000.slurm
sbatch 2019-06-20-1241_bold_1001-1500.slurm
sbatch 2019-06-20-1241_bold_1501-2000.slurm
sbatch 2019-06-20-1241_bold_2001-2348.slurm

## Some of those failed, so I reran the 501-1000 and 1001-1500 scripts.

## Ok, local again.  Going to assemble some of the data we already have.
ot1 &lt;- read.delim("cat.fasta.table")
dim(ot1)
[1] 2348  126

## Doing LULU filtering.
library(lulu)

ml &lt;- read.delim("2019-06-20-1040_match_list.txt",
 header=FALSE, 
 as.is=TRUE,
 stringsAsFactors=FALSE
 )
dim(ml)
[1] 2691    3

ot2 &lt;- ot1[,2:ncol(ot1)]
row.names(ot2) &lt;- ot1$OTUid

ct1 &lt;- lulu(ot2,
 ml,
 minimum_ratio_type = "min",
 minimum_match = 99,
 minimum_relative_cooccurence = 0.95
 )

dim(ct1$curated_table)
[1] 2348  125

ot1[,2:ncol(ot1)] == ct1$curated_table[1:ncol(ct1$curated_table)]

sum(!ot1[,2:ncol(ot1)] == ct1$curated_table[1:ncol(ct1$curated_table)])
[1] 11806 ## That many differences?!

head(ct1$curated_table)

## Trying adjusting lulu parameters.
ct1 &lt;- lulu(ot2,
 ml,
 minimum_ratio = 0.01,
 minimum_ratio_type = "min",
 minimum_match = 99,
 minimum_relative_cooccurence = 0.95
 )

## Comparing these.
head(ot1) 
head(ct1$curated_table)

## That minimum_ratio parameter does not appear to do anything.  I tried values from 0.01 to 1000 and nothing appeared to change.
## It seems clear that lulu does not mess with within-otu abundance.</pre>

<h2 id="toc_19">2019-06-20-1039_lulu_prep.slurm</h2>

<pre>#!/bin/bash
#SBATCH --job-name=luluprep
#SBATCH -n 1 # number of nodes    
#SBATCH -n 1 # number of tasks 
#SBATCH -p long # parition
#SBATCH --account=bio # account code
#SBATCH --time=0-01:00:00 # requested job time D-HH:MM:SS
#SBATCH --mail-type=ALL 
#SBATCH --mail-user=matt_bowser@fws.gov 
#SBATCH -o 2019-06-20-1039_lulu_prep-%j.out 

module load genetics/vsearch-2.4.3

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts

vsearch --usearch_global cat.denoised \
 --db cat.denoised --self --id .99 --iddef 1 \
 --userout 2019-06-1040_match_list.txt -userfields query+target+id \
 --maxaccepts 0 --query_cov .9 --maxhits 10

module purge</pre>

<h2 id="toc_20">2019-06-20-1126_vsearch_taxonomy.slurm</h2>

<pre>#!/bin/bash
#SBATCH --job-name=vsearchtaxonomy
#SBATCH -n 1 # number of nodes    
#SBATCH -n 1 # number of tasks 
#SBATCH -p long # parition
#SBATCH --account=bio # account code
#SBATCH --time=1-04:00:00 # requested job time D-HH:MM:SS
#SBATCH --mail-type=ALL 
#SBATCH --mail-user=matt_bowser@fws.gov 
#SBATCH -o 2019-06-20-1126_vsearch_taxonomy-%j.out 

module load genetics/vsearch-2.4.3

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts

## Assign taxonomy.
vsearch --usearch_global cat.denoised \
 --db /home/mattbowser/AK_arhropod_COI_library/2019-03-25-0832_clusters.fas \
 --id .90 \
 --iddef 0 \
 --blast6out 2019-06-20-1126_vsearch_matches.txt 

module purge</pre>

<h2 id="toc_21">2019-06-20-1241_bold_0001-0500.R</h2>
<pre>wd &lt;- "/lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts"
setwd(wd)

library(Biostrings)
library(bold)
library(tictoc)

fas1 &lt;- readDNAStringSet("cat.denoised")

ids &lt;- NA
for (this_otu in 1:500)
 {
 ids[[this_otu]] &lt;- bold_identify(as.character(fas1[this_otu]), db = "COX1")
 }

save(ids, file="ids_0001-0500.RData")</pre>

<h2 id="toc_22">2019-06-20-1241_bold_0001-0500.slurm</h2>
<pre>#!/bin/bash
#SBATCH --job-name=bold1 
#SBATCH -n 1 # number of nodes    
#SBATCH -n 1 # number of tasks 
#SBATCH -p long # parition
#SBATCH --account=bio # account code
#SBATCH --time=1-01:00:00 # requested job time D-HH:MM:SS
#SBATCH --mail-type=ALL # choose when you want to be emailed
#SBATCH --mail-user=matt_bowser@fws.gov # add your email address
#SBATCH -o 2019-06-20-1241_bold_0001-0500-%j.out # name of output file (the %j inserts the jobid)

module load R/3.5.1-gcc7.1.0

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts

R CMD BATCH 2019-06-20-1241_bold_0001-0500.R 2019-06-20-1241_bold_0001-0500.txt

module purge</pre>

<h2 id="toc_23">2019-06-21-0845_more_on_Yeti.txt</h2>
<pre>ssh mattbowser@fws.gov@yeti.cr.usgs.gov

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts

sbatch 2019-06-21-0842_bold_0501-0750.slurm
sbatch 2019-06-21-0842_bold_0751-1000.slurm

sbatch 2019-06-21-0842_bold_1001-1250.slurm

sbatch 2019-06-21-0842_bold_1251-1500.slurm

## I did some reading about demultiplexing errors.  According to Deiner et al. (2017), "The exact mechanisms for mis-assignment of reads remain unknown, but increasingly many studies are reporting this error to be between 0.01% and 0.03% of reads..."

## Some of those finished up.

cat 2019-06-21-0826_bold_0501-0750.txt

...
[1] "this_otu: 721"
[1] "this_otu: 722"
[1] "this_otu: 723"
[1] "this_otu: 724"
Error in doc_parse_raw(x, encoding = encoding, base_url = base_url, as_html = as_html,  :
  EntityRef: expecting ';' [23]
Calls: bold_identify ... read_xml.character -&gt; read_xml.raw -&gt; doc_parse_raw
Execution halted
## So record 724 is problematic.

cat 2019-06-21-0826_bold_0751-1000.txt
## That one was good.

cat 2019-06-21-0826_bold_1001-1250.txt
[1] "this_otu: 1178"
[1] "this_otu: 1179"
[1] "this_otu: 1180"
[1] "this_otu: 1181"
Error in doc_parse_raw(x, encoding = encoding, base_url = base_url, as_html = as_html,  :
  EntityRef: expecting ';' [23]
Calls: bold_identify ... read_xml.character -&gt; read_xml.raw -&gt; doc_parse_raw
Execution halted
## Looks like record 1181 is problematic.

cat 2019-06-21-0826_bold_1251-1500.txt
## That one is still running.

## Edited R and SLURM files, trying again.
sbatch 2019-06-21-0944_bold_0501-0750.slurm

sbatch 2019-06-21-0944_bold_1001-1250.slurm


## Ok, now switching to R locally.
## Going to try to get identifications from BOLD.
wd &lt;- "D:/projects/Slikok_watershed/data/2016_arthropod_samples/NGS_data/work_space/2019-06-17_Yeti"
setwd(wd)

library(Biostrings)
library(lulu)

fas1 &lt;- readDNAStringSet("cat.denoised")

length(fas1)
[1] 2348  126

ot1 &lt;- read.delim("cat.fasta.table")
dim(ot1)
[1] 2348  126

## Doing LULU filtering.


ml &lt;- read.delim("2019-06-20-1040_match_list.txt",
 header=FALSE, 
 as.is=TRUE,
 stringsAsFactors=FALSE
 )
dim(ml)
[1] 2691    3

ot2 &lt;- ot1[,2:ncol(ot1)]
row.names(ot2) &lt;- ot1[,1]

## Running lulu
ct1 &lt;- lulu(ot2,
 ml,
 minimum_ratio_type = "min",
 minimum_match = 99,
 minimum_relative_cooccurence = 0.95
 )

## Comparing these.
head(ot1) 
head(ct1$curated_table)

dim(ct1$curated_table)
[1] 2348  125

ot3 &lt;- ct1$curated_table
dim(ot3)
[1] 2007  125

## Now removing occurrences representing less than 0.05% of reads for an OTU based on 0.01% and 0.03% demultiplexing error rate.
rmdemuxerrs &lt;- function(x, threshold=0.05)
 {
 tot &lt;- sum(x)
 print(paste("total:", tot))
 min &lt;- tot * threshold*0.01
 print(paste("min:", min))
 y &lt;- x
 y[y &lt; min] &lt;- 0
 y
 }

## Testing.
rmdemuxerrs(x=1:10, threshold=0.05)
[1] "total: 55"
[1] "min: 0.0275"
 [1]  1  2  3  4  5  6  7  8  9 10

rmdemuxerrs(x=c(1:9, 100), threshold=0.05) 
[1] "total: 145"
[1] "min: 0.0725"
 [1]   1   2   3   4   5   6   7   8   9 100
 
rmdemuxerrs(x=c(1:9, 1000), threshold=0.05) 
[1] "total: 1045"
[1] "min: 0.5225"
 [1]    1    2    3    4    5    6    7    8    9 1000

rmdemuxerrs(x=c(1:9, 10000), threshold=0.05)
[1] "total: 10045"
[1] "min: 5.0225"
 [1]     0     0     0     0     0     6     7     8     9 10000

## Making this a little more vocal.
rmdemuxerrs &lt;- function(x, threshold=0.05)
 {
 tot &lt;- sum(x)
 print(paste("total:", tot))
 min &lt;- tot * threshold*0.01
 print(paste("min:", min))
 y &lt;- x
 y[y &lt; min] &lt;- 0
 print(paste("Removed", sum(x &lt; min) - sum(x == 0), "of", sum(x &gt; 0), "occurrences."))
 y
 }

ot4 &lt;- ot3 
for (this_row in 1:nrow(ot3)) #nrow(ot3)
 {
 ot4[this_row,] &lt;- rmdemuxerrs(ot4[this_row,], threshold=0.05)
 } 
 
#saving here.
save.image("2019-06-21-1046_workspace.RData")
## Saving table.
write.csv(ot4, "2019-06-21-1046_otu_table.csv")

## Ok, now I need to remove rare species using some threshold.
## Again quoting Deiner et al. (2017), "The process of applying abundance filtering requires setting an MOTU abundance threshold by which MOTUs are only retained in analysis if their relative abundance is higher than the selected threshold (Bokulich et al., 2013). Selection of a threshold varies between studies and there is no generally accepted definition of what constitutes an insufficiently abundant read (Murray et al., 2015), perhaps with the exception of singletons..."
## I have seen minimum counts of 10.  Hajibabaei et al (2019) removed only singletons and doubletons: "We defined rare sequences to be those clusters comprised of less than 3 reads (singletons and doubletons) (Brown et al., 2015; Tedersoo et al., 2010)".  I should acquire Brown et al. (2015).  I read the abstract. I also looked at Murray et al. (2015). I am going to go with dropping just singletons and doubletons for now.

## Let's look at an OTU with an abundance of 3 and see if it looks genuine.
ab3 &lt;- which(apply(ot4, 1, sum) == 3)

as.character(fas1[names(fas1) == names(ab3[1])])
                                                                                                                                                                                                                                                                                                                    Otu2023 
"TTTATCTTCATTATCCTTCCCTTCTGGGGGATCCGTTGATTTTGCTATTTTTTCTTTACATTTAGCAGGGGCTTCCTCTATTATAGGGGCTATTAATTTTATTTCCACAATTTTAAATATACGGGCATATATAATTAGTATGGAAAAGGTGTCTTTATTTGTTTGATCCATTTTAATTACTGCTGTTCTTTTATTATTATCTTTACCTGTTTTAGCTGGGGCTATTACAATGCTATTGACTGATCGAAATTTTAATACATCATTTTTTGATCCTGCTGGAGGAGGAGATCCTATTTTATTTCAACATTTATTT" 
# Pityohyphantes alticeps, 97.53% similarity with closest match on BOLD.

as.character(fas1[names(fas1) == names(ab3[2])])
                                                                                                                                                                                                                                                                                                                    Otu2025 
"ATTATCAAGAAATATCGCACATGCAGGGCCTAGAGTAGATATAGCAATTTTCTCTTTACATTTAGCAGGGATTTCTTCAATCCTAGGAGCAGTAAACTTTATTACAACTGTTATAAATATACGCCCAACAGGAATAAATATAGATCGAACACCACTATTTGTCTGATCAGTAATTATTACAGCAGTTTTACTATTATTATCACTACCAGTACTTGCAGGTGCTATTACCATACTTTTAACAGACCGAAATATTAATACAACATTCTTTGACCCGGCTGGTGGGAGGGACCCTATCTTATACCAACATTTATTC" 
# A Balclutha, 94.5% match.

ot5 &lt;- ot4

droprare &lt;- function(x, min_abundance=3)
 {
 if (x &lt; min_abundance)
  {0}
 else
  {x}
 }
 
## Testing.
droprare(0)
droprare(1)
droprare(2)
droprare(3)
droprare(4)

ot5 &lt;- apply(ot4, c(1,2), droprare)
dim(ot5)
[1] 2007  125

## Dropping otus with no resulting occurrences.
nreads &lt;- apply(ot5, 1, sum)
ot5 &lt;- ot5[nreads &gt; 0,]
dim(ot5)
[1] 1937  125
## Ok, retaining 1937 ESVs.

#saving here.
save.image("2019-06-21-1129_workspace.RData")
## Saving table.
write.csv(ot5, "2019-06-21-1129_otu_table.csv")

## Resorting that table.
nreads &lt;- apply(ot5, 1, sum)
ot5 &lt;- ot5[order(-nreads),]
write.csv(ot5, "2019-06-21-1133_otu_table.csv")

## How many ESV occurrences does this represent?
sum(ot5 &gt; 0)
[1] 3702 ## That is a lot of observations.

## Back on Yeti.  I had better check see whether or not those SLURM R scripts succeeded.
ls -al ids*
-rw-r--r--. 1 mattbowser users 750875 Jun 20 16:46 ids_0001-0500.RData
-rw-r--r--. 1 mattbowser users 344684 Jun 21 12:36 ids_0501-0750.RData
-rw-r--r--. 1 mattbowser users 324048 Jun 21 11:37 ids_0751-1000.RData
-rw-r--r--. 1 mattbowser users 330370 Jun 21 12:38 ids_1001-1250.RData
-rw-r--r--. 1 mattbowser users 320690 Jun 21 11:43 ids_1251-1500.RData
-rw-r--r--. 1 mattbowser users 540318 Jun 20 16:45 ids_1501-2000.RData
-rw-r--r--. 1 mattbowser users 341008 Jun 20 16:15 ids_2001-2348.RData

cat 2019-06-21-0941_bold_0501-0750.txt ## That looked good.
cat 2019-06-21-0941_bold_1001-1250.txt ## That also succeeded.  We should have some BOLD ids now.

## That is all for today.</pre>

<h2 id="toc_24">2019-06-21-0941_bold_1001-1250.R</h2>
<pre>wd &lt;- "/lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts"
setwd(wd)

library(Biostrings)
library(bold)
library(tictoc)

fas1 &lt;- readDNAStringSet("cat.denoised")

ids &lt;- NA
for (this_otu in c(1000:1180, 1182:1250)) #length(fas1)
 {
 print(paste("this_otu:", this_otu))
 ids[[this_otu]] &lt;- bold_identify(as.character(fas1[this_otu]), db = "COX1")
 }

save(ids, file="ids_1001-1250.RData")</pre>

<h2 id="toc_25">2019-06-21-0944_bold_1001-1250.slurm</h2>
<pre>#!/bin/bash
#SBATCH --job-name=bold2 
#SBATCH -n 1 # number of nodes    
#SBATCH -n 1 # number of tasks 
#SBATCH -p long # parition
#SBATCH --account=bio # account code
#SBATCH --time=1-01:00:00 # requested job time D-HH:MM:SS
#SBATCH --mail-type=ALL # choose when you want to be emailed
#SBATCH --mail-user=matt_bowser@fws.gov # add your email address
#SBATCH -o 2019-06-20-1241_bold_0501-1000-%j.out # name of output file (the %j inserts the jobid)

module load R/3.5.1-gcc7.1.0

cd /lustre/projects/fws/fws_bio/mattbowser/projects/2016_Slikok_project/data/arthropods/SCVUC_COI_metabarcode_pipeline/Scripts

R CMD BATCH 2019-06-21-0941_bold_1001-1250.R 2019-06-21-0941_bold_1001-1250.txt

module purge</pre>

<h2 id="toc_26">2019-06-28-1020_examining_identifications.R</h2>

<pre>## Today I want to examine identifications.
wd &lt;- "D:/projects/Slikok_watershed/data/2016_arthropod_samples/NGS_data/work_space/2019-06-17_Yeti"
setwd(wd)

library(Biostrings)

fas1 &lt;- readDNAStringSet("cat.denoised")

length(fas1)
[1] 2348

ot1 &lt;- read.delim("cat.fasta.table")
dim(ot1)
[1] 2348  126

vsids &lt;- read.delim("2019-06-20-1126_vsearch_matches.txt", header=FALSE)
dim(vsids)
[1] 1925   12 ## Only matches are included.  I am surprised that there were matches for such a high percentage, 1925/2348 = 82%.

names(vsids) &lt;- c("vquery",
 "vtarget",
 "vid",
 "valnlen",
 "vmism",
 "vopens",
 "vqlo",
 "vqhi",
 "vtlo",
 "vthi",
 "vevalue",
 "vbits"
 )

## Throwing out the last two columns, which are meaningless here.
vsids &lt;- vsids[,1:10]

## Getting the taxonomy...
aktax &lt;- read.delim("C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2019-03-15_library_construction/2019-04-19-1122_specimen_data.txt")

dim(aktax)
[1] 137067     68

library(sqldf)

head(aktax)

vsids2 &lt;- sqldf('
select
 vsids.*,
 aktax.phylum_name,
 aktax.class_name,
 aktax.order_name,
 aktax.family_name,
 aktax.genus_name,
 aktax.species_name,
 aktax.bin_uri
from
 vsids left outer join
 aktax
on
 vsids.vtarget = aktax.processid 
')
dim(vsids2)
[1] 1925   17

## There are some NAs. Why? How could MOSN1882-18 be matched in the FASTA file but not the associated data?  I must have made a mistake when I generated the library.

## I had used the file 2019-03-25-0832_clusters.fas

## Checking something.
load("C:/Users/mattbowser/Documents/2017_STDP_NGS/work_space/2019-03-15_library_construction/2019-03-25-0830_workspace.RData")

sum(names(fas1) == d2$processid)
[1] 140244

sum(vsids$vtarget %in% names(fas1))
[1] 1925

aktax &lt;- d2

vsids2 &lt;- sqldf('
select
 vsids.*,
 aktax.phylum_name,
 aktax.class_name,
 aktax.order_name,
 aktax.family_name,
 aktax.genus_name,
 aktax.species_name,
 aktax.bin_uri
from
 vsids left outer join
 aktax
on
 vsids.vtarget = aktax.processid 
')
dim(vsids2)
[1] 1925   17

sum(is.na(vsids2$phylum_name))
[1] 0
## That is better.

## Saving this.
write.csv(vsids2, "2019-06-28-1135_vsearch_AKlib_ids.csv", row.names=FALSE)


## Restarting R.
## Now I want to go through those bold() ids.
wd &lt;- "D:/projects/Slikok_watershed/data/2016_arthropod_samples/NGS_data/work_space/2019-06-17_Yeti"
setwd(wd)

library(Biostrings)

fas1 &lt;- readDNAStringSet("cat.denoised")
otuid &lt;- names(fas1)
bids &lt;- as.data.frame(otuid)
bids$similarity &lt;- NA
bids$processid &lt;- NA
bids$taxonomicidentification &lt;- NA

load("ids_0001-0500.RData")

for(this_record in 1:500)
 {
 idf &lt;- ids[[this_record]]
 this_otu &lt;- names(idf)
 print(this_otu)
 names(idf) &lt;- "res"
 if(!is.null(idf$res))
  {
  #print(head(idf$res))
  maxsim &lt;- max(idf$res$similarity)
  print(paste("masxim:", maxsim))
  sl &lt;- idf$res$similarity == maxsim
  sldf &lt;- idf$res[sl,]
  #print(sldf)
  ## If any have spaces (likely to be species names), choose these.
  sl &lt;- grepl(" ", sldf$taxonomicidentification)
  if (sum(sl) &gt; 0)
   {
   sldf &lt;- sldf[sl,]
   } 
  #print(sldf)
  ## Choose the most frequent name.
  ag1 &lt;- aggregate(sldf$ID, by=list(sldf$taxonomicidentification), length)
  ag1 &lt;- ag1[order(-ag1$x),]
  print(ag1)
  sl &lt;- sldf$taxonomicidentification == ag1$Group.1[1]
  sldf &lt;- sldf[sl,]
  #print(sldf)
  bids$similarity[this_record] &lt;- sldf$similarity[1]
  bids$processid[this_record] &lt;- sldf$ID[1]
  bids$taxonomicidentification[this_record] &lt;- sldf$taxonomicidentification[1]
  }
 }

load("ids_0501-0750.RData")

for(this_record in 501:750)
 {
 idf &lt;- ids[[this_record]]
 if(!is.null(idf))
  {
 this_otu &lt;- names(idf)
 print(this_otu)
 names(idf) &lt;- "res"
 if(!is.null(idf$res))
  {
  #print(head(idf$res))
  maxsim &lt;- max(idf$res$similarity)
  print(paste("masxim:", maxsim))
  sl &lt;- idf$res$similarity == maxsim
  sldf &lt;- idf$res[sl,]
  #print(sldf)
  ## If any have spaces (likely to be species names), choose these.
  sl &lt;- grepl(" ", sldf$taxonomicidentification)
  if (sum(sl) &gt; 0)
   {
   sldf &lt;- sldf[sl,]
   } 
  #print(sldf)
  ## Choose the most frequent name.
  ag1 &lt;- aggregate(sldf$ID, by=list(sldf$taxonomicidentification), length)
  ag1 &lt;- ag1[order(-ag1$x),]
  print(ag1)
  sl &lt;- sldf$taxonomicidentification == ag1$Group.1[1]
  sldf &lt;- sldf[sl,]
  #print(sldf)
  bids$similarity[this_record] &lt;- sldf$similarity[1]
  bids$processid[this_record] &lt;- sldf$ID[1]
  bids$taxonomicidentification[this_record] &lt;- sldf$taxonomicidentification[1]
   }
  }
 }

load("ids_0751-1000.RData")

for(this_record in 751:1000)
 {
 idf &lt;- ids[[this_record]]
 if(!is.null(idf))
  {
 this_otu &lt;- names(idf)
 print(this_otu)
 names(idf) &lt;- "res"
 if(!is.null(idf$res))
  {
  #print(head(idf$res))
  maxsim &lt;- max(idf$res$similarity)
  print(paste("masxim:", maxsim))
  sl &lt;- idf$res$similarity == maxsim
  sldf &lt;- idf$res[sl,]
  #print(sldf)
  ## If any have spaces (likely to be species names), choose these.
  sl &lt;- grepl(" ", sldf$taxonomicidentification)
  if (sum(sl) &gt; 0)
   {
   sldf &lt;- sldf[sl,]
   } 
  #print(sldf)
  ## Choose the most frequent name.
  ag1 &lt;- aggregate(sldf$ID, by=list(sldf$taxonomicidentification), length)
  ag1 &lt;- ag1[order(-ag1$x),]
  print(ag1)
  sl &lt;- sldf$taxonomicidentification == ag1$Group.1[1]
  sldf &lt;- sldf[sl,]
  #print(sldf)
  bids$similarity[this_record] &lt;- sldf$similarity[1]
  bids$processid[this_record] &lt;- sldf$ID[1]
  bids$taxonomicidentification[this_record] &lt;- sldf$taxonomicidentification[1]
   }
  }
 }

load("ids_1001-1250.RData")

for(this_record in 1001:1250)
 {
 idf &lt;- ids[[this_record]]
 if(!is.null(idf))
  {
 this_otu &lt;- names(idf)
 print(this_otu)
 names(idf) &lt;- "res"
 if(!is.null(idf$res))
  {
  #print(head(idf$res))
  maxsim &lt;- max(idf$res$similarity)
  print(paste("masxim:", maxsim))
  sl &lt;- idf$res$similarity == maxsim
  sldf &lt;- idf$res[sl,]
  #print(sldf)
  ## If any have spaces (likely to be species names), choose these.
  sl &lt;- grepl(" ", sldf$taxonomicidentification)
  if (sum(sl) &gt; 0)
   {
   sldf &lt;- sldf[sl,]
   } 
  #print(sldf)
  ## Choose the most frequent name.
  ag1 &lt;- aggregate(sldf$ID, by=list(sldf$taxonomicidentification), length)
  ag1 &lt;- ag1[order(-ag1$x),]
  print(ag1)
  sl &lt;- sldf$taxonomicidentification == ag1$Group.1[1]
  sldf &lt;- sldf[sl,]
  #print(sldf)
  bids$similarity[this_record] &lt;- sldf$similarity[1]
  bids$processid[this_record] &lt;- sldf$ID[1]
  bids$taxonomicidentification[this_record] &lt;- sldf$taxonomicidentification[1]
   }
  }
 }

load("ids_1251-1500.RData")

for(this_record in 1251:1500)
 {
 idf &lt;- ids[[this_record]]
 if(!is.null(idf))
  {
 this_otu &lt;- names(idf)
 print(this_otu)
 names(idf) &lt;- "res"
 if(!is.null(idf$res))
  {
  #print(head(idf$res))
  maxsim &lt;- max(idf$res$similarity)
  print(paste("masxim:", maxsim))
  sl &lt;- idf$res$similarity == maxsim
  sldf &lt;- idf$res[sl,]
  #print(sldf)
  ## If any have spaces (likely to be species names), choose these.
  sl &lt;- grepl(" ", sldf$taxonomicidentification)
  if (sum(sl) &gt; 0)
   {
   sldf &lt;- sldf[sl,]
   } 
  #print(sldf)
  ## Choose the most frequent name.
  ag1 &lt;- aggregate(sldf$ID, by=list(sldf$taxonomicidentification), length)
  ag1 &lt;- ag1[order(-ag1$x),]
  print(ag1)
  sl &lt;- sldf$taxonomicidentification == ag1$Group.1[1]
  sldf &lt;- sldf[sl,]
  #print(sldf)
  bids$similarity[this_record] &lt;- sldf$similarity[1]
  bids$processid[this_record] &lt;- sldf$ID[1]
  bids$taxonomicidentification[this_record] &lt;- sldf$taxonomicidentification[1]
   }
  }
 }

load("ids_1501-2000.RData")

for(this_record in 1501:2000)
 {
 idf &lt;- ids[[this_record]]
 if(!is.null(idf))
  {
 this_otu &lt;- names(idf)
 print(this_otu)
 names(idf) &lt;- "res"
 if(!is.null(idf$res))
  {
  #print(head(idf$res))
  maxsim &lt;- max(idf$res$similarity)
  print(paste("masxim:", maxsim))
  sl &lt;- idf$res$similarity == maxsim
  sldf &lt;- idf$res[sl,]
  #print(sldf)
  ## If any have spaces (likely to be species names), choose these.
  sl &lt;- grepl(" ", sldf$taxonomicidentification)
  if (sum(sl) &gt; 0)
   {
   sldf &lt;- sldf[sl,]
   } 
  #print(sldf)
  ## Choose the most frequent name.
  ag1 &lt;- aggregate(sldf$ID, by=list(sldf$taxonomicidentification), length)
  ag1 &lt;- ag1[order(-ag1$x),]
  print(ag1)
  sl &lt;- sldf$taxonomicidentification == ag1$Group.1[1]
  sldf &lt;- sldf[sl,]
  #print(sldf)
  bids$similarity[this_record] &lt;- sldf$similarity[1]
  bids$processid[this_record] &lt;- sldf$ID[1]
  bids$taxonomicidentification[this_record] &lt;- sldf$taxonomicidentification[1]
   }
  }
 }

load("ids_2001-2348.RData")

for(this_record in 2001:2348)
 {
 idf &lt;- ids[[this_record]]
 if(!is.null(idf))
  {
 this_otu &lt;- names(idf)
 print(this_otu)
 names(idf) &lt;- "res"
 if(!is.null(idf$res))
  {
  #print(head(idf$res))
  maxsim &lt;- max(idf$res$similarity)
  print(paste("masxim:", maxsim))
  sl &lt;- idf$res$similarity == maxsim
  sldf &lt;- idf$res[sl,]
  #print(sldf)
  ## If any have spaces (likely to be species names), choose these.
  sl &lt;- grepl(" ", sldf$taxonomicidentification)
  if (sum(sl) &gt; 0)
   {
   sldf &lt;- sldf[sl,]
   } 
  #print(sldf)
  ## Choose the most frequent name.
  ag1 &lt;- aggregate(sldf$ID, by=list(sldf$taxonomicidentification), length)
  ag1 &lt;- ag1[order(-ag1$x),]
  print(ag1)
  sl &lt;- sldf$taxonomicidentification == ag1$Group.1[1]
  sldf &lt;- sldf[sl,]
  #print(sldf)
  bids$similarity[this_record] &lt;- sldf$similarity[1]
  bids$processid[this_record] &lt;- sldf$ID[1]
  bids$taxonomicidentification[this_record] &lt;- sldf$taxonomicidentification[1]
   }
  }
 }

## Saving this.
write.csv(bids, "2019-06-28-1226_bold_ids.csv", row.names=FALSE)

## Now combining the two sets of identifications.
vsids &lt;- read.csv("2019-06-28-1135_vsearch_AKlib_ids.csv", stringsAsFactors=FALSE)

library(sqldf)

ids2 &lt;- sqldf('
select
 bids.*,
 vsids.*
from
 bids left outer join
 vsids
on
 bids.otuid = vsids.vquery 
')
dim(ids2)

## Do any of these happen to be matched to the same BOLD records?
sl &lt;- ids2$processid == ids2$vtarget
sl[is.na(sl)] &lt;- FALSE
sum(sl)
[1] 112  ## Yes.
ids2[sl,]

ids2$accepted_id &lt;- ""
ids2[101:110,]

write.csv(ids2, "2019-06-28-1443_ids.csv", row.names=FALSE)

ids2$accepted_id[!is.na(ids2$taxonomicidentification)] &lt;- ids2$taxonomicidentification[!is.na(ids2$taxonomicidentification)]

## Now filling in where missing.
sl &lt;- (ids2$accepted_id == "") &amp; !(is.na(ids2$species_name))
ids2$accepted_id[sl] &lt;- ids2$species_name[sl]
sl &lt;- (ids2$accepted_id == "") &amp; !(is.na(ids2$genus_name))
ids2$accepted_id[sl] &lt;- ids2$genus_name[sl]
sl &lt;- (ids2$accepted_id == "") &amp; !(is.na(ids2$family_name))
ids2$accepted_id[sl] &lt;- ids2$family_name[sl]
sl &lt;- (ids2$accepted_id == "") &amp; !(is.na(ids2$order_name))
ids2$accepted_id[sl] &lt;- ids2$order_name[sl]
sl &lt;- (ids2$accepted_id == "") &amp; !(is.na(ids2$class_name))
ids2$accepted_id[sl] &lt;- ids2$class_name[sl]
sl &lt;- (ids2$accepted_id == "") &amp; !(is.na(ids2$phylum_name))
ids2$accepted_id[sl] &lt;- ids2$phylum_name[sl]

ids2$label &lt;- paste(ids2$otuid, ids2$accepted_id)

ids2$otuid == names(fas1)
fas2 &lt;- fas1
names(fas2) &lt;- ids2$label

write.csv(ids2, "2019-06-28-1507_ids.csv", row.names=FALSE)

writeXStringSet(fas2, "2019-06-28-1504_labeled_otus.fas")</pre>

</body></html>